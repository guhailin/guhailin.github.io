{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2019-07-13-Dubbo系列-QOS.md","hash":"98be90e38fd7d3a209415aedee994bd65debaa48","modified":1563155119323},{"_id":"source/_posts/2019-07-14-Dubbo系列-编解码.md","hash":"59fd6ad80625829b1c81ea3ba022ba243e8ecc15","modified":1563157285162},{"_id":"source/_posts/2019-07-13-Dubbo系列服务端调用流程解析.md","hash":"701a21c6425a540ab758d6cfc6e29b51b1d084b5","modified":1565073835048},{"_id":"source/_posts/2019-07-13-Dubbo系列SPI源码解析.md","hash":"a9324149f46bc46a31c1a2ec7f8a339bc9f72a84","modified":1563155119323},{"_id":"source/_posts/2019-08-06-Dubbo系列-心跳机制.md","hash":"235b5176e68b17fce413a6cd6e0623e235f35a47","modified":1565073470133},{"_id":"source/_posts/2019-08-06-Dubbo系列-服务暴露.md","hash":"faedd045dbf5ad13d46455b9ca1660f8642b4e70","modified":1565073551169},{"_id":"source/_posts/2019-07-13-dubbo系列telnet.md","hash":"0263977a637008c047a82ec71d3fae2d05a00271","modified":1563155119326},{"_id":"source/_posts/2019-08-20-zookeeper-LeaderZooKeeperServer3.5.5.md","hash":"982fe5ad6f815caf6f525214497ec9c7d9ed0d1b","modified":1566306985131},{"_id":"source/_posts/2019-08-20-zookeeper-单机流程3.5.5.md","hash":"277ef85f5603a145abde0e6d44ca5f9e044a8e30","modified":1566306420875},{"_id":"source/_posts/2020-06-23-《剑桥英语在用》笔记.md","hash":"402a317f3e53cf21008b750c8f8911a522bd4e80","modified":1592900690378},{"_id":"source/_posts/2019-08-20-zookeeper集群启动流程、选举流程3.5.5.md","hash":"cba07114aa71876e54a72e5cd21ebd43c507041c","modified":1566306673695},{"_id":"themes/Butterfly/README.md","hash":"111662216ce7d1ea63d7072aaea2a612543c19a1","modified":1592901736252},{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1592901736252},{"_id":"themes/Butterfly/README_CN.md","hash":"6c17872d3bbd147a86f53a7de7ee193dfd1a9000","modified":1592901736252},{"_id":"themes/Butterfly/_config.yml","hash":"29c9093020cf9ddee2b51e63e34560ea7c78cafa","modified":1592901736253},{"_id":"themes/Butterfly/package.json","hash":"f92db754486cb1cfaaa4b03b869877c922974bee","modified":1592901736287},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE.md","hash":"bc427d7f13fec05cfd2dcc10953cbb2a96bc31be","modified":1592901736251},{"_id":"themes/Butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1592901736252},{"_id":"themes/Butterfly/languages/default.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1592901736253},{"_id":"themes/Butterfly/languages/en.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1592901736253},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"e7d642fe6ed909c6552accd919a812c9ae86df7d","modified":1592901736254},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"582d4800d33209f4612f48f25f69e8d952aeabfe","modified":1592901736254},{"_id":"themes/Butterfly/layout/404.pug","hash":"9ba3cea0f61ad5d0f6cb782fd3da9cf7b4077ae4","modified":1592901736254},{"_id":"themes/Butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1592901736254},{"_id":"themes/Butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1592901736255},{"_id":"themes/Butterfly/layout/flink.pug","hash":"12571e3b98651d655cab29c01a33663393c66056","modified":1592901736255},{"_id":"themes/Butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1592901736286},{"_id":"themes/Butterfly/layout/page.pug","hash":"130ab657a6acfe149dbc59e481dc05d4d7d926a3","modified":1592901736287},{"_id":"themes/Butterfly/layout/post.pug","hash":"2e34fd65d36508faec9fd015d6cdb108d4c29b58","modified":1592901736287},{"_id":"themes/Butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1592901736287},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"06ff82eaedfbc5cc9a65e34eaa063cebfb942a93","modified":1592901736255},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"f41c3cdf1a6c6cfd06a69a5ba7a14b3730ee6127","modified":1592901736259},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"5f3a4c030a5f27d890089737f3fd4c58a1154c1f","modified":1592901736259},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"e764e4ecceb04e11e2bfef84e72b4529bdc2362b","modified":1592901736270},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"29c6e5f8b82de38f61b53decfa9e0e9831b188f8","modified":1592901736276},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"71960ea57a3f241c80e7701f2decbf4ba9736ba0","modified":1592901736277},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"158e49e0466e71e4d2cc7087a3ac5e703b3e13e4","modified":1592901736282},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1592901736288},{"_id":"themes/Butterfly/scripts/events/replace_config.js","hash":"537e556e76760ce2103f359d5a424c6e2b9a0710","modified":1592901736288},{"_id":"themes/Butterfly/scripts/filters/post_lazyload.js","hash":"e6db030700cefcd79e7a826b04e2a7172d53428e","modified":1592901736288},{"_id":"themes/Butterfly/scripts/filters/random_cover.js","hash":"0b4775aaa955b75f03648fc1957fb88a6d440803","modified":1592901736288},{"_id":"themes/Butterfly/scripts/helpers/aside_archives.js","hash":"fb394ffd0ec61fe50ff992fdf11356312ca2ccfb","modified":1592901736289},{"_id":"themes/Butterfly/scripts/helpers/aside_categories.js","hash":"11aabab0092a3f2258c1fa931e74a7796074c515","modified":1592901736289},{"_id":"themes/Butterfly/scripts/helpers/page.js","hash":"729a9f40c5bf603036f6e9443db93b1704cf17d9","modified":1592901736290},{"_id":"themes/Butterfly/scripts/helpers/related_post.js","hash":"64b13aeb4f49609529be6f9060797bafc8a6f9bc","modified":1592901736290},{"_id":"themes/Butterfly/scripts/tags/button.js","hash":"bae84b36b58572112047c3b02e975c1e762de56b","modified":1592901736291},{"_id":"themes/Butterfly/scripts/tags/gallery.js","hash":"2fad0a9e6645613631aad36dc3473fe8e032809b","modified":1592901736291},{"_id":"themes/Butterfly/scripts/tags/hide.js","hash":"a32e4166b6cbbc1c2bdecaa74662a12cdb98f4ce","modified":1592901736291},{"_id":"themes/Butterfly/scripts/tags/mermaid.js","hash":"53eaff19d8da32e04e2c871300ea495356d633cd","modified":1592901736292},{"_id":"themes/Butterfly/scripts/tags/note.js","hash":"c739846637c48b4779df2f62effb78e15100fd9f","modified":1592901736292},{"_id":"themes/Butterfly/scripts/tags/tabs.js","hash":"ec58149e16b6269bbcb685020b98567e8e3440a8","modified":1592901736292},{"_id":"themes/Butterfly/source/css/index.styl","hash":"8d908c4bc856f9369e8148e7b8dd7fb968fbf66c","modified":1592901736301},{"_id":"themes/Butterfly/source/css/var.styl","hash":"3c20dbec8e323628f17a8510f6ef8bba6f00db2a","modified":1592901736301},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592901736302},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1592901736302},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1592901736303},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1592901736303},{"_id":"themes/Butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1592901736303},{"_id":"themes/Butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1592901736304},{"_id":"themes/Butterfly/source/js/main.js","hash":"9772cdb841b527406473730faf523aa942d4dbb2","modified":1592901736305},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1592901736308},{"_id":"themes/Butterfly/source/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1592901736308},{"_id":"themes/Butterfly/layout/includes/chat/daovoice.pug","hash":"ab96a70b0a65a7fae094d426beba7433f60f4a5a","modified":1592901736256},{"_id":"themes/Butterfly/layout/includes/chat/index.pug","hash":"da7412131e768e331a9f33804f2f5f7c5eeaa178","modified":1592901736256},{"_id":"themes/Butterfly/layout/includes/chat/chatra.pug","hash":"77ec360f1f9fd702be540b0542449705828a77da","modified":1592901736255},{"_id":"themes/Butterfly/layout/includes/chat/gitter.pug","hash":"ba9576ecba1a1768c25377e8b4fdb133982bd214","modified":1592901736256},{"_id":"themes/Butterfly/layout/includes/chat/tidio.pug","hash":"208035fb6ae639653861d15c9a20e8d4bba2b02a","modified":1592901736257},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1592901736257},{"_id":"themes/Butterfly/layout/includes/comments/facebook_comments.pug","hash":"7b7bb7d2b39b639cc8e1edf1274148460796662e","modified":1592901736257},{"_id":"themes/Butterfly/layout/includes/comments/disqusjs.pug","hash":"751351eae0540651a5db865262ff4a6d40680715","modified":1592901736257},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1592901736258},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"67cfc03939e08992ccb3a453d2b72458056535e9","modified":1592901736258},{"_id":"themes/Butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1592901736258},{"_id":"themes/Butterfly/layout/includes/comments/livere.pug","hash":"9518b6e0c532af8ab0ae569ad795b769a2bd3040","modified":1592901736258},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"a3c819238dceab080d5db0336ef07009ca216310","modified":1592901736259},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"7b91be55c613f16bb2da9ab48aaf6e08781f563a","modified":1592901736258},{"_id":"themes/Butterfly/layout/includes/head/aplayer.pug","hash":"b24959f00ac75f12f66b445158aad143ee860795","modified":1592901736259},{"_id":"themes/Butterfly/layout/includes/head/comment.pug","hash":"7de136bdce45afa81341b13e61b7a3926e15f03b","modified":1592901736259},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1592901736259},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"29d6ab8de6e355925e76d92862671ce48ddd6f12","modified":1592901736261},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"e8b774f88cc717371d2e31f5d532007d0b7b23ab","modified":1592901736260},{"_id":"themes/Butterfly/layout/includes/head/darkmode.pug","hash":"fa834037bf29843abd6b63fed3a868638b9875cd","modified":1592901736262},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1592901736263},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"0a23423304127c4ffa69310526aaa59830d12c78","modified":1592901736264},{"_id":"themes/Butterfly/layout/includes/head/preconnect.pug","hash":"95affc2c333f27b968c47272277da712d13f2670","modified":1592901736265},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1592901736266},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1592901736267},{"_id":"themes/Butterfly/layout/includes/head/subtitle.pug","hash":"bfbf1c850dcd825c2eb68bc74e9787a5fef9258b","modified":1592901736267},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"12dc74a7370b8d00f010e6914c09b1b12343fd92","modified":1592901736268},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"c76b6236995f15e3cf5af376101c782a1078b845","modified":1592901736268},{"_id":"themes/Butterfly/layout/includes/header/nav.pug","hash":"2ff93c4edc1e52f63f3cd5f90354683e933a299e","modified":1592901736269},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1592901736270},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"aa83c7e0dcaf60c85d44af32a7d2d20667a6893b","modified":1592901736269},{"_id":"themes/Butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1592901736271},{"_id":"themes/Butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1592901736271},{"_id":"themes/Butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1592901736272},{"_id":"themes/Butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1592901736273},{"_id":"themes/Butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1592901736273},{"_id":"themes/Butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1592901736272},{"_id":"themes/Butterfly/layout/includes/mixins/post-ui.pug","hash":"c046c1b43ce9b5afe68b60c08230b843113a1561","modified":1592901736274},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"4736ea0dec5561f4f75d283be3629062b234af23","modified":1592901736274},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1592901736275},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1592901736276},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"e7ee2593788c6614b9f41f0789ef7166fe73a707","modified":1592901736275},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"3740cece6885c285351295612723fd66e0d5a4bf","modified":1592901736277},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"518eec7302d4fad75be46486407a945b39833ff8","modified":1592901736279},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1592901736279},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"f8686264a4ff1d48961296f9949d705bc87de3ea","modified":1592901736279},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1592901736280},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1592901736280},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"828a04c6e8e3a56c3c7f3c9bb1ecf4f99ed842fe","modified":1592901736280},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1592901736280},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1592901736282},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1592901736282},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1592901736282},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"8fdb96b8329e352ed691228767451b264151b3a6","modified":1592901736283},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"721b611fda6dcfca8f88b9c7b70fede7b69a516b","modified":1592901736285},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1592901736285},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"b5d73ceb54c43cc22e46b1cdcde24fcc8e420755","modified":1592901736285},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"393a6f9a5dcabe8d96e9b6cb5620c12966dfd37f","modified":1592901736285},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"83cb6ba0d8c913570147b3871c7fc0674dac8cdf","modified":1592901736285},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"355b50dd13471e00fbbfcf6519cf32a092c095b3","modified":1592901736286},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"6a4c85a037c10e093f545d3167691c0b68634465","modified":1592901736286},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"e0febc7eb43ceb21bb1607d4f2358b9b633cb2d2","modified":1592901736286},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"15fb3730f829e237c102a70ab9781178471fd786","modified":1592901736286},{"_id":"themes/Butterfly/source/css/_layout/404.styl","hash":"b766e536a7a558f4850b31464a284ce2384d79f6","modified":1592901736294},{"_id":"themes/Butterfly/source/css/_global/function.styl","hash":"7f800733ca4e4ee4dd1e0ccaace274d1bc896539","modified":1592901736293},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"cd9580fdf3a138ca84504e1a8b3f4d633ccc7bd5","modified":1592901736293},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"25c9a71043156adf67662d68b35d97d66f60a396","modified":1592901736295},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1592901736295},{"_id":"themes/Butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1592901736295},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"079ed647f847cf2693928d358929b65ce67cb31b","modified":1592901736295},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1592901736295},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"f7038a0ac08396784e57bcd31f6431c92909f514","modified":1592901736296},{"_id":"themes/Butterfly/source/css/_layout/loadding.styl","hash":"144ef01b03ae34d3ede4b9aa18f4c8cd3d6651ea","modified":1592901736296},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"d2d6b36f3bcbba35e1e63ac0d59879decf63cc1f","modified":1592901736296},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"2fc2230d9a7117f6c5f7e484e2fbfc76e62fa8bc","modified":1592901736296},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"8f44be6a866d11f6afabf8689d9ae7b65eee18ae","modified":1592901736296},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"37a9832a6bc409947e85556b31f2adadf2f412ec","modified":1592901736297},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"4825afd4f94f1481b5422072fa5e506e2a387247","modified":1592901736297},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"495da7b41a7909df989a5dcc13a29761ef23089b","modified":1592901736297},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"971ddbf6084793b15221559183d20d1362630ee3","modified":1592901736297},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1592901736298},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"4923e99c1b6abf11c81539576ce65202a2f40efb","modified":1592901736298},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"2d9820f9fc556855c9c26f9242adb1b29fe3c272","modified":1592901736293},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"f2884605b55dfb9575f9532d6ac568bc59d0c4ab","modified":1592901736294},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"70ce4e354b03fe926fd06822e2a5f125e1cd3697","modified":1592901736294},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"ce9b157439f48c5ef9106cbe3090525815009134","modified":1592901736298},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"1608b5c2a307809e25ac7ad903fc6bc009c30016","modified":1592901736299},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"641ef2bc7af135c17fd90f3f974e78ebbaf1ac13","modified":1592901736299},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"5bb29799d0168b1d68cfb8165a41b9d90f86eab7","modified":1592901736299},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"da791f46239eabbbf28eb30b9e441f1ac2a8ced1","modified":1592901736299},{"_id":"themes/Butterfly/source/css/_tags/button.styl","hash":"40926b9d87e06d4679bd3c8542a7a3acd5d10cc1","modified":1592901736299},{"_id":"themes/Butterfly/source/css/_tags/gallery.styl","hash":"0bc29278fbcf1aec15222ed10c58697da1a0d676","modified":1592901736300},{"_id":"themes/Butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1592901736300},{"_id":"themes/Butterfly/source/css/_tags/hide.styl","hash":"10e925cf59748af445d3606d965731013f31827c","modified":1592901736300},{"_id":"themes/Butterfly/source/css/_tags/note.styl","hash":"2f8d4043dedef70813493e43e4c158e16ccc3fc0","modified":1592901736300},{"_id":"themes/Butterfly/source/css/_tags/tabs.styl","hash":"48a582e1847595aaa435c048a7bb78b44ed8a716","modified":1592901736301},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1592901736301},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1592901736305},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1592901736306},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1592901736306},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1592901736306},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1592901736306},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1592901736307},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1592901736307},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1592901736307},{"_id":"themes/Butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1592901736307},{"_id":"public/2020/06/23/2020-06-23-《剑桥英语在用》笔记/index.html","hash":"5f9c4ab9a1f708041c975f13d5192d7d48a112ab","modified":1606056703966},{"_id":"public/archives/page/2/index.html","hash":"601ce4cfd4e1506e21e8d95c1bd62aa57fd129ca","modified":1606097117625},{"_id":"public/archives/2020/index.html","hash":"58f3d49c1733eb953817eeb985d337eec549f71a","modified":1606097117625},{"_id":"public/archives/2020/06/index.html","hash":"f55c21b0896eda329d80471b62ae0344d03c9a38","modified":1606097117625},{"_id":"public/2019/08/20/2019-08-20-zookeeper集群启动流程、选举流程3.5.5/index.html","hash":"5d836be743adb3b8e88656e3600cf6de7bd0bd79","modified":1606056703966},{"_id":"public/2019/08/20/2019-08-20-zookeeper-单机流程3.5.5/index.html","hash":"d7088d512dc23c7bc253ef9e3e3347da014ff9ea","modified":1606056703966},{"_id":"public/2019/08/20/2019-08-20-zookeeper-LeaderZooKeeperServer3.5.5/index.html","hash":"9518f4dcf9053e6c46cacd6e51ff4a975a1e3ff8","modified":1606056703966},{"_id":"public/2019/08/06/2019-08-06-Dubbo系列-服务暴露/index.html","hash":"9af8f909d705e97ef10312db2738c6cc6ff314a9","modified":1606056703966},{"_id":"public/2019/08/06/2019-08-06-Dubbo系列-心跳机制/index.html","hash":"e7f1bfaa852e0cb99aced18d202022adf5dc931e","modified":1606056703966},{"_id":"public/2019/07/14/2019-07-14-Dubbo系列-编解码/index.html","hash":"a765c224efc7491f3448a35ba6311ff010641e1b","modified":1606056703966},{"_id":"public/2019/07/13/2019-07-13-dubbo系列telnet/index.html","hash":"2c2a2ec0871deb8f83c7f188ca5b74233be166da","modified":1606056703966},{"_id":"public/2019/07/13/2019-07-13-Dubbo系列服务端调用流程解析/index.html","hash":"1f797a64fc4874601824725def09fc619428ad37","modified":1606056703966},{"_id":"public/2019/07/13/2019-07-13-Dubbo系列SPI源码解析/index.html","hash":"0f528f440c47b19ab4275436b1f895ab447ae2ce","modified":1606056703966},{"_id":"public/2019/07/13/2019-07-13-Dubbo系列-QOS/index.html","hash":"e5aad6c71403e14eb874f8ae62eeda3831460544","modified":1606056703966},{"_id":"public/index.html","hash":"6d744b45bef5b23416cf3dc06cdef6fac7fdcd65","modified":1606097117625},{"_id":"public/page/2/index.html","hash":"5a735627b25a70b47916e63de13e2696ac622a8b","modified":1606097117625},{"_id":"public/archives/index.html","hash":"e387f6621ec8e1201e91a61938dc46bc94eeba64","modified":1606097117625},{"_id":"public/archives/2019/index.html","hash":"e3f863cb0654c7fd315ae7eb304bb17ebc78ec58","modified":1606097117625},{"_id":"public/archives/2019/07/index.html","hash":"9f9884e9808ad33d558bf947332c360490176a35","modified":1606097117625},{"_id":"public/archives/2019/08/index.html","hash":"3343a04f81c7f76b516de6ae4e50569a7606dd48","modified":1606097117625},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1592903555992},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592903555992},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1592903555992},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1592903555992},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1592903555992},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1592903555992},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592903555992},{"_id":"public/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1592903555992},{"_id":"public/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1592903555992},{"_id":"public/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1592903555992},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1592903555992},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1592903555992},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1592903555992},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1592903555992},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1592903555992},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1592903555992},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1592903555992},{"_id":"public/css/index.css","hash":"0d420c43809b799588c52ac6b9f9272a149d8b74","modified":1592903555992},{"_id":"public/js/main.js","hash":"9772cdb841b527406473730faf523aa942d4dbb2","modified":1592903555992},{"_id":"public/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1592903555992},{"_id":"themes/butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1592906136698},{"_id":"themes/butterfly/README.md","hash":"111662216ce7d1ea63d7072aaea2a612543c19a1","modified":1592906136699},{"_id":"themes/butterfly/README_CN.md","hash":"6c17872d3bbd147a86f53a7de7ee193dfd1a9000","modified":1592906136699},{"_id":"themes/butterfly/package.json","hash":"f92db754486cb1cfaaa4b03b869877c922974bee","modified":1592906136718},{"_id":"themes/butterfly/_config.yml","hash":"6f46d240c5bcab09d73d71ff33ae965f8d1322a4","modified":1596686193546},{"_id":"themes/butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1592906136698},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE.md","hash":"bc427d7f13fec05cfd2dcc10953cbb2a96bc31be","modified":1592906136698},{"_id":"themes/butterfly/languages/en.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1592906136700},{"_id":"themes/butterfly/languages/default.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1592906136699},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e7d642fe6ed909c6552accd919a812c9ae86df7d","modified":1592906136700},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"582d4800d33209f4612f48f25f69e8d952aeabfe","modified":1592906136700},{"_id":"themes/butterfly/layout/404.pug","hash":"9ba3cea0f61ad5d0f6cb782fd3da9cf7b4077ae4","modified":1592906136700},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1592906136700},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1592906136717},{"_id":"themes/butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1592906136701},{"_id":"themes/butterfly/layout/page.pug","hash":"130ab657a6acfe149dbc59e481dc05d4d7d926a3","modified":1592906136717},{"_id":"themes/butterfly/layout/flink.pug","hash":"12571e3b98651d655cab29c01a33663393c66056","modified":1592906136701},{"_id":"themes/butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1592906136718},{"_id":"themes/butterfly/layout/post.pug","hash":"2e34fd65d36508faec9fd015d6cdb108d4c29b58","modified":1592906136718},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"06ff82eaedfbc5cc9a65e34eaa063cebfb942a93","modified":1592906136701},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"f41c3cdf1a6c6cfd06a69a5ba7a14b3730ee6127","modified":1592906136703},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"5f3a4c030a5f27d890089737f3fd4c58a1154c1f","modified":1592906136704},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e764e4ecceb04e11e2bfef84e72b4529bdc2362b","modified":1592906136708},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"29c6e5f8b82de38f61b53decfa9e0e9831b188f8","modified":1592906136711},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"158e49e0466e71e4d2cc7087a3ac5e703b3e13e4","modified":1592906136714},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"71960ea57a3f241c80e7701f2decbf4ba9736ba0","modified":1592906136712},{"_id":"themes/butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1592906136719},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"537e556e76760ce2103f359d5a424c6e2b9a0710","modified":1592906136719},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0b4775aaa955b75f03648fc1957fb88a6d440803","modified":1592906136720},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"e6db030700cefcd79e7a826b04e2a7172d53428e","modified":1592906136720},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"fb394ffd0ec61fe50ff992fdf11356312ca2ccfb","modified":1592906136720},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"11aabab0092a3f2258c1fa931e74a7796074c515","modified":1592906136721},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"729a9f40c5bf603036f6e9443db93b1704cf17d9","modified":1592906136721},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"64b13aeb4f49609529be6f9060797bafc8a6f9bc","modified":1592906136721},{"_id":"themes/butterfly/scripts/tags/button.js","hash":"bae84b36b58572112047c3b02e975c1e762de56b","modified":1592906136721},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"2fad0a9e6645613631aad36dc3473fe8e032809b","modified":1592906136722},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"a32e4166b6cbbc1c2bdecaa74662a12cdb98f4ce","modified":1592906136722},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"53eaff19d8da32e04e2c871300ea495356d633cd","modified":1592906136722},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"c739846637c48b4779df2f62effb78e15100fd9f","modified":1592906136722},{"_id":"themes/butterfly/scripts/tags/tabs.js","hash":"ec58149e16b6269bbcb685020b98567e8e3440a8","modified":1592906136723},{"_id":"themes/butterfly/source/css/index.styl","hash":"8d908c4bc856f9369e8148e7b8dd7fb968fbf66c","modified":1592906136733},{"_id":"themes/butterfly/source/css/var.styl","hash":"3c20dbec8e323628f17a8510f6ef8bba6f00db2a","modified":1592906136733},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1592906136735},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1592906136736},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1592906136734},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592906136734},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1592906136734},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1592906136736},{"_id":"themes/butterfly/source/js/main.js","hash":"9772cdb841b527406473730faf523aa942d4dbb2","modified":1592906136737},{"_id":"themes/butterfly/source/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1592906136741},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1592906136741},{"_id":"themes/butterfly/layout/includes/chat/daovoice.pug","hash":"ab96a70b0a65a7fae094d426beba7433f60f4a5a","modified":1592906136701},{"_id":"themes/butterfly/layout/includes/chat/gitter.pug","hash":"ba9576ecba1a1768c25377e8b4fdb133982bd214","modified":1592906136702},{"_id":"themes/butterfly/layout/includes/chat/index.pug","hash":"da7412131e768e331a9f33804f2f5f7c5eeaa178","modified":1592906136702},{"_id":"themes/butterfly/layout/includes/chat/chatra.pug","hash":"77ec360f1f9fd702be540b0542449705828a77da","modified":1592906136701},{"_id":"themes/butterfly/layout/includes/chat/tidio.pug","hash":"208035fb6ae639653861d15c9a20e8d4bba2b02a","modified":1592906136702},{"_id":"themes/butterfly/layout/includes/comments/disqusjs.pug","hash":"751351eae0540651a5db865262ff4a6d40680715","modified":1592906136702},{"_id":"themes/butterfly/layout/includes/comments/facebook_comments.pug","hash":"7b7bb7d2b39b639cc8e1edf1274148460796662e","modified":1592906136702},{"_id":"themes/butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1592906136702},{"_id":"themes/butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1592906136703},{"_id":"themes/butterfly/layout/includes/comments/livere.pug","hash":"9518b6e0c532af8ab0ae569ad795b769a2bd3040","modified":1592906136703},{"_id":"themes/butterfly/layout/includes/comments/index.pug","hash":"67cfc03939e08992ccb3a453d2b72458056535e9","modified":1592906136703},{"_id":"themes/butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1592906136703},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"a3c819238dceab080d5db0336ef07009ca216310","modified":1592906136704},{"_id":"themes/butterfly/layout/includes/comments/valine.pug","hash":"7b91be55c613f16bb2da9ab48aaf6e08781f563a","modified":1592906136703},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1592906136704},{"_id":"themes/butterfly/layout/includes/head/aplayer.pug","hash":"b24959f00ac75f12f66b445158aad143ee860795","modified":1592906136704},{"_id":"themes/butterfly/layout/includes/head/comment.pug","hash":"7de136bdce45afa81341b13e61b7a3926e15f03b","modified":1592906136704},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"e8b774f88cc717371d2e31f5d532007d0b7b23ab","modified":1592906136705},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"29d6ab8de6e355925e76d92862671ce48ddd6f12","modified":1592906136705},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"fa834037bf29843abd6b63fed3a868638b9875cd","modified":1592906136705},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1592906136705},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"0a23423304127c4ffa69310526aaa59830d12c78","modified":1592906136706},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1592906136706},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"95affc2c333f27b968c47272277da712d13f2670","modified":1592906136706},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1592906136706},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"2ff93c4edc1e52f63f3cd5f90354683e933a299e","modified":1592906136707},{"_id":"themes/butterfly/layout/includes/head/subtitle.pug","hash":"bfbf1c850dcd825c2eb68bc74e9787a5fef9258b","modified":1592906136706},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"aa83c7e0dcaf60c85d44af32a7d2d20667a6893b","modified":1592906136707},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"12dc74a7370b8d00f010e6914c09b1b12343fd92","modified":1592906136707},{"_id":"themes/butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1592906136709},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"c76b6236995f15e3cf5af376101c782a1078b845","modified":1592906136707},{"_id":"themes/butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1592906136709},{"_id":"themes/butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1592906136709},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1592906136708},{"_id":"themes/butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1592906136709},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"c046c1b43ce9b5afe68b60c08230b843113a1561","modified":1592906136710},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"4736ea0dec5561f4f75d283be3629062b234af23","modified":1592906136710},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"e7ee2593788c6614b9f41f0789ef7166fe73a707","modified":1592906136710},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1592906136708},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1592906136708},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1592906136710},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1592906136711},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"3740cece6885c285351295612723fd66e0d5a4bf","modified":1592906136711},{"_id":"themes/butterfly/layout/includes/search/algolia.pug","hash":"518eec7302d4fad75be46486407a945b39833ff8","modified":1592906136712},{"_id":"themes/butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1592906136712},{"_id":"themes/butterfly/layout/includes/search/local-search.pug","hash":"f8686264a4ff1d48961296f9949d705bc87de3ea","modified":1592906136712},{"_id":"themes/butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1592906136713},{"_id":"themes/butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1592906136713},{"_id":"themes/butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1592906136713},{"_id":"themes/butterfly/layout/includes/share/share-js.pug","hash":"828a04c6e8e3a56c3c7f3c9bb1ecf4f99ed842fe","modified":1592906136713},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1592906136714},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1592906136715},{"_id":"themes/butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1592906136714},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"8fdb96b8329e352ed691228767451b264151b3a6","modified":1592906136715},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"721b611fda6dcfca8f88b9c7b70fede7b69a516b","modified":1592906136715},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1592906136715},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"393a6f9a5dcabe8d96e9b6cb5620c12966dfd37f","modified":1592906136716},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"b5d73ceb54c43cc22e46b1cdcde24fcc8e420755","modified":1592906136716},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"83cb6ba0d8c913570147b3871c7fc0674dac8cdf","modified":1592906136716},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"6a4c85a037c10e093f545d3167691c0b68634465","modified":1592906136717},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"15fb3730f829e237c102a70ab9781178471fd786","modified":1592906136717},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"355b50dd13471e00fbbfcf6519cf32a092c095b3","modified":1592906136716},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e0febc7eb43ceb21bb1607d4f2358b9b633cb2d2","modified":1592906136717},{"_id":"themes/butterfly/source/css/_highlight/diff.styl","hash":"2d9820f9fc556855c9c26f9242adb1b29fe3c272","modified":1592906136724},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"f2884605b55dfb9575f9532d6ac568bc59d0c4ab","modified":1592906136724},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7f800733ca4e4ee4dd1e0ccaace274d1bc896539","modified":1592906136723},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"70ce4e354b03fe926fd06822e2a5f125e1cd3697","modified":1592906136724},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"cd9580fdf3a138ca84504e1a8b3f4d633ccc7bd5","modified":1592906136723},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"ce9b157439f48c5ef9106cbe3090525815009134","modified":1592906136729},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1608b5c2a307809e25ac7ad903fc6bc009c30016","modified":1592906136730},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"b766e536a7a558f4850b31464a284ce2384d79f6","modified":1592906136724},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"25c9a71043156adf67662d68b35d97d66f60a396","modified":1592906136725},{"_id":"themes/butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1592906136725},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1592906136725},{"_id":"themes/butterfly/source/css/_layout/flink.styl","hash":"079ed647f847cf2693928d358929b65ce67cb31b","modified":1592906136725},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f7038a0ac08396784e57bcd31f6431c92909f514","modified":1592906136726},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"d2d6b36f3bcbba35e1e63ac0d59879decf63cc1f","modified":1592906136726},{"_id":"themes/butterfly/source/css/_layout/page.styl","hash":"2fc2230d9a7117f6c5f7e484e2fbfc76e62fa8bc","modified":1592906136727},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"8f44be6a866d11f6afabf8689d9ae7b65eee18ae","modified":1592906136727},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1592906136726},{"_id":"themes/butterfly/source/css/_layout/loadding.styl","hash":"144ef01b03ae34d3ede4b9aa18f4c8cd3d6651ea","modified":1592906136726},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"37a9832a6bc409947e85556b31f2adadf2f412ec","modified":1592906136727},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"4825afd4f94f1481b5422072fa5e506e2a387247","modified":1592906136727},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"495da7b41a7909df989a5dcc13a29761ef23089b","modified":1592906136728},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"971ddbf6084793b15221559183d20d1362630ee3","modified":1592906136728},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1592906136728},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"4923e99c1b6abf11c81539576ce65202a2f40efb","modified":1592906136728},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"641ef2bc7af135c17fd90f3f974e78ebbaf1ac13","modified":1592906136730},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"5bb29799d0168b1d68cfb8165a41b9d90f86eab7","modified":1592906136730},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"da791f46239eabbbf28eb30b9e441f1ac2a8ced1","modified":1592906136731},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"0bc29278fbcf1aec15222ed10c58697da1a0d676","modified":1592906136731},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"40926b9d87e06d4679bd3c8542a7a3acd5d10cc1","modified":1592906136731},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"10e925cf59748af445d3606d965731013f31827c","modified":1592906136732},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1592906136732},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"48a582e1847595aaa435c048a7bb78b44ed8a716","modified":1592906136733},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"2f8d4043dedef70813493e43e4c158e16ccc3fc0","modified":1592906136732},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1592906136733},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1592906136738},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1592906136739},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1592906136738},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1592906136739},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1592906136739},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1592906136740},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1592906136739},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1592906136740},{"_id":"themes/butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1592906136741},{"_id":"source/_posts/2020-07-30-feign10.12源码解析.md","hash":"c129597fb675f5e763f1e7af88ed7f0585944ba8","modified":1596106276056},{"_id":"public/2020/07/30/2020-07-30-feign10.12源码解析/index.html","hash":"0307cf8a6ccf276081e80990223c3e430cceb7d8","modified":1606057826056},{"_id":"public/archives/2020/07/index.html","hash":"3138304db86119bcd1047f4619e0278ee3cc690b","modified":1606097117625},{"_id":"source/_posts/2020-11-22-推荐系统笔记.md","hash":"bb9d2172881cd7ff12c955722b9d575fed46cbda","modified":1606097114529},{"_id":"public/archives/2020/11/index.html","hash":"309a66a30c27024befecb255f0ff4a76ab684a24","modified":1606097117625},{"_id":"public/2020/11/22/2020-11-22-推荐系统笔记/index.html","hash":"10511697b45da8ca5c06ba0b0ebf0abdd204dd82","modified":1606097117625}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Dubbo系列 - QOS","date":"2019-07-12T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# Dubbo系列 - QOS\n\nQOS是Dubbo在2.5.8加入的新的telnet命令，具体使用方式可以看官方文档：\n[在线运维命令 - QOS](https://dubbo.gitbooks.io/dubbo-user-book/content/references/qos.html)\n\nQOS服务启动的入口在`QosProtocolWrapper`，`QosProtocolWrapper`是`Protocol`的包装类，当通过`adaptive`方式来调用`RegistryProtocol`或者和其他协议的实现类时，会先执行`QosProtocolWrapper`的方法。\n\n```java\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        if (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) {\n            startQosServer(invoker.getUrl());\n            return protocol.export(invoker);\n        }\n        return protocol.export(invoker);\n    }\n\n    @Override\n    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\n            startQosServer(url);\n            return protocol.refer(type, url);\n        }\n        return protocol.refer(type, url);\n    }\n```\n\n`QosProtocolWrapper`在`export`和`refer`时，判断如果是`registry`协议，调用`startQosServer`方法。\n\n\n```java\n    private void startQosServer(URL url) {\n        try {\n            boolean qosEnable = url.getParameter(QOS_ENABLE,true);\n            if (!qosEnable) {\n                logger.info(\"qos won't be started because it is disabled. \" +\n                        \"Please check dubbo.application.qos.enable is configured either in system property, \" +\n                        \"dubbo.properties or XML/spring boot configuration.\");\n                return;\n            }\n            //hasStarted是AtomicBoolean类型，通过CAS操作来保证只会启动一次服务。\n            if (!hasStarted.compareAndSet(false, true)) {\n                return;\n            }\n\n            int port = url.getParameter(QOS_PORT, DEFAULT_PORT);\n            boolean acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP,\"false\"));\n            Server server = com.alibaba.dubbo.qos.server.Server.getInstance();\n            server.setPort(port);\n            server.setAcceptForeignIp(acceptForeignIp);\n            server.start();\n\n        } catch (Throwable throwable) {\n            logger.warn(\"Fail to start qos server: \", throwable);\n        }\n    }\n\n```\n\n\n```java\n    public void start() throws Throwable {\n        if (!hasStarted.compareAndSet(false, true)) {\n            return;\n        }\n        boss = new NioEventLoopGroup(0, new DefaultThreadFactory(\"qos-boss\", true));\n        worker = new NioEventLoopGroup(0, new DefaultThreadFactory(\"qos-worker\", true));\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(boss, worker);\n        serverBootstrap.channel(NioServerSocketChannel.class);\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childOption(ChannelOption.SO_REUSEADDR, true);\n        serverBootstrap.childHandler(new ChannelInitializer<Channel>() {\n\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n                ch.pipeline().addLast(new QosProcessHandler(welcome, acceptForeignIp));\n            }\n        });\n        try {\n            serverBootstrap.bind(port).sync();\n            logger.info(\"qos-server bind localhost:\" + port);\n        } catch (Throwable throwable) {\n            logger.error(\"qos-server can not bind localhost:\" + port, throwable);\n            throw throwable;\n        }\n    }\n```\n\n通过netty来启动服务，最后业务处理在`QosProcessHandler`中。\n\n\n```java\npublic class QosProcessHandler extends ByteToMessageDecoder {\n\n    private ScheduledFuture<?> welcomeFuture;\n\n    private String welcome;\n    // true means to accept foreign IP\n    private boolean acceptForeignIp;\n\n    public static String prompt = \"dubbo>\";\n\n    public QosProcessHandler(String welcome, boolean acceptForeignIp) {\n        this.welcome = welcome;\n        this.acceptForeignIp = acceptForeignIp;\n    }\n\n    @Override\n    public void channelActive(final ChannelHandlerContext ctx) throws Exception {\n        //建立连接时打印LOGO\n        welcomeFuture = ctx.executor().schedule(new Runnable() {\n\n            @Override\n            public void run() {\n                if (welcome != null) {\n                    ctx.write(Unpooled.wrappedBuffer(welcome.getBytes()));\n                    ctx.writeAndFlush(Unpooled.wrappedBuffer(prompt.getBytes()));\n                }\n            }\n\n        }, 500, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new LocalHostPermitHandler(acceptForeignIp));\n        //取第一个字节，如果是G或者P，则判断是HTTP服务，否则是telnet服务。\n        //移除当前的handler，加入具体的协议的handler\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler());\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetProcessHandler());\n            p.remove(this);\n        }\n    }\n\n    // G for GET, and P for POST\n    private static boolean isHttp(int magic) {\n        return magic == 'G' || magic == 'P';\n    }\n}\n\n```\n\n`QosProcessHandler`主要判断协议，然后加入相应的处理器。我们重点看`TelnetProcessHandler`。\n\n```java\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.prompt);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.equals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.prompt);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);\n                log.error(\"can not found command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);\n                log.error(\"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n```\n\n```java\npublic String execute(CommandContext commandContext) throws NoSuchCommandException {\n        BaseCommand command = null;\n        try {\n            command = ExtensionLoader.getExtensionLoader(BaseCommand.class).getExtension(commandContext.getCommandName());\n        } catch (Throwable throwable) {\n                //can't find command\n        }\n        if (command == null) {\n            throw new NoSuchCommandException(commandContext.getCommandName());\n        }\n        return command.execute(commandContext, commandContext.getArgs());\n    }\n```\n`TelnetProcessHandler`解析命令之后，调用`commandExecutor.execute`方法，而`commandExecutor.execute`方法则是去找具体的`BaseCommand`扩展。\n\n`Dubbo`一共有5个命令实现：\n> Help: 打印帮助信息\n> Ls: 打印所有的服务\n> Offline: 下线服务\n> Online: 上线服务\n> Quit: 关闭连接\n\n\n举例看下`Offline`的实现：\n```java\n@Cmd(name = \"offline\", summary = \"offline dubbo\", example = {\n        \"offline dubbo\",\n        \"offline xx.xx.xxx.service\"\n})\npublic class Offline implements BaseCommand {\n    private Logger logger = LoggerFactory.getLogger(Offline.class);\n    private RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\n\n    @Override\n    public String execute(CommandContext commandContext, String[] args) {\n        logger.info(\"receive offline command\");\n        String servicePattern = \".*\";\n        if (args != null && args.length > 0) {\n            servicePattern = args[0];\n        }\n        boolean hasService = false;\n\n        List<ProviderModel> providerModelList = ApplicationModel.allProviderModels();\n        for (ProviderModel providerModel : providerModelList) {\n            if (providerModel.getServiceName().matches(servicePattern)) {\n                hasService = true;\n                Set<ProviderInvokerWrapper> providerInvokerWrapperSet = ProviderConsumerRegTable.getProviderInvoker(providerModel.getServiceName());\n                for (ProviderInvokerWrapper providerInvokerWrapper : providerInvokerWrapperSet) {\n                    if (!providerInvokerWrapper.isReg()) {\n                        continue;\n                    }\n                    Registry registry = registryFactory.getRegistry(providerInvokerWrapper.getRegistryUrl());\n                    registry.unregister(providerInvokerWrapper.getProviderUrl());\n                    providerInvokerWrapper.setReg(false);\n                }\n            }\n        }\n\n        if (hasService) {\n            return \"OK\";\n        } else {\n            return \"service not found\";\n        }\n    }\n}\n\n```\n\n`Offline`主要是从`ApplicationModel.allProviderModels()`获取所有的服务，然后调用`registry.unregister`方法注销服务。\n","source":"_posts/2019-07-13-Dubbo系列-QOS.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列 - QOS\"\ndate:       2019-07-13\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# Dubbo系列 - QOS\n\nQOS是Dubbo在2.5.8加入的新的telnet命令，具体使用方式可以看官方文档：\n[在线运维命令 - QOS](https://dubbo.gitbooks.io/dubbo-user-book/content/references/qos.html)\n\nQOS服务启动的入口在`QosProtocolWrapper`，`QosProtocolWrapper`是`Protocol`的包装类，当通过`adaptive`方式来调用`RegistryProtocol`或者和其他协议的实现类时，会先执行`QosProtocolWrapper`的方法。\n\n```java\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        if (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) {\n            startQosServer(invoker.getUrl());\n            return protocol.export(invoker);\n        }\n        return protocol.export(invoker);\n    }\n\n    @Override\n    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\n            startQosServer(url);\n            return protocol.refer(type, url);\n        }\n        return protocol.refer(type, url);\n    }\n```\n\n`QosProtocolWrapper`在`export`和`refer`时，判断如果是`registry`协议，调用`startQosServer`方法。\n\n\n```java\n    private void startQosServer(URL url) {\n        try {\n            boolean qosEnable = url.getParameter(QOS_ENABLE,true);\n            if (!qosEnable) {\n                logger.info(\"qos won't be started because it is disabled. \" +\n                        \"Please check dubbo.application.qos.enable is configured either in system property, \" +\n                        \"dubbo.properties or XML/spring boot configuration.\");\n                return;\n            }\n            //hasStarted是AtomicBoolean类型，通过CAS操作来保证只会启动一次服务。\n            if (!hasStarted.compareAndSet(false, true)) {\n                return;\n            }\n\n            int port = url.getParameter(QOS_PORT, DEFAULT_PORT);\n            boolean acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP,\"false\"));\n            Server server = com.alibaba.dubbo.qos.server.Server.getInstance();\n            server.setPort(port);\n            server.setAcceptForeignIp(acceptForeignIp);\n            server.start();\n\n        } catch (Throwable throwable) {\n            logger.warn(\"Fail to start qos server: \", throwable);\n        }\n    }\n\n```\n\n\n```java\n    public void start() throws Throwable {\n        if (!hasStarted.compareAndSet(false, true)) {\n            return;\n        }\n        boss = new NioEventLoopGroup(0, new DefaultThreadFactory(\"qos-boss\", true));\n        worker = new NioEventLoopGroup(0, new DefaultThreadFactory(\"qos-worker\", true));\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(boss, worker);\n        serverBootstrap.channel(NioServerSocketChannel.class);\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childOption(ChannelOption.SO_REUSEADDR, true);\n        serverBootstrap.childHandler(new ChannelInitializer<Channel>() {\n\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n                ch.pipeline().addLast(new QosProcessHandler(welcome, acceptForeignIp));\n            }\n        });\n        try {\n            serverBootstrap.bind(port).sync();\n            logger.info(\"qos-server bind localhost:\" + port);\n        } catch (Throwable throwable) {\n            logger.error(\"qos-server can not bind localhost:\" + port, throwable);\n            throw throwable;\n        }\n    }\n```\n\n通过netty来启动服务，最后业务处理在`QosProcessHandler`中。\n\n\n```java\npublic class QosProcessHandler extends ByteToMessageDecoder {\n\n    private ScheduledFuture<?> welcomeFuture;\n\n    private String welcome;\n    // true means to accept foreign IP\n    private boolean acceptForeignIp;\n\n    public static String prompt = \"dubbo>\";\n\n    public QosProcessHandler(String welcome, boolean acceptForeignIp) {\n        this.welcome = welcome;\n        this.acceptForeignIp = acceptForeignIp;\n    }\n\n    @Override\n    public void channelActive(final ChannelHandlerContext ctx) throws Exception {\n        //建立连接时打印LOGO\n        welcomeFuture = ctx.executor().schedule(new Runnable() {\n\n            @Override\n            public void run() {\n                if (welcome != null) {\n                    ctx.write(Unpooled.wrappedBuffer(welcome.getBytes()));\n                    ctx.writeAndFlush(Unpooled.wrappedBuffer(prompt.getBytes()));\n                }\n            }\n\n        }, 500, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new LocalHostPermitHandler(acceptForeignIp));\n        //取第一个字节，如果是G或者P，则判断是HTTP服务，否则是telnet服务。\n        //移除当前的handler，加入具体的协议的handler\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler());\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetProcessHandler());\n            p.remove(this);\n        }\n    }\n\n    // G for GET, and P for POST\n    private static boolean isHttp(int magic) {\n        return magic == 'G' || magic == 'P';\n    }\n}\n\n```\n\n`QosProcessHandler`主要判断协议，然后加入相应的处理器。我们重点看`TelnetProcessHandler`。\n\n```java\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.prompt);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.equals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.prompt);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);\n                log.error(\"can not found command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);\n                log.error(\"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n```\n\n```java\npublic String execute(CommandContext commandContext) throws NoSuchCommandException {\n        BaseCommand command = null;\n        try {\n            command = ExtensionLoader.getExtensionLoader(BaseCommand.class).getExtension(commandContext.getCommandName());\n        } catch (Throwable throwable) {\n                //can't find command\n        }\n        if (command == null) {\n            throw new NoSuchCommandException(commandContext.getCommandName());\n        }\n        return command.execute(commandContext, commandContext.getArgs());\n    }\n```\n`TelnetProcessHandler`解析命令之后，调用`commandExecutor.execute`方法，而`commandExecutor.execute`方法则是去找具体的`BaseCommand`扩展。\n\n`Dubbo`一共有5个命令实现：\n> Help: 打印帮助信息\n> Ls: 打印所有的服务\n> Offline: 下线服务\n> Online: 上线服务\n> Quit: 关闭连接\n\n\n举例看下`Offline`的实现：\n```java\n@Cmd(name = \"offline\", summary = \"offline dubbo\", example = {\n        \"offline dubbo\",\n        \"offline xx.xx.xxx.service\"\n})\npublic class Offline implements BaseCommand {\n    private Logger logger = LoggerFactory.getLogger(Offline.class);\n    private RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\n\n    @Override\n    public String execute(CommandContext commandContext, String[] args) {\n        logger.info(\"receive offline command\");\n        String servicePattern = \".*\";\n        if (args != null && args.length > 0) {\n            servicePattern = args[0];\n        }\n        boolean hasService = false;\n\n        List<ProviderModel> providerModelList = ApplicationModel.allProviderModels();\n        for (ProviderModel providerModel : providerModelList) {\n            if (providerModel.getServiceName().matches(servicePattern)) {\n                hasService = true;\n                Set<ProviderInvokerWrapper> providerInvokerWrapperSet = ProviderConsumerRegTable.getProviderInvoker(providerModel.getServiceName());\n                for (ProviderInvokerWrapper providerInvokerWrapper : providerInvokerWrapperSet) {\n                    if (!providerInvokerWrapper.isReg()) {\n                        continue;\n                    }\n                    Registry registry = registryFactory.getRegistry(providerInvokerWrapper.getRegistryUrl());\n                    registry.unregister(providerInvokerWrapper.getProviderUrl());\n                    providerInvokerWrapper.setReg(false);\n                }\n            }\n        }\n\n        if (hasService) {\n            return \"OK\";\n        } else {\n            return \"service not found\";\n        }\n    }\n}\n\n```\n\n`Offline`主要是从`ApplicationModel.allProviderModels()`获取所有的服务，然后调用`registry.unregister`方法注销服务。\n","slug":"2019-07-13-Dubbo系列-QOS","published":1,"updated":"2019-07-15T01:45:19.323Z","comments":1,"photos":[],"link":"","_id":"ckbroc49p00001fytg6ozb3si","content":"<h1 id=\"Dubbo系列-QOS\"><a href=\"#Dubbo系列-QOS\" class=\"headerlink\" title=\"Dubbo系列 - QOS\"></a>Dubbo系列 - QOS</h1><p>QOS是Dubbo在2.5.8加入的新的telnet命令，具体使用方式可以看官方文档：<br><a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/references/qos.html\" target=\"_blank\" rel=\"noopener\">在线运维命令 - QOS</a></p>\n<p>QOS服务启动的入口在<code>QosProtocolWrapper</code>，<code>QosProtocolWrapper</code>是<code>Protocol</code>的包装类，当通过<code>adaptive</code>方式来调用<code>RegistryProtocol</code>或者和其他协议的实现类时，会先执行<code>QosProtocolWrapper</code>的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class=\"line\">        startQosServer(invoker.getUrl());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocol.export(invoker);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> protocol.export(invoker);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">refer</span><span class=\"params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class=\"line\">        startQosServer(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocol.refer(type, url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> protocol.refer(type, url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>QosProtocolWrapper</code>在<code>export</code>和<code>refer</code>时，判断如果是<code>registry</code>协议，调用<code>startQosServer</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startQosServer</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> qosEnable = url.getParameter(QOS_ENABLE,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!qosEnable) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"qos won't be started because it is disabled. \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"Please check dubbo.application.qos.enable is configured either in system property, \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"dubbo.properties or XML/spring boot configuration.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//hasStarted是AtomicBoolean类型，通过CAS操作来保证只会启动一次服务。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasStarted.compareAndSet(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> port = url.getParameter(QOS_PORT, DEFAULT_PORT);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP,<span class=\"string\">\"false\"</span>));</span><br><span class=\"line\">        Server server = com.alibaba.dubbo.qos.server.Server.getInstance();</span><br><span class=\"line\">        server.setPort(port);</span><br><span class=\"line\">        server.setAcceptForeignIp(acceptForeignIp);</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">\"Fail to start qos server: \"</span>, throwable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasStarted.compareAndSet(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    boss = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"qos-boss\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">    worker = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"qos-worker\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">    ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">    serverBootstrap.group(boss, worker);</span><br><span class=\"line\">    serverBootstrap.channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    serverBootstrap.childOption(ChannelOption.TCP_NODELAY, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    serverBootstrap.childOption(ChannelOption.SO_REUSEADDR, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    serverBootstrap.childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(Channel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            ch.pipeline().addLast(<span class=\"keyword\">new</span> QosProcessHandler(welcome, acceptForeignIp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        serverBootstrap.bind(port).sync();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"qos-server bind localhost:\"</span> + port);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"qos-server can not bind localhost:\"</span> + port, throwable);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过netty来启动服务，最后业务处理在<code>QosProcessHandler</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QosProcessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ScheduledFuture&lt;?&gt; welcomeFuture;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String welcome;</span><br><span class=\"line\">    <span class=\"comment\">// true means to accept foreign IP</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> acceptForeignIp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String prompt = <span class=\"string\">\"dubbo&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">QosProcessHandler</span><span class=\"params\">(String welcome, <span class=\"keyword\">boolean</span> acceptForeignIp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.welcome = welcome;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.acceptForeignIp = acceptForeignIp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(<span class=\"keyword\">final</span> ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//建立连接时打印LOGO</span></span><br><span class=\"line\">        welcomeFuture = ctx.executor().schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (welcome != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    ctx.write(Unpooled.wrappedBuffer(welcome.getBytes()));</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.wrappedBuffer(prompt.getBytes()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in.readableBytes() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// read one byte to guess protocol</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> magic = in.getByte(in.readerIndex());</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline p = ctx.pipeline();</span><br><span class=\"line\">        p.addLast(<span class=\"keyword\">new</span> LocalHostPermitHandler(acceptForeignIp));</span><br><span class=\"line\">        <span class=\"comment\">//取第一个字节，如果是G或者P，则判断是HTTP服务，否则是telnet服务。</span></span><br><span class=\"line\">        <span class=\"comment\">//移除当前的handler，加入具体的协议的handler</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isHttp(magic)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// no welcome output for http protocol</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (welcomeFuture != <span class=\"keyword\">null</span> &amp;&amp; welcomeFuture.isCancellable()) &#123;</span><br><span class=\"line\">                welcomeFuture.cancel(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> HttpObjectAggregator(<span class=\"number\">1048576</span>));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> HttpProcessHandler());</span><br><span class=\"line\">            p.remove(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> LineBasedFrameDecoder(<span class=\"number\">2048</span>));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> IdleStateHandler(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span> * <span class=\"number\">60</span>));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> TelnetProcessHandler());</span><br><span class=\"line\">            p.remove(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// G for GET, and P for POST</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHttp</span><span class=\"params\">(<span class=\"keyword\">int</span> magic)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> magic == <span class=\"string\">'G'</span> || magic == <span class=\"string\">'P'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>QosProcessHandler</code>主要判断协议，然后加入相应的处理器。我们重点看<code>TelnetProcessHandler</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, String msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(msg)) &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(QosProcessHandler.prompt);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        CommandContext commandContext = TelnetCommandDecoder.decode(msg);</span><br><span class=\"line\">        commandContext.setRemote(ctx.channel());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String result = commandExecutor.execute(commandContext);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.equals(QosConstants.CLOSE, result)) &#123;</span><br><span class=\"line\">                ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.prompt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchCommandException ex) &#123;</span><br><span class=\"line\">            ctx.writeAndFlush(msg + <span class=\"string\">\" :no such command\"</span>);</span><br><span class=\"line\">            ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);</span><br><span class=\"line\">            log.error(<span class=\"string\">\"can not found command \"</span> + commandContext, ex);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            ctx.writeAndFlush(msg + <span class=\"string\">\" :fail to execute commandContext by \"</span> + ex.getMessage());</span><br><span class=\"line\">            ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);</span><br><span class=\"line\">            log.error(<span class=\"string\">\"execute commandContext got exception \"</span> + commandContext, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">(CommandContext commandContext)</span> <span class=\"keyword\">throws</span> NoSuchCommandException </span>&#123;</span><br><span class=\"line\">        BaseCommand command = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            command = ExtensionLoader.getExtensionLoader(BaseCommand<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getExtension</span>(<span class=\"title\">commandContext</span>.<span class=\"title\">getCommandName</span>())</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//can't find command</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchCommandException(commandContext.getCommandName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> command.execute(commandContext, commandContext.getArgs());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>TelnetProcessHandler</code>解析命令之后，调用<code>commandExecutor.execute</code>方法，而<code>commandExecutor.execute</code>方法则是去找具体的<code>BaseCommand</code>扩展。</p>\n<p><code>Dubbo</code>一共有5个命令实现：</p>\n<blockquote>\n<p>Help: 打印帮助信息<br>Ls: 打印所有的服务<br>Offline: 下线服务<br>Online: 上线服务<br>Quit: 关闭连接</p>\n</blockquote>\n<p>举例看下<code>Offline</code>的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cmd</span>(name = <span class=\"string\">\"offline\"</span>, summary = <span class=\"string\">\"offline dubbo\"</span>, example = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"offline dubbo\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"offline xx.xx.xxx.service\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Offline</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseCommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(Offline<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getAdaptiveExtension</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">(CommandContext commandContext, String[] args)</span> </span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"receive offline command\"</span>);</span><br><span class=\"line\">        String servicePattern = <span class=\"string\">\".*\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span> &amp;&amp; args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            servicePattern = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> hasService = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ProviderModel&gt; providerModelList = ApplicationModel.allProviderModels();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ProviderModel providerModel : providerModelList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (providerModel.getServiceName().matches(servicePattern)) &#123;</span><br><span class=\"line\">                hasService = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                Set&lt;ProviderInvokerWrapper&gt; providerInvokerWrapperSet = ProviderConsumerRegTable.getProviderInvoker(providerModel.getServiceName());</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ProviderInvokerWrapper providerInvokerWrapper : providerInvokerWrapperSet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!providerInvokerWrapper.isReg()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Registry registry = registryFactory.getRegistry(providerInvokerWrapper.getRegistryUrl());</span><br><span class=\"line\">                    registry.unregister(providerInvokerWrapper.getProviderUrl());</span><br><span class=\"line\">                    providerInvokerWrapper.setReg(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasService) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"OK\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"service not found\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Offline</code>主要是从<code>ApplicationModel.allProviderModels()</code>获取所有的服务，然后调用<code>registry.unregister</code>方法注销服务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dubbo系列-QOS\"><a href=\"#Dubbo系列-QOS\" class=\"headerlink\" title=\"Dubbo系列 - QOS\"></a>Dubbo系列 - QOS</h1><p>QOS是Dubbo在2.5.8加入的新的telnet命令，具体使用方式可以看官方文档：<br><a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/references/qos.html\" target=\"_blank\" rel=\"noopener\">在线运维命令 - QOS</a></p>\n<p>QOS服务启动的入口在<code>QosProtocolWrapper</code>，<code>QosProtocolWrapper</code>是<code>Protocol</code>的包装类，当通过<code>adaptive</code>方式来调用<code>RegistryProtocol</code>或者和其他协议的实现类时，会先执行<code>QosProtocolWrapper</code>的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class=\"line\">        startQosServer(invoker.getUrl());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocol.export(invoker);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> protocol.export(invoker);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">refer</span><span class=\"params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class=\"line\">        startQosServer(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocol.refer(type, url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> protocol.refer(type, url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>QosProtocolWrapper</code>在<code>export</code>和<code>refer</code>时，判断如果是<code>registry</code>协议，调用<code>startQosServer</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startQosServer</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> qosEnable = url.getParameter(QOS_ENABLE,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!qosEnable) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"qos won't be started because it is disabled. \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"Please check dubbo.application.qos.enable is configured either in system property, \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"dubbo.properties or XML/spring boot configuration.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//hasStarted是AtomicBoolean类型，通过CAS操作来保证只会启动一次服务。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasStarted.compareAndSet(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> port = url.getParameter(QOS_PORT, DEFAULT_PORT);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP,<span class=\"string\">\"false\"</span>));</span><br><span class=\"line\">        Server server = com.alibaba.dubbo.qos.server.Server.getInstance();</span><br><span class=\"line\">        server.setPort(port);</span><br><span class=\"line\">        server.setAcceptForeignIp(acceptForeignIp);</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">\"Fail to start qos server: \"</span>, throwable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasStarted.compareAndSet(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    boss = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"qos-boss\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">    worker = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"qos-worker\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">    ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">    serverBootstrap.group(boss, worker);</span><br><span class=\"line\">    serverBootstrap.channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    serverBootstrap.childOption(ChannelOption.TCP_NODELAY, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    serverBootstrap.childOption(ChannelOption.SO_REUSEADDR, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    serverBootstrap.childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(Channel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            ch.pipeline().addLast(<span class=\"keyword\">new</span> QosProcessHandler(welcome, acceptForeignIp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        serverBootstrap.bind(port).sync();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"qos-server bind localhost:\"</span> + port);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">\"qos-server can not bind localhost:\"</span> + port, throwable);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过netty来启动服务，最后业务处理在<code>QosProcessHandler</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QosProcessHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ScheduledFuture&lt;?&gt; welcomeFuture;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String welcome;</span><br><span class=\"line\">    <span class=\"comment\">// true means to accept foreign IP</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> acceptForeignIp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String prompt = <span class=\"string\">\"dubbo&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">QosProcessHandler</span><span class=\"params\">(String welcome, <span class=\"keyword\">boolean</span> acceptForeignIp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.welcome = welcome;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.acceptForeignIp = acceptForeignIp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(<span class=\"keyword\">final</span> ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//建立连接时打印LOGO</span></span><br><span class=\"line\">        welcomeFuture = ctx.executor().schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (welcome != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    ctx.write(Unpooled.wrappedBuffer(welcome.getBytes()));</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.wrappedBuffer(prompt.getBytes()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">500</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in.readableBytes() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// read one byte to guess protocol</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> magic = in.getByte(in.readerIndex());</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline p = ctx.pipeline();</span><br><span class=\"line\">        p.addLast(<span class=\"keyword\">new</span> LocalHostPermitHandler(acceptForeignIp));</span><br><span class=\"line\">        <span class=\"comment\">//取第一个字节，如果是G或者P，则判断是HTTP服务，否则是telnet服务。</span></span><br><span class=\"line\">        <span class=\"comment\">//移除当前的handler，加入具体的协议的handler</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isHttp(magic)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// no welcome output for http protocol</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (welcomeFuture != <span class=\"keyword\">null</span> &amp;&amp; welcomeFuture.isCancellable()) &#123;</span><br><span class=\"line\">                welcomeFuture.cancel(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> HttpObjectAggregator(<span class=\"number\">1048576</span>));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> HttpProcessHandler());</span><br><span class=\"line\">            p.remove(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> LineBasedFrameDecoder(<span class=\"number\">2048</span>));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> IdleStateHandler(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span> * <span class=\"number\">60</span>));</span><br><span class=\"line\">            p.addLast(<span class=\"keyword\">new</span> TelnetProcessHandler());</span><br><span class=\"line\">            p.remove(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// G for GET, and P for POST</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHttp</span><span class=\"params\">(<span class=\"keyword\">int</span> magic)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> magic == <span class=\"string\">'G'</span> || magic == <span class=\"string\">'P'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>QosProcessHandler</code>主要判断协议，然后加入相应的处理器。我们重点看<code>TelnetProcessHandler</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, String msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(msg)) &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(QosProcessHandler.prompt);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        CommandContext commandContext = TelnetCommandDecoder.decode(msg);</span><br><span class=\"line\">        commandContext.setRemote(ctx.channel());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String result = commandExecutor.execute(commandContext);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.equals(QosConstants.CLOSE, result)) &#123;</span><br><span class=\"line\">                ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.prompt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchCommandException ex) &#123;</span><br><span class=\"line\">            ctx.writeAndFlush(msg + <span class=\"string\">\" :no such command\"</span>);</span><br><span class=\"line\">            ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);</span><br><span class=\"line\">            log.error(<span class=\"string\">\"can not found command \"</span> + commandContext, ex);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            ctx.writeAndFlush(msg + <span class=\"string\">\" :fail to execute commandContext by \"</span> + ex.getMessage());</span><br><span class=\"line\">            ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.prompt);</span><br><span class=\"line\">            log.error(<span class=\"string\">\"execute commandContext got exception \"</span> + commandContext, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">(CommandContext commandContext)</span> <span class=\"keyword\">throws</span> NoSuchCommandException </span>&#123;</span><br><span class=\"line\">        BaseCommand command = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            command = ExtensionLoader.getExtensionLoader(BaseCommand<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getExtension</span>(<span class=\"title\">commandContext</span>.<span class=\"title\">getCommandName</span>())</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//can't find command</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchCommandException(commandContext.getCommandName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> command.execute(commandContext, commandContext.getArgs());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>TelnetProcessHandler</code>解析命令之后，调用<code>commandExecutor.execute</code>方法，而<code>commandExecutor.execute</code>方法则是去找具体的<code>BaseCommand</code>扩展。</p>\n<p><code>Dubbo</code>一共有5个命令实现：</p>\n<blockquote>\n<p>Help: 打印帮助信息<br>Ls: 打印所有的服务<br>Offline: 下线服务<br>Online: 上线服务<br>Quit: 关闭连接</p>\n</blockquote>\n<p>举例看下<code>Offline</code>的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cmd</span>(name = <span class=\"string\">\"offline\"</span>, summary = <span class=\"string\">\"offline dubbo\"</span>, example = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"offline dubbo\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"offline xx.xx.xxx.service\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Offline</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseCommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(Offline<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getAdaptiveExtension</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">(CommandContext commandContext, String[] args)</span> </span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"receive offline command\"</span>);</span><br><span class=\"line\">        String servicePattern = <span class=\"string\">\".*\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span> &amp;&amp; args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            servicePattern = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> hasService = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ProviderModel&gt; providerModelList = ApplicationModel.allProviderModels();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ProviderModel providerModel : providerModelList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (providerModel.getServiceName().matches(servicePattern)) &#123;</span><br><span class=\"line\">                hasService = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                Set&lt;ProviderInvokerWrapper&gt; providerInvokerWrapperSet = ProviderConsumerRegTable.getProviderInvoker(providerModel.getServiceName());</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ProviderInvokerWrapper providerInvokerWrapper : providerInvokerWrapperSet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!providerInvokerWrapper.isReg()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Registry registry = registryFactory.getRegistry(providerInvokerWrapper.getRegistryUrl());</span><br><span class=\"line\">                    registry.unregister(providerInvokerWrapper.getProviderUrl());</span><br><span class=\"line\">                    providerInvokerWrapper.setReg(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasService) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"OK\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"service not found\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Offline</code>主要是从<code>ApplicationModel.allProviderModels()</code>获取所有的服务，然后调用<code>registry.unregister</code>方法注销服务。</p>\n"},{"layout":"post","title":"Dubbo系列-编解码","date":"2019-07-13T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# Dubbo系列 - 编解码\n\n在分析请求编码逻辑之前，我们先来看一下 Dubbo 数据包结构。\n\n![](http://ww3.sinaimg.cn/large/006tNc79ly1g4zavo80qwj310k0ckmz8.jpg)\n\nDubbo 数据包分为消息头和消息体，消息头用于存储一些元信息，比如魔数（Magic），数据包类型（Request/Response），消息体长度（Data Length）等。消息体中用于存储具体的调用消息，比如方法名称，参数列表等。下面简单列举一下消息头的内容。\n\n|偏移量(Bit)|字段|取值|\n|-|-|-|\n|0 ~ 7|魔数高位|0xda00|\n|8 ~ 15|魔数低位|0xbb|\n|16|数据包类型|0 - Response, 1 - Request|\n|17|调用方式|仅在第16位被设为1的情况下有效，0 - 单向调用，1 - 双向调用|\n|18|事件标识|0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包|\n|19 ~ 23|序列化器编号|\t2 - Hessian2Serialization 3 - JavaSerialization 4 - CompactedJavaSerialization 6 - FastJsonSerialization 7 - NativeJavaSerialization 8 - KryoSerialization 9 - FstSerialization|\n|24 ~ 31|状态|20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE......|\n|32 ~ 95|请求编号|共8字节，运行时生成|\n|96 ~ 127|消息体长度|运行时计算|\n\n还是从`NettyServer`开始：\n\n```java\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)\n                .childOption(ChannelOption.SO_REUSEADDR, Boolean.TRUE)\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .childHandler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this);\n                        ch.pipeline()//.addLast(\"logging\",new LoggingHandler(LogLevel.INFO))//for debug\n                                .addLast(\"decoder\", adapter.getDecoder())\n                                .addLast(\"encoder\", adapter.getEncoder())\n                                .addLast(\"handler\", nettyServerHandler);\n                    }\n                });\n```\n\n可以看到编码和解码主要是调用`NettyCodecAdapter`里的`decoder`和`encoder`。\n\n`NettyCodecAdapter`里有两个内部类`InternalEncoder`和`InternalDecoder`，我们先从解码开始。\n\n## 解码\n\n```java\n    private class InternalDecoder extends ByteToMessageDecoder {\n        @Override\n        protected void decode(ChannelHandlerContext ctx, ByteBuf input, List<Object> out) throws Exception {\n            ChannelBuffer message = new NettyBackedChannelBuffer(input);\n            NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);\n            Object msg;\n            int saveReaderIndex;\n            try {\n                // decode object.\n                do {\n                    saveReaderIndex = message.readerIndex();\n                    try {\n                        msg = codec.decode(channel, message);\n                    } catch (IOException e) {\n                        throw e;\n                    }\n                    //如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据\n                    if (msg == Codec2.DecodeResult.NEED_MORE_INPUT) {\n                        message.readerIndex(saveReaderIndex);\n                        break;\n                    } else {\n                        //is it possible to go here ?\n                        if (saveReaderIndex == message.readerIndex()) {\n                            throw new IOException(\"Decode without read data.\");\n                        }\n                        if (msg != null) {\n                            out.add(msg);\n                        }\n                    }\n                } while (message.readable());\n            } finally {\n                NettyChannel.removeChannelIfDisconnected(ctx.channel());\n            }\n        }\n    }\n```\n`InternalDecoder`通过调`codec.decode`来进行解码，这里的`codec`是`DubboCountCodec`实例。再看看`DubboCountCodec`的`decode`方法。\n\n```java\n    @Override\n    public Object decode(Channel channel, ChannelBuffer buffer) throws IOException {\n        int save = buffer.readerIndex();\n        MultiMessage result = MultiMessage.create();\n        do {\n            Object obj = codec.decode(channel, buffer);\n            //如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据\n            if (Codec2.DecodeResult.NEED_MORE_INPUT == obj) {\n                buffer.readerIndex(save);\n                break;\n            } else {\n                result.addMessage(obj);\n                //记录消息长度\n                logMessageLength(obj, buffer.readerIndex() - save);\n                save = buffer.readerIndex();\n            }\n        } while (true);\n        if (result.isEmpty()) {\n            return Codec2.DecodeResult.NEED_MORE_INPUT;\n        }\n        if (result.size() == 1) {\n            return result.get(0);\n        }\n        return result;\n    }\n\n    private void logMessageLength(Object result, int bytes) {\n        if (bytes <= 0) {\n            return;\n        }\n        if (result instanceof Request) {\n            try {\n                ((RpcInvocation) ((Request) result).getData()).setAttachment(\n                        Constants.INPUT_KEY, String.valueOf(bytes));\n            } catch (Throwable e) {\n                /* ignore */\n            }\n        } else if (result instanceof Response) {\n            try {\n                ((RpcResult) ((Response) result).getResult()).setAttachment(\n                        Constants.OUTPUT_KEY, String.valueOf(bytes));\n            } catch (Throwable e) {\n                /* ignore */\n            }\n        }\n    }\n```\n\n`DubboCountCodec`调用`ExchangeCodec.decode`来进行解码，并处理tcp粘包拆包的情况。下面看`ExchangeCodec.decode`。\n\n```java\npublic class ExchangeCodec extends TelnetCodec {\n    // header length.\n    protected static final int HEADER_LENGTH = 16;\n    // magic header.\n    protected static final short MAGIC = (short) 0xdabb;\n    protected static final byte MAGIC_HIGH = Bytes.short2bytes(MAGIC)[0];\n    protected static final byte MAGIC_LOW = Bytes.short2bytes(MAGIC)[1];\n    // message flag.\n    protected static final byte FLAG_REQUEST = (byte) 0x80;\n    protected static final byte FLAG_TWOWAY = (byte) 0x40;\n    protected static final byte FLAG_EVENT = (byte) 0x20;\n    protected static final int SERIALIZATION_MASK = 0x1f;\n    \n    @Override\n    public Object decode(Channel channel, ChannelBuffer buffer) throws IOException {\n        int readable = buffer.readableBytes();\n        byte[] header = new byte[Math.min(readable, HEADER_LENGTH)];\n        //读取16个字节的头，也就是128位的长度\n        buffer.readBytes(header);\n        return decode(channel, buffer, readable, header);\n    }\n\n    @Override\n    protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byte[] header) throws IOException {\n        //先检查魔数，如果头两个字节不是魔数且后面也找不到魔数，这调用父类TelnetCodec的decode方法。\n        if (readable > 0 && header[0] != MAGIC_HIGH\n                || readable > 1 && header[1] != MAGIC_LOW) {\n            int length = header.length;\n            //将所有数据读到header中\n            if (header.length < readable) {\n                header = Bytes.copyOf(header, readable);\n                buffer.readBytes(header, length, readable - length);\n            }\n            //一直往后去找魔数，如果找到的话，将指针指回到魔数开始的位置？？？\n            for (int i = 1; i < header.length - 1; i++) {\n                if (header[i] == MAGIC_HIGH && header[i + 1] == MAGIC_LOW) {\n                    buffer.readerIndex(buffer.readerIndex() - header.length + i);\n                    header = Bytes.copyOf(header, i);\n                    break;\n                }\n            }\n            // 通过 telnet 命令行发送的数据包不包含消息头，所以这里\n            // 调用 TelnetCodec 的 decode 方法对数据包进行解码\n            return super.decode(channel, buffer, readable, header);\n        }\n        // 如果可读的数据少于头的长度，则返回NEED_MORE_INPUT继续等待数据。\n        if (readable < HEADER_LENGTH) {\n            return DecodeResult.NEED_MORE_INPUT;\n        }\n\n        //从12个字节开始读取4个字节，最为body的长度。即96位到128位\n        int len = Bytes.bytes2int(header, 12);\n        //检查body长度是否过大，默认8M\n        checkPayload(channel, len);\n        //如果总长度大于可读的长度，返回NEED_MORE_INPUT\n        int tt = len + HEADER_LENGTH;\n        if (readable < tt) {\n            return DecodeResult.NEED_MORE_INPUT;\n        }\n\n        // limit input stream.\n        ChannelBufferInputStream is = new ChannelBufferInputStream(buffer, len);\n\n        try {\n            return decodeBody(channel, is, header);\n        } finally {\n            if (is.available() > 0) {\n                try {\n                    if (logger.isWarnEnabled()) {\n                        logger.warn(\"Skip input stream \" + is.available());\n                    }\n                    StreamUtils.skipUnusedStream(is);\n                } catch (IOException e) {\n                    logger.warn(e.getMessage(), e);\n                }\n            }\n        }\n    }\n\n    protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {\n        //读取第3个字节，即16~23位。proto为19 ~ 23的序列化器编号\n        byte flag = header[2], proto = (byte) (flag & SERIALIZATION_MASK);\n        // 32 ~ 95 读取ID\n        long id = Bytes.bytes2long(header, 4);\n        //读取第16位数据包类型\n        if ((flag & FLAG_REQUEST) == 0) {\n            // decode response.\n            Response res = new Response(id);\n            if ((flag & FLAG_EVENT) != 0) {\n                res.setEvent(Response.HEARTBEAT_EVENT);\n            }\n            // get status.\n            byte status = header[3];\n            res.setStatus(status);\n            try {\n                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);\n                if (status == Response.OK) {\n                    Object data;\n                    if (res.isHeartbeat()) {\n                        data = decodeHeartbeatData(channel, in);\n                    } else if (res.isEvent()) {\n                        data = decodeEventData(channel, in);\n                    } else {\n                        data = decodeResponseData(channel, in, getRequestData(id));\n                    }\n                    res.setResult(data);\n                } else {\n                    res.setErrorMessage(in.readUTF());\n                }\n            } catch (Throwable t) {\n                res.setStatus(Response.CLIENT_ERROR);\n                res.setErrorMessage(StringUtils.toString(t));\n            }\n            return res;\n        } else {\n            // decode request.\n            Request req = new Request(id);\n            req.setVersion(Version.getProtocolVersion());\n            req.setTwoWay((flag & FLAG_TWOWAY) != 0);\n            //18位事件标记，0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包\n            if ((flag & FLAG_EVENT) != 0) {\n                req.setEvent(Request.HEARTBEAT_EVENT);\n            }\n            try {\n                //反序列化得到ObjectInput\n                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);\n                Object data;\n                if (req.isHeartbeat()) {\n                    data = decodeHeartbeatData(channel, in);\n                } else if (req.isEvent()) {\n                    data = decodeEventData(channel, in);\n                } else {\n                    data = decodeRequestData(channel, in);\n                }\n                req.setData(data);\n            } catch (Throwable t) {\n                // bad request\n                req.setBroken(true);\n                req.setData(t);\n            }\n            return req;\n        }\n    }\n\n    @Deprecated\n    protected Object decodeHeartbeatData(Channel channel, ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n    protected Object decodeEventData(Channel channel, ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n    protected Object decodeRequestData(ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n    protected Object decodeResponseData(ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n```\n\n所有的decode方法都是调用`ObjectInput.readObject`。先看下`CodecSupport.deserialize`的源码。\n\n```java\npublic class CodecSupport {\n    private static Map<Byte, Serialization> ID_SERIALIZATION_MAP = new HashMap<Byte, Serialization>();\n    static {\n        Set<String> supportedExtensions = ExtensionLoader.getExtensionLoader(Serialization.class).getSupportedExtensions();\n        for (String name : supportedExtensions) {\n            Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name);\n            byte idByte = serialization.getContentTypeId();\n            if (ID_SERIALIZATION_MAP.containsKey(idByte)) {\n                logger.error(\"Serialization extension \" + serialization.getClass().getName()\n                        + \" has duplicate id to Serialization extension \"\n                        + ID_SERIALIZATION_MAP.get(idByte).getClass().getName()\n                        + \", ignore this Serialization extension\");\n                continue;\n            }\n            ID_SERIALIZATION_MAP.put(idByte, serialization);\n            ID_SERIALIZATIONNAME_MAP.put(idByte, name);\n        }\n    }\n    \n    public static Serialization getSerializationById(Byte id) {\n        return ID_SERIALIZATION_MAP.get(id);\n    }\n\n    public static Serialization getSerialization(URL url, Byte id) throws IOException {\n        Serialization serialization = getSerializationById(id);\n        String serializationName = url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION);\n        // Check if \"serialization id\" passed from network matches the id on this side(only take effect for JDK serialization), for security purpose.\n        if (serialization == null\n                || ((id == 3 || id == 7 || id == 4) && !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) {\n            throw new IOException(\"Unexpected serialization id:\" + id + \" received from network, please check if the peer send the right id.\");\n        }\n        return serialization;\n    }\n\n    public static ObjectInput deserialize(URL url, InputStream is, byte proto) throws IOException {\n        Serialization s = getSerialization(url, proto);\n        return s.deserialize(url, is);\n    }\n```\n\n`CodecSupport`主要是根据`proto`根据SPI找到对应的`Serialization`，然后调用`deserialize`方法返回`ObjectInput`对象。`Serialization`默认使用`hessian2`。`Serialization`不在深入分析。\n\n## 编码\n\n从`NettyCodecAdapter`的内部类`InternalEncoder`开始。\n\n```java\n    private class InternalEncoder extends MessageToByteEncoder {\n\n        @Override\n        protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {\n            com.alibaba.dubbo.remoting.buffer.ChannelBuffer buffer = new NettyBackedChannelBuffer(out);\n            Channel ch = ctx.channel();\n            NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);\n            try {\n                codec.encode(channel, buffer, msg);\n            } finally {\n                NettyChannel.removeChannelIfDisconnected(ch);\n            }\n        }\n    }\n```\n\n`InternalEncoder`调用`DubboCountCodec.encode`。\n\n```java\n    @Override\n    public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {\n        codec.encode(channel, buffer, msg);\n    }\n```\n\n`DubboCountCodec`调用`DubboCodec`的父类`ExchangeCodec`的`encode`方法。\n\n```java\n    @Override\n    public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {\n        if (msg instanceof Request) {\n            encodeRequest(channel, buffer, (Request) msg);\n        } else if (msg instanceof Response) {\n            encodeResponse(channel, buffer, (Response) msg);\n        } else {\n            super.encode(channel, buffer, msg);\n        }\n    }\n    \n    protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException {\n        //获取序列化对象\n        Serialization serialization = getSerialization(channel);\n        // header.\n        byte[] header = new byte[HEADER_LENGTH];\n        // set magic number.\n        Bytes.short2bytes(MAGIC, header);\n\n        // set request and serialization flag.\n        header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId());\n\n        if (req.isTwoWay()) header[2] |= FLAG_TWOWAY;\n        if (req.isEvent()) header[2] |= FLAG_EVENT;\n\n        // set request id.\n        Bytes.long2bytes(req.getId(), header, 4);\n\n        // encode request data.\n        int savedWriteIndex = buffer.writerIndex();\n        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);\n        ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer);\n        ObjectOutput out = serialization.serialize(channel.getUrl(), bos);\n        if (req.isEvent()) {\n            encodeEventData(channel, out, req.getData());\n        } else {\n            encodeRequestData(channel, out, req.getData(), req.getVersion());\n        }\n        out.flushBuffer();\n        if (out instanceof Cleanable) {\n            ((Cleanable) out).cleanup();\n        }\n        bos.flush();\n        bos.close();\n        int len = bos.writtenBytes();\n        checkPayload(channel, len);\n        Bytes.int2bytes(len, header, 12);\n\n        // write\n        buffer.writerIndex(savedWriteIndex);\n        buffer.writeBytes(header); // write header.\n        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);\n    }\n```\n\n编码过程其实是解码的逆向过程，而且没有了粘包拆包的处理，代码更为简单。`encodeResponse`方法的代码和`encodeRequest`没有太大差别，就不细写了。\nDubbo编解码过程讲解结束。\n\n\n","source":"_posts/2019-07-14-Dubbo系列-编解码.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列-编解码\"\ndate:       2019-07-14\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# Dubbo系列 - 编解码\n\n在分析请求编码逻辑之前，我们先来看一下 Dubbo 数据包结构。\n\n![](http://ww3.sinaimg.cn/large/006tNc79ly1g4zavo80qwj310k0ckmz8.jpg)\n\nDubbo 数据包分为消息头和消息体，消息头用于存储一些元信息，比如魔数（Magic），数据包类型（Request/Response），消息体长度（Data Length）等。消息体中用于存储具体的调用消息，比如方法名称，参数列表等。下面简单列举一下消息头的内容。\n\n|偏移量(Bit)|字段|取值|\n|-|-|-|\n|0 ~ 7|魔数高位|0xda00|\n|8 ~ 15|魔数低位|0xbb|\n|16|数据包类型|0 - Response, 1 - Request|\n|17|调用方式|仅在第16位被设为1的情况下有效，0 - 单向调用，1 - 双向调用|\n|18|事件标识|0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包|\n|19 ~ 23|序列化器编号|\t2 - Hessian2Serialization 3 - JavaSerialization 4 - CompactedJavaSerialization 6 - FastJsonSerialization 7 - NativeJavaSerialization 8 - KryoSerialization 9 - FstSerialization|\n|24 ~ 31|状态|20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE......|\n|32 ~ 95|请求编号|共8字节，运行时生成|\n|96 ~ 127|消息体长度|运行时计算|\n\n还是从`NettyServer`开始：\n\n```java\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)\n                .childOption(ChannelOption.SO_REUSEADDR, Boolean.TRUE)\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .childHandler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this);\n                        ch.pipeline()//.addLast(\"logging\",new LoggingHandler(LogLevel.INFO))//for debug\n                                .addLast(\"decoder\", adapter.getDecoder())\n                                .addLast(\"encoder\", adapter.getEncoder())\n                                .addLast(\"handler\", nettyServerHandler);\n                    }\n                });\n```\n\n可以看到编码和解码主要是调用`NettyCodecAdapter`里的`decoder`和`encoder`。\n\n`NettyCodecAdapter`里有两个内部类`InternalEncoder`和`InternalDecoder`，我们先从解码开始。\n\n## 解码\n\n```java\n    private class InternalDecoder extends ByteToMessageDecoder {\n        @Override\n        protected void decode(ChannelHandlerContext ctx, ByteBuf input, List<Object> out) throws Exception {\n            ChannelBuffer message = new NettyBackedChannelBuffer(input);\n            NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);\n            Object msg;\n            int saveReaderIndex;\n            try {\n                // decode object.\n                do {\n                    saveReaderIndex = message.readerIndex();\n                    try {\n                        msg = codec.decode(channel, message);\n                    } catch (IOException e) {\n                        throw e;\n                    }\n                    //如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据\n                    if (msg == Codec2.DecodeResult.NEED_MORE_INPUT) {\n                        message.readerIndex(saveReaderIndex);\n                        break;\n                    } else {\n                        //is it possible to go here ?\n                        if (saveReaderIndex == message.readerIndex()) {\n                            throw new IOException(\"Decode without read data.\");\n                        }\n                        if (msg != null) {\n                            out.add(msg);\n                        }\n                    }\n                } while (message.readable());\n            } finally {\n                NettyChannel.removeChannelIfDisconnected(ctx.channel());\n            }\n        }\n    }\n```\n`InternalDecoder`通过调`codec.decode`来进行解码，这里的`codec`是`DubboCountCodec`实例。再看看`DubboCountCodec`的`decode`方法。\n\n```java\n    @Override\n    public Object decode(Channel channel, ChannelBuffer buffer) throws IOException {\n        int save = buffer.readerIndex();\n        MultiMessage result = MultiMessage.create();\n        do {\n            Object obj = codec.decode(channel, buffer);\n            //如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据\n            if (Codec2.DecodeResult.NEED_MORE_INPUT == obj) {\n                buffer.readerIndex(save);\n                break;\n            } else {\n                result.addMessage(obj);\n                //记录消息长度\n                logMessageLength(obj, buffer.readerIndex() - save);\n                save = buffer.readerIndex();\n            }\n        } while (true);\n        if (result.isEmpty()) {\n            return Codec2.DecodeResult.NEED_MORE_INPUT;\n        }\n        if (result.size() == 1) {\n            return result.get(0);\n        }\n        return result;\n    }\n\n    private void logMessageLength(Object result, int bytes) {\n        if (bytes <= 0) {\n            return;\n        }\n        if (result instanceof Request) {\n            try {\n                ((RpcInvocation) ((Request) result).getData()).setAttachment(\n                        Constants.INPUT_KEY, String.valueOf(bytes));\n            } catch (Throwable e) {\n                /* ignore */\n            }\n        } else if (result instanceof Response) {\n            try {\n                ((RpcResult) ((Response) result).getResult()).setAttachment(\n                        Constants.OUTPUT_KEY, String.valueOf(bytes));\n            } catch (Throwable e) {\n                /* ignore */\n            }\n        }\n    }\n```\n\n`DubboCountCodec`调用`ExchangeCodec.decode`来进行解码，并处理tcp粘包拆包的情况。下面看`ExchangeCodec.decode`。\n\n```java\npublic class ExchangeCodec extends TelnetCodec {\n    // header length.\n    protected static final int HEADER_LENGTH = 16;\n    // magic header.\n    protected static final short MAGIC = (short) 0xdabb;\n    protected static final byte MAGIC_HIGH = Bytes.short2bytes(MAGIC)[0];\n    protected static final byte MAGIC_LOW = Bytes.short2bytes(MAGIC)[1];\n    // message flag.\n    protected static final byte FLAG_REQUEST = (byte) 0x80;\n    protected static final byte FLAG_TWOWAY = (byte) 0x40;\n    protected static final byte FLAG_EVENT = (byte) 0x20;\n    protected static final int SERIALIZATION_MASK = 0x1f;\n    \n    @Override\n    public Object decode(Channel channel, ChannelBuffer buffer) throws IOException {\n        int readable = buffer.readableBytes();\n        byte[] header = new byte[Math.min(readable, HEADER_LENGTH)];\n        //读取16个字节的头，也就是128位的长度\n        buffer.readBytes(header);\n        return decode(channel, buffer, readable, header);\n    }\n\n    @Override\n    protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byte[] header) throws IOException {\n        //先检查魔数，如果头两个字节不是魔数且后面也找不到魔数，这调用父类TelnetCodec的decode方法。\n        if (readable > 0 && header[0] != MAGIC_HIGH\n                || readable > 1 && header[1] != MAGIC_LOW) {\n            int length = header.length;\n            //将所有数据读到header中\n            if (header.length < readable) {\n                header = Bytes.copyOf(header, readable);\n                buffer.readBytes(header, length, readable - length);\n            }\n            //一直往后去找魔数，如果找到的话，将指针指回到魔数开始的位置？？？\n            for (int i = 1; i < header.length - 1; i++) {\n                if (header[i] == MAGIC_HIGH && header[i + 1] == MAGIC_LOW) {\n                    buffer.readerIndex(buffer.readerIndex() - header.length + i);\n                    header = Bytes.copyOf(header, i);\n                    break;\n                }\n            }\n            // 通过 telnet 命令行发送的数据包不包含消息头，所以这里\n            // 调用 TelnetCodec 的 decode 方法对数据包进行解码\n            return super.decode(channel, buffer, readable, header);\n        }\n        // 如果可读的数据少于头的长度，则返回NEED_MORE_INPUT继续等待数据。\n        if (readable < HEADER_LENGTH) {\n            return DecodeResult.NEED_MORE_INPUT;\n        }\n\n        //从12个字节开始读取4个字节，最为body的长度。即96位到128位\n        int len = Bytes.bytes2int(header, 12);\n        //检查body长度是否过大，默认8M\n        checkPayload(channel, len);\n        //如果总长度大于可读的长度，返回NEED_MORE_INPUT\n        int tt = len + HEADER_LENGTH;\n        if (readable < tt) {\n            return DecodeResult.NEED_MORE_INPUT;\n        }\n\n        // limit input stream.\n        ChannelBufferInputStream is = new ChannelBufferInputStream(buffer, len);\n\n        try {\n            return decodeBody(channel, is, header);\n        } finally {\n            if (is.available() > 0) {\n                try {\n                    if (logger.isWarnEnabled()) {\n                        logger.warn(\"Skip input stream \" + is.available());\n                    }\n                    StreamUtils.skipUnusedStream(is);\n                } catch (IOException e) {\n                    logger.warn(e.getMessage(), e);\n                }\n            }\n        }\n    }\n\n    protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {\n        //读取第3个字节，即16~23位。proto为19 ~ 23的序列化器编号\n        byte flag = header[2], proto = (byte) (flag & SERIALIZATION_MASK);\n        // 32 ~ 95 读取ID\n        long id = Bytes.bytes2long(header, 4);\n        //读取第16位数据包类型\n        if ((flag & FLAG_REQUEST) == 0) {\n            // decode response.\n            Response res = new Response(id);\n            if ((flag & FLAG_EVENT) != 0) {\n                res.setEvent(Response.HEARTBEAT_EVENT);\n            }\n            // get status.\n            byte status = header[3];\n            res.setStatus(status);\n            try {\n                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);\n                if (status == Response.OK) {\n                    Object data;\n                    if (res.isHeartbeat()) {\n                        data = decodeHeartbeatData(channel, in);\n                    } else if (res.isEvent()) {\n                        data = decodeEventData(channel, in);\n                    } else {\n                        data = decodeResponseData(channel, in, getRequestData(id));\n                    }\n                    res.setResult(data);\n                } else {\n                    res.setErrorMessage(in.readUTF());\n                }\n            } catch (Throwable t) {\n                res.setStatus(Response.CLIENT_ERROR);\n                res.setErrorMessage(StringUtils.toString(t));\n            }\n            return res;\n        } else {\n            // decode request.\n            Request req = new Request(id);\n            req.setVersion(Version.getProtocolVersion());\n            req.setTwoWay((flag & FLAG_TWOWAY) != 0);\n            //18位事件标记，0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包\n            if ((flag & FLAG_EVENT) != 0) {\n                req.setEvent(Request.HEARTBEAT_EVENT);\n            }\n            try {\n                //反序列化得到ObjectInput\n                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);\n                Object data;\n                if (req.isHeartbeat()) {\n                    data = decodeHeartbeatData(channel, in);\n                } else if (req.isEvent()) {\n                    data = decodeEventData(channel, in);\n                } else {\n                    data = decodeRequestData(channel, in);\n                }\n                req.setData(data);\n            } catch (Throwable t) {\n                // bad request\n                req.setBroken(true);\n                req.setData(t);\n            }\n            return req;\n        }\n    }\n\n    @Deprecated\n    protected Object decodeHeartbeatData(Channel channel, ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n    protected Object decodeEventData(Channel channel, ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n    protected Object decodeRequestData(ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n    protected Object decodeResponseData(ObjectInput in) throws IOException {\n        try {\n            return in.readObject();\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read object failed.\", e));\n        }\n    }\n```\n\n所有的decode方法都是调用`ObjectInput.readObject`。先看下`CodecSupport.deserialize`的源码。\n\n```java\npublic class CodecSupport {\n    private static Map<Byte, Serialization> ID_SERIALIZATION_MAP = new HashMap<Byte, Serialization>();\n    static {\n        Set<String> supportedExtensions = ExtensionLoader.getExtensionLoader(Serialization.class).getSupportedExtensions();\n        for (String name : supportedExtensions) {\n            Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name);\n            byte idByte = serialization.getContentTypeId();\n            if (ID_SERIALIZATION_MAP.containsKey(idByte)) {\n                logger.error(\"Serialization extension \" + serialization.getClass().getName()\n                        + \" has duplicate id to Serialization extension \"\n                        + ID_SERIALIZATION_MAP.get(idByte).getClass().getName()\n                        + \", ignore this Serialization extension\");\n                continue;\n            }\n            ID_SERIALIZATION_MAP.put(idByte, serialization);\n            ID_SERIALIZATIONNAME_MAP.put(idByte, name);\n        }\n    }\n    \n    public static Serialization getSerializationById(Byte id) {\n        return ID_SERIALIZATION_MAP.get(id);\n    }\n\n    public static Serialization getSerialization(URL url, Byte id) throws IOException {\n        Serialization serialization = getSerializationById(id);\n        String serializationName = url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION);\n        // Check if \"serialization id\" passed from network matches the id on this side(only take effect for JDK serialization), for security purpose.\n        if (serialization == null\n                || ((id == 3 || id == 7 || id == 4) && !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) {\n            throw new IOException(\"Unexpected serialization id:\" + id + \" received from network, please check if the peer send the right id.\");\n        }\n        return serialization;\n    }\n\n    public static ObjectInput deserialize(URL url, InputStream is, byte proto) throws IOException {\n        Serialization s = getSerialization(url, proto);\n        return s.deserialize(url, is);\n    }\n```\n\n`CodecSupport`主要是根据`proto`根据SPI找到对应的`Serialization`，然后调用`deserialize`方法返回`ObjectInput`对象。`Serialization`默认使用`hessian2`。`Serialization`不在深入分析。\n\n## 编码\n\n从`NettyCodecAdapter`的内部类`InternalEncoder`开始。\n\n```java\n    private class InternalEncoder extends MessageToByteEncoder {\n\n        @Override\n        protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {\n            com.alibaba.dubbo.remoting.buffer.ChannelBuffer buffer = new NettyBackedChannelBuffer(out);\n            Channel ch = ctx.channel();\n            NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);\n            try {\n                codec.encode(channel, buffer, msg);\n            } finally {\n                NettyChannel.removeChannelIfDisconnected(ch);\n            }\n        }\n    }\n```\n\n`InternalEncoder`调用`DubboCountCodec.encode`。\n\n```java\n    @Override\n    public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {\n        codec.encode(channel, buffer, msg);\n    }\n```\n\n`DubboCountCodec`调用`DubboCodec`的父类`ExchangeCodec`的`encode`方法。\n\n```java\n    @Override\n    public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {\n        if (msg instanceof Request) {\n            encodeRequest(channel, buffer, (Request) msg);\n        } else if (msg instanceof Response) {\n            encodeResponse(channel, buffer, (Response) msg);\n        } else {\n            super.encode(channel, buffer, msg);\n        }\n    }\n    \n    protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException {\n        //获取序列化对象\n        Serialization serialization = getSerialization(channel);\n        // header.\n        byte[] header = new byte[HEADER_LENGTH];\n        // set magic number.\n        Bytes.short2bytes(MAGIC, header);\n\n        // set request and serialization flag.\n        header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId());\n\n        if (req.isTwoWay()) header[2] |= FLAG_TWOWAY;\n        if (req.isEvent()) header[2] |= FLAG_EVENT;\n\n        // set request id.\n        Bytes.long2bytes(req.getId(), header, 4);\n\n        // encode request data.\n        int savedWriteIndex = buffer.writerIndex();\n        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);\n        ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer);\n        ObjectOutput out = serialization.serialize(channel.getUrl(), bos);\n        if (req.isEvent()) {\n            encodeEventData(channel, out, req.getData());\n        } else {\n            encodeRequestData(channel, out, req.getData(), req.getVersion());\n        }\n        out.flushBuffer();\n        if (out instanceof Cleanable) {\n            ((Cleanable) out).cleanup();\n        }\n        bos.flush();\n        bos.close();\n        int len = bos.writtenBytes();\n        checkPayload(channel, len);\n        Bytes.int2bytes(len, header, 12);\n\n        // write\n        buffer.writerIndex(savedWriteIndex);\n        buffer.writeBytes(header); // write header.\n        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);\n    }\n```\n\n编码过程其实是解码的逆向过程，而且没有了粘包拆包的处理，代码更为简单。`encodeResponse`方法的代码和`encodeRequest`没有太大差别，就不细写了。\nDubbo编解码过程讲解结束。\n\n\n","slug":"2019-07-14-Dubbo系列-编解码","published":1,"updated":"2019-07-15T02:21:25.162Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a100011fyt284o32u2","content":"<h1 id=\"Dubbo系列-编解码\"><a href=\"#Dubbo系列-编解码\" class=\"headerlink\" title=\"Dubbo系列 - 编解码\"></a>Dubbo系列 - 编解码</h1><p>在分析请求编码逻辑之前，我们先来看一下 Dubbo 数据包结构。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79ly1g4zavo80qwj310k0ckmz8.jpg\" alt=\"\"></p>\n<p>Dubbo 数据包分为消息头和消息体，消息头用于存储一些元信息，比如魔数（Magic），数据包类型（Request/Response），消息体长度（Data Length）等。消息体中用于存储具体的调用消息，比如方法名称，参数列表等。下面简单列举一下消息头的内容。</p>\n<table>\n<thead>\n<tr>\n<th>偏移量(Bit)</th>\n<th>字段</th>\n<th>取值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 ~ 7</td>\n<td>魔数高位</td>\n<td>0xda00</td>\n</tr>\n<tr>\n<td>8 ~ 15</td>\n<td>魔数低位</td>\n<td>0xbb</td>\n</tr>\n<tr>\n<td>16</td>\n<td>数据包类型</td>\n<td>0 - Response, 1 - Request</td>\n</tr>\n<tr>\n<td>17</td>\n<td>调用方式</td>\n<td>仅在第16位被设为1的情况下有效，0 - 单向调用，1 - 双向调用</td>\n</tr>\n<tr>\n<td>18</td>\n<td>事件标识</td>\n<td>0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包</td>\n</tr>\n<tr>\n<td>19 ~ 23</td>\n<td>序列化器编号</td>\n<td>2 - Hessian2Serialization 3 - JavaSerialization 4 - CompactedJavaSerialization 6 - FastJsonSerialization 7 - NativeJavaSerialization 8 - KryoSerialization 9 - FstSerialization</td>\n</tr>\n<tr>\n<td>24 ~ 31</td>\n<td>状态</td>\n<td>20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE……</td>\n</tr>\n<tr>\n<td>32 ~ 95</td>\n<td>请求编号</td>\n<td>共8字节，运行时生成</td>\n</tr>\n<tr>\n<td>96 ~ 127</td>\n<td>消息体长度</td>\n<td>运行时计算</td>\n</tr>\n</tbody></table>\n<p>还是从<code>NettyServer</code>开始：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bootstrap.group(bossGroup, workerGroup)</span><br><span class=\"line\">        .channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">TCP_NODELAY</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">SO_REUSEADDR</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">ALLOCATOR</span>, <span class=\"title\">PooledByteBufAllocator</span>.<span class=\"title\">DEFAULT</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childHandler</span>(<span class=\"title\">new</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">NioSocketChannel</span>&gt;() </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(NioSocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                NettyCodecAdapter adapter = <span class=\"keyword\">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                ch.pipeline()<span class=\"comment\">//.addLast(\"logging\",new LoggingHandler(LogLevel.INFO))//for debug</span></span><br><span class=\"line\">                        .addLast(<span class=\"string\">\"decoder\"</span>, adapter.getDecoder())</span><br><span class=\"line\">                        .addLast(<span class=\"string\">\"encoder\"</span>, adapter.getEncoder())</span><br><span class=\"line\">                        .addLast(<span class=\"string\">\"handler\"</span>, nettyServerHandler);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到编码和解码主要是调用<code>NettyCodecAdapter</code>里的<code>decoder</code>和<code>encoder</code>。</p>\n<p><code>NettyCodecAdapter</code>里有两个内部类<code>InternalEncoder</code>和<code>InternalDecoder</code>，我们先从解码开始。</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf input, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelBuffer message = <span class=\"keyword\">new</span> NettyBackedChannelBuffer(input);</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class=\"line\">        Object msg;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> saveReaderIndex;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// decode object.</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                saveReaderIndex = message.readerIndex();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    msg = codec.decode(channel, message);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msg == Codec2.DecodeResult.NEED_MORE_INPUT) &#123;</span><br><span class=\"line\">                    message.readerIndex(saveReaderIndex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//is it possible to go here ?</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (saveReaderIndex == message.readerIndex()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Decode without read data.\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        out.add(msg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (message.readable());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>InternalDecoder</code>通过调<code>codec.decode</code>来进行解码，这里的<code>codec</code>是<code>DubboCountCodec</code>实例。再看看<code>DubboCountCodec</code>的<code>decode</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">decode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> save = buffer.readerIndex();</span><br><span class=\"line\">    MultiMessage result = MultiMessage.create();</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        Object obj = codec.decode(channel, buffer);</span><br><span class=\"line\">        <span class=\"comment\">//如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Codec2.DecodeResult.NEED_MORE_INPUT == obj) &#123;</span><br><span class=\"line\">            buffer.readerIndex(save);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.addMessage(obj);</span><br><span class=\"line\">            <span class=\"comment\">//记录消息长度</span></span><br><span class=\"line\">            logMessageLength(obj, buffer.readerIndex() - save);</span><br><span class=\"line\">            save = buffer.readerIndex();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Codec2.DecodeResult.NEED_MORE_INPUT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.size() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logMessageLength</span><span class=\"params\">(Object result, <span class=\"keyword\">int</span> bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bytes &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ((RpcInvocation) ((Request) result).getData()).setAttachment(</span><br><span class=\"line\">                    Constants.INPUT_KEY, String.valueOf(bytes));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* ignore */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ((RpcResult) ((Response) result).getResult()).setAttachment(</span><br><span class=\"line\">                    Constants.OUTPUT_KEY, String.valueOf(bytes));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* ignore */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DubboCountCodec</code>调用<code>ExchangeCodec.decode</code>来进行解码，并处理tcp粘包拆包的情况。下面看<code>ExchangeCodec.decode</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExchangeCodec</span> <span class=\"keyword\">extends</span> <span class=\"title\">TelnetCodec</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// header length.</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HEADER_LENGTH = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"comment\">// magic header.</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> MAGIC = (<span class=\"keyword\">short</span>) <span class=\"number\">0xdabb</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> MAGIC_HIGH = Bytes.short2bytes(MAGIC)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> MAGIC_LOW = Bytes.short2bytes(MAGIC)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// message flag.</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> FLAG_REQUEST = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x80</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> FLAG_TWOWAY = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x40</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> FLAG_EVENT = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SERIALIZATION_MASK = <span class=\"number\">0x1f</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">decode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> readable = buffer.readableBytes();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] header = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[Math.min(readable, HEADER_LENGTH)];</span><br><span class=\"line\">        <span class=\"comment\">//读取16个字节的头，也就是128位的长度</span></span><br><span class=\"line\">        buffer.readBytes(header);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> decode(channel, buffer, readable, header);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, <span class=\"keyword\">int</span> readable, <span class=\"keyword\">byte</span>[] header)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先检查魔数，如果头两个字节不是魔数且后面也找不到魔数，这调用父类TelnetCodec的decode方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readable &gt; <span class=\"number\">0</span> &amp;&amp; header[<span class=\"number\">0</span>] != MAGIC_HIGH</span><br><span class=\"line\">                || readable &gt; <span class=\"number\">1</span> &amp;&amp; header[<span class=\"number\">1</span>] != MAGIC_LOW) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> length = header.length;</span><br><span class=\"line\">            <span class=\"comment\">//将所有数据读到header中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (header.length &lt; readable) &#123;</span><br><span class=\"line\">                header = Bytes.copyOf(header, readable);</span><br><span class=\"line\">                buffer.readBytes(header, length, readable - length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//一直往后去找魔数，如果找到的话，将指针指回到魔数开始的位置？？？</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; header.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (header[i] == MAGIC_HIGH &amp;&amp; header[i + <span class=\"number\">1</span>] == MAGIC_LOW) &#123;</span><br><span class=\"line\">                    buffer.readerIndex(buffer.readerIndex() - header.length + i);</span><br><span class=\"line\">                    header = Bytes.copyOf(header, i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 通过 telnet 命令行发送的数据包不包含消息头，所以这里</span></span><br><span class=\"line\">            <span class=\"comment\">// 调用 TelnetCodec 的 decode 方法对数据包进行解码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.decode(channel, buffer, readable, header);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果可读的数据少于头的长度，则返回NEED_MORE_INPUT继续等待数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readable &lt; HEADER_LENGTH) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从12个字节开始读取4个字节，最为body的长度。即96位到128位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = Bytes.bytes2int(header, <span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"comment\">//检查body长度是否过大，默认8M</span></span><br><span class=\"line\">        checkPayload(channel, len);</span><br><span class=\"line\">        <span class=\"comment\">//如果总长度大于可读的长度，返回NEED_MORE_INPUT</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tt = len + HEADER_LENGTH;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readable &lt; tt) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// limit input stream.</span></span><br><span class=\"line\">        ChannelBufferInputStream is = <span class=\"keyword\">new</span> ChannelBufferInputStream(buffer, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> decodeBody(channel, is, header);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (is.available() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">                        logger.warn(<span class=\"string\">\"Skip input stream \"</span> + is.available());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    StreamUtils.skipUnusedStream(is);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    logger.warn(e.getMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeBody</span><span class=\"params\">(Channel channel, InputStream is, <span class=\"keyword\">byte</span>[] header)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取第3个字节，即16~23位。proto为19 ~ 23的序列化器编号</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span> flag = header[<span class=\"number\">2</span>], proto = (<span class=\"keyword\">byte</span>) (flag &amp; SERIALIZATION_MASK);</span><br><span class=\"line\">        <span class=\"comment\">// 32 ~ 95 读取ID</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> id = Bytes.bytes2long(header, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">//读取第16位数据包类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((flag &amp; FLAG_REQUEST) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// decode response.</span></span><br><span class=\"line\">            Response res = <span class=\"keyword\">new</span> Response(id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((flag &amp; FLAG_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// get status.</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span> status = header[<span class=\"number\">3</span>];</span><br><span class=\"line\">            res.setStatus(status);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status == Response.OK) &#123;</span><br><span class=\"line\">                    Object data;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res.isHeartbeat()) &#123;</span><br><span class=\"line\">                        data = decodeHeartbeatData(channel, in);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.isEvent()) &#123;</span><br><span class=\"line\">                        data = decodeEventData(channel, in);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        data = decodeResponseData(channel, in, getRequestData(id));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    res.setResult(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.setErrorMessage(in.readUTF());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                res.setStatus(Response.CLIENT_ERROR);</span><br><span class=\"line\">                res.setErrorMessage(StringUtils.toString(t));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// decode request.</span></span><br><span class=\"line\">            Request req = <span class=\"keyword\">new</span> Request(id);</span><br><span class=\"line\">            req.setVersion(Version.getProtocolVersion());</span><br><span class=\"line\">            req.setTwoWay((flag &amp; FLAG_TWOWAY) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">//18位事件标记，0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((flag &amp; FLAG_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                req.setEvent(Request.HEARTBEAT_EVENT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//反序列化得到ObjectInput</span></span><br><span class=\"line\">                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);</span><br><span class=\"line\">                Object data;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (req.isHeartbeat()) &#123;</span><br><span class=\"line\">                    data = decodeHeartbeatData(channel, in);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.isEvent()) &#123;</span><br><span class=\"line\">                    data = decodeEventData(channel, in);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    data = decodeRequestData(channel, in);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                req.setData(data);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// bad request</span></span><br><span class=\"line\">                req.setBroken(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                req.setData(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> req;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeHeartbeatData</span><span class=\"params\">(Channel channel, ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeEventData</span><span class=\"params\">(Channel channel, ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeRequestData</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeResponseData</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的decode方法都是调用<code>ObjectInput.readObject</code>。先看下<code>CodecSupport.deserialize</code>的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodecSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Byte, Serialization&gt; ID_SERIALIZATION_MAP = <span class=\"keyword\">new</span> HashMap&lt;Byte, Serialization&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; supportedExtensions = ExtensionLoader.getExtensionLoader(Serialization<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getSupportedExtensions</span>()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : supportedExtensions) &#123;</span><br><span class=\"line\">            Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getExtension</span>(<span class=\"title\">name</span>)</span>;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span> idByte = serialization.getContentTypeId();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ID_SERIALIZATION_MAP.containsKey(idByte)) &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"Serialization extension \"</span> + serialization.getClass().getName()</span><br><span class=\"line\">                        + <span class=\"string\">\" has duplicate id to Serialization extension \"</span></span><br><span class=\"line\">                        + ID_SERIALIZATION_MAP.get(idByte).getClass().getName()</span><br><span class=\"line\">                        + <span class=\"string\">\", ignore this Serialization extension\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ID_SERIALIZATION_MAP.put(idByte, serialization);</span><br><span class=\"line\">            ID_SERIALIZATIONNAME_MAP.put(idByte, name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Serialization <span class=\"title\">getSerializationById</span><span class=\"params\">(Byte id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID_SERIALIZATION_MAP.get(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Serialization <span class=\"title\">getSerialization</span><span class=\"params\">(URL url, Byte id)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Serialization serialization = getSerializationById(id);</span><br><span class=\"line\">        String serializationName = url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION);</span><br><span class=\"line\">        <span class=\"comment\">// Check if \"serialization id\" passed from network matches the id on this side(only take effect for JDK serialization), for security purpose.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serialization == <span class=\"keyword\">null</span></span><br><span class=\"line\">                || ((id == <span class=\"number\">3</span> || id == <span class=\"number\">7</span> || id == <span class=\"number\">4</span>) &amp;&amp; !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Unexpected serialization id:\"</span> + id + <span class=\"string\">\" received from network, please check if the peer send the right id.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serialization;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ObjectInput <span class=\"title\">deserialize</span><span class=\"params\">(URL url, InputStream is, <span class=\"keyword\">byte</span> proto)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Serialization s = getSerialization(url, proto);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.deserialize(url, is);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CodecSupport</code>主要是根据<code>proto</code>根据SPI找到对应的<code>Serialization</code>，然后调用<code>deserialize</code>方法返回<code>ObjectInput</code>对象。<code>Serialization</code>默认使用<code>hessian2</code>。<code>Serialization</code>不在深入分析。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>从<code>NettyCodecAdapter</code>的内部类<code>InternalEncoder</code>开始。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToByteEncoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg, ByteBuf out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        com.alibaba.dubbo.remoting.buffer.ChannelBuffer buffer = <span class=\"keyword\">new</span> NettyBackedChannelBuffer(out);</span><br><span class=\"line\">        Channel ch = ctx.channel();</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            codec.encode(channel, buffer, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>InternalEncoder</code>调用<code>DubboCountCodec.encode</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, Object msg)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    codec.encode(channel, buffer, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DubboCountCodec</code>调用<code>DubboCodec</code>的父类<code>ExchangeCodec</code>的<code>encode</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, Object msg)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">        encodeRequest(channel, buffer, (Request) msg);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">        encodeResponse(channel, buffer, (Response) msg);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.encode(channel, buffer, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encodeRequest</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, Request req)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取序列化对象</span></span><br><span class=\"line\">    Serialization serialization = getSerialization(channel);</span><br><span class=\"line\">    <span class=\"comment\">// header.</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] header = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[HEADER_LENGTH];</span><br><span class=\"line\">    <span class=\"comment\">// set magic number.</span></span><br><span class=\"line\">    Bytes.short2bytes(MAGIC, header);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set request and serialization flag.</span></span><br><span class=\"line\">    header[<span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>) (FLAG_REQUEST | serialization.getContentTypeId());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.isTwoWay()) header[<span class=\"number\">2</span>] |= FLAG_TWOWAY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.isEvent()) header[<span class=\"number\">2</span>] |= FLAG_EVENT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set request id.</span></span><br><span class=\"line\">    Bytes.long2bytes(req.getId(), header, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// encode request data.</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> savedWriteIndex = buffer.writerIndex();</span><br><span class=\"line\">    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);</span><br><span class=\"line\">    ChannelBufferOutputStream bos = <span class=\"keyword\">new</span> ChannelBufferOutputStream(buffer);</span><br><span class=\"line\">    ObjectOutput out = serialization.serialize(channel.getUrl(), bos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.isEvent()) &#123;</span><br><span class=\"line\">        encodeEventData(channel, out, req.getData());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        encodeRequestData(channel, out, req.getData(), req.getVersion());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.flushBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out <span class=\"keyword\">instanceof</span> Cleanable) &#123;</span><br><span class=\"line\">        ((Cleanable) out).cleanup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bos.flush();</span><br><span class=\"line\">    bos.close();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = bos.writtenBytes();</span><br><span class=\"line\">    checkPayload(channel, len);</span><br><span class=\"line\">    Bytes.int2bytes(len, header, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// write</span></span><br><span class=\"line\">    buffer.writerIndex(savedWriteIndex);</span><br><span class=\"line\">    buffer.writeBytes(header); <span class=\"comment\">// write header.</span></span><br><span class=\"line\">    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编码过程其实是解码的逆向过程，而且没有了粘包拆包的处理，代码更为简单。<code>encodeResponse</code>方法的代码和<code>encodeRequest</code>没有太大差别，就不细写了。<br>Dubbo编解码过程讲解结束。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dubbo系列-编解码\"><a href=\"#Dubbo系列-编解码\" class=\"headerlink\" title=\"Dubbo系列 - 编解码\"></a>Dubbo系列 - 编解码</h1><p>在分析请求编码逻辑之前，我们先来看一下 Dubbo 数据包结构。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79ly1g4zavo80qwj310k0ckmz8.jpg\" alt=\"\"></p>\n<p>Dubbo 数据包分为消息头和消息体，消息头用于存储一些元信息，比如魔数（Magic），数据包类型（Request/Response），消息体长度（Data Length）等。消息体中用于存储具体的调用消息，比如方法名称，参数列表等。下面简单列举一下消息头的内容。</p>\n<table>\n<thead>\n<tr>\n<th>偏移量(Bit)</th>\n<th>字段</th>\n<th>取值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 ~ 7</td>\n<td>魔数高位</td>\n<td>0xda00</td>\n</tr>\n<tr>\n<td>8 ~ 15</td>\n<td>魔数低位</td>\n<td>0xbb</td>\n</tr>\n<tr>\n<td>16</td>\n<td>数据包类型</td>\n<td>0 - Response, 1 - Request</td>\n</tr>\n<tr>\n<td>17</td>\n<td>调用方式</td>\n<td>仅在第16位被设为1的情况下有效，0 - 单向调用，1 - 双向调用</td>\n</tr>\n<tr>\n<td>18</td>\n<td>事件标识</td>\n<td>0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包</td>\n</tr>\n<tr>\n<td>19 ~ 23</td>\n<td>序列化器编号</td>\n<td>2 - Hessian2Serialization 3 - JavaSerialization 4 - CompactedJavaSerialization 6 - FastJsonSerialization 7 - NativeJavaSerialization 8 - KryoSerialization 9 - FstSerialization</td>\n</tr>\n<tr>\n<td>24 ~ 31</td>\n<td>状态</td>\n<td>20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE……</td>\n</tr>\n<tr>\n<td>32 ~ 95</td>\n<td>请求编号</td>\n<td>共8字节，运行时生成</td>\n</tr>\n<tr>\n<td>96 ~ 127</td>\n<td>消息体长度</td>\n<td>运行时计算</td>\n</tr>\n</tbody></table>\n<p>还是从<code>NettyServer</code>开始：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bootstrap.group(bossGroup, workerGroup)</span><br><span class=\"line\">        .channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">TCP_NODELAY</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">SO_REUSEADDR</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">ALLOCATOR</span>, <span class=\"title\">PooledByteBufAllocator</span>.<span class=\"title\">DEFAULT</span>)</span></span><br><span class=\"line\"><span class=\"class\">        .<span class=\"title\">childHandler</span>(<span class=\"title\">new</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">NioSocketChannel</span>&gt;() </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(NioSocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                NettyCodecAdapter adapter = <span class=\"keyword\">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                ch.pipeline()<span class=\"comment\">//.addLast(\"logging\",new LoggingHandler(LogLevel.INFO))//for debug</span></span><br><span class=\"line\">                        .addLast(<span class=\"string\">\"decoder\"</span>, adapter.getDecoder())</span><br><span class=\"line\">                        .addLast(<span class=\"string\">\"encoder\"</span>, adapter.getEncoder())</span><br><span class=\"line\">                        .addLast(<span class=\"string\">\"handler\"</span>, nettyServerHandler);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到编码和解码主要是调用<code>NettyCodecAdapter</code>里的<code>decoder</code>和<code>encoder</code>。</p>\n<p><code>NettyCodecAdapter</code>里有两个内部类<code>InternalEncoder</code>和<code>InternalDecoder</code>，我们先从解码开始。</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf input, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelBuffer message = <span class=\"keyword\">new</span> NettyBackedChannelBuffer(input);</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class=\"line\">        Object msg;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> saveReaderIndex;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// decode object.</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                saveReaderIndex = message.readerIndex();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    msg = codec.decode(channel, message);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msg == Codec2.DecodeResult.NEED_MORE_INPUT) &#123;</span><br><span class=\"line\">                    message.readerIndex(saveReaderIndex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//is it possible to go here ?</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (saveReaderIndex == message.readerIndex()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Decode without read data.\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        out.add(msg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (message.readable());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>InternalDecoder</code>通过调<code>codec.decode</code>来进行解码，这里的<code>codec</code>是<code>DubboCountCodec</code>实例。再看看<code>DubboCountCodec</code>的<code>decode</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">decode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> save = buffer.readerIndex();</span><br><span class=\"line\">    MultiMessage result = MultiMessage.create();</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        Object obj = codec.decode(channel, buffer);</span><br><span class=\"line\">        <span class=\"comment\">//如果返回NEED_MORE_INPUT，跳出循环并将指针复位，等待数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Codec2.DecodeResult.NEED_MORE_INPUT == obj) &#123;</span><br><span class=\"line\">            buffer.readerIndex(save);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.addMessage(obj);</span><br><span class=\"line\">            <span class=\"comment\">//记录消息长度</span></span><br><span class=\"line\">            logMessageLength(obj, buffer.readerIndex() - save);</span><br><span class=\"line\">            save = buffer.readerIndex();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Codec2.DecodeResult.NEED_MORE_INPUT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.size() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logMessageLength</span><span class=\"params\">(Object result, <span class=\"keyword\">int</span> bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bytes &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ((RpcInvocation) ((Request) result).getData()).setAttachment(</span><br><span class=\"line\">                    Constants.INPUT_KEY, String.valueOf(bytes));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* ignore */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ((RpcResult) ((Response) result).getResult()).setAttachment(</span><br><span class=\"line\">                    Constants.OUTPUT_KEY, String.valueOf(bytes));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* ignore */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DubboCountCodec</code>调用<code>ExchangeCodec.decode</code>来进行解码，并处理tcp粘包拆包的情况。下面看<code>ExchangeCodec.decode</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExchangeCodec</span> <span class=\"keyword\">extends</span> <span class=\"title\">TelnetCodec</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// header length.</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HEADER_LENGTH = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"comment\">// magic header.</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> MAGIC = (<span class=\"keyword\">short</span>) <span class=\"number\">0xdabb</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> MAGIC_HIGH = Bytes.short2bytes(MAGIC)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> MAGIC_LOW = Bytes.short2bytes(MAGIC)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// message flag.</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> FLAG_REQUEST = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x80</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> FLAG_TWOWAY = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x40</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> FLAG_EVENT = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SERIALIZATION_MASK = <span class=\"number\">0x1f</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">decode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> readable = buffer.readableBytes();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] header = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[Math.min(readable, HEADER_LENGTH)];</span><br><span class=\"line\">        <span class=\"comment\">//读取16个字节的头，也就是128位的长度</span></span><br><span class=\"line\">        buffer.readBytes(header);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> decode(channel, buffer, readable, header);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, <span class=\"keyword\">int</span> readable, <span class=\"keyword\">byte</span>[] header)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先检查魔数，如果头两个字节不是魔数且后面也找不到魔数，这调用父类TelnetCodec的decode方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readable &gt; <span class=\"number\">0</span> &amp;&amp; header[<span class=\"number\">0</span>] != MAGIC_HIGH</span><br><span class=\"line\">                || readable &gt; <span class=\"number\">1</span> &amp;&amp; header[<span class=\"number\">1</span>] != MAGIC_LOW) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> length = header.length;</span><br><span class=\"line\">            <span class=\"comment\">//将所有数据读到header中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (header.length &lt; readable) &#123;</span><br><span class=\"line\">                header = Bytes.copyOf(header, readable);</span><br><span class=\"line\">                buffer.readBytes(header, length, readable - length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//一直往后去找魔数，如果找到的话，将指针指回到魔数开始的位置？？？</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; header.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (header[i] == MAGIC_HIGH &amp;&amp; header[i + <span class=\"number\">1</span>] == MAGIC_LOW) &#123;</span><br><span class=\"line\">                    buffer.readerIndex(buffer.readerIndex() - header.length + i);</span><br><span class=\"line\">                    header = Bytes.copyOf(header, i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 通过 telnet 命令行发送的数据包不包含消息头，所以这里</span></span><br><span class=\"line\">            <span class=\"comment\">// 调用 TelnetCodec 的 decode 方法对数据包进行解码</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.decode(channel, buffer, readable, header);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果可读的数据少于头的长度，则返回NEED_MORE_INPUT继续等待数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readable &lt; HEADER_LENGTH) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//从12个字节开始读取4个字节，最为body的长度。即96位到128位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = Bytes.bytes2int(header, <span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"comment\">//检查body长度是否过大，默认8M</span></span><br><span class=\"line\">        checkPayload(channel, len);</span><br><span class=\"line\">        <span class=\"comment\">//如果总长度大于可读的长度，返回NEED_MORE_INPUT</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tt = len + HEADER_LENGTH;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (readable &lt; tt) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// limit input stream.</span></span><br><span class=\"line\">        ChannelBufferInputStream is = <span class=\"keyword\">new</span> ChannelBufferInputStream(buffer, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> decodeBody(channel, is, header);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (is.available() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">                        logger.warn(<span class=\"string\">\"Skip input stream \"</span> + is.available());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    StreamUtils.skipUnusedStream(is);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    logger.warn(e.getMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeBody</span><span class=\"params\">(Channel channel, InputStream is, <span class=\"keyword\">byte</span>[] header)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取第3个字节，即16~23位。proto为19 ~ 23的序列化器编号</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span> flag = header[<span class=\"number\">2</span>], proto = (<span class=\"keyword\">byte</span>) (flag &amp; SERIALIZATION_MASK);</span><br><span class=\"line\">        <span class=\"comment\">// 32 ~ 95 读取ID</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> id = Bytes.bytes2long(header, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">//读取第16位数据包类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((flag &amp; FLAG_REQUEST) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// decode response.</span></span><br><span class=\"line\">            Response res = <span class=\"keyword\">new</span> Response(id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((flag &amp; FLAG_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// get status.</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span> status = header[<span class=\"number\">3</span>];</span><br><span class=\"line\">            res.setStatus(status);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status == Response.OK) &#123;</span><br><span class=\"line\">                    Object data;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res.isHeartbeat()) &#123;</span><br><span class=\"line\">                        data = decodeHeartbeatData(channel, in);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.isEvent()) &#123;</span><br><span class=\"line\">                        data = decodeEventData(channel, in);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        data = decodeResponseData(channel, in, getRequestData(id));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    res.setResult(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.setErrorMessage(in.readUTF());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                res.setStatus(Response.CLIENT_ERROR);</span><br><span class=\"line\">                res.setErrorMessage(StringUtils.toString(t));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// decode request.</span></span><br><span class=\"line\">            Request req = <span class=\"keyword\">new</span> Request(id);</span><br><span class=\"line\">            req.setVersion(Version.getProtocolVersion());</span><br><span class=\"line\">            req.setTwoWay((flag &amp; FLAG_TWOWAY) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">//18位事件标记，0 - 当前数据包是请求或响应包，1 - 当前数据包是心跳包</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((flag &amp; FLAG_EVENT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                req.setEvent(Request.HEARTBEAT_EVENT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//反序列化得到ObjectInput</span></span><br><span class=\"line\">                ObjectInput in = CodecSupport.deserialize(channel.getUrl(), is, proto);</span><br><span class=\"line\">                Object data;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (req.isHeartbeat()) &#123;</span><br><span class=\"line\">                    data = decodeHeartbeatData(channel, in);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.isEvent()) &#123;</span><br><span class=\"line\">                    data = decodeEventData(channel, in);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    data = decodeRequestData(channel, in);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                req.setData(data);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// bad request</span></span><br><span class=\"line\">                req.setBroken(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                req.setData(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> req;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeHeartbeatData</span><span class=\"params\">(Channel channel, ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeEventData</span><span class=\"params\">(Channel channel, ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeRequestData</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">decodeResponseData</span><span class=\"params\">(ObjectInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(StringUtils.toString(<span class=\"string\">\"Read object failed.\"</span>, e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的decode方法都是调用<code>ObjectInput.readObject</code>。先看下<code>CodecSupport.deserialize</code>的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodecSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Byte, Serialization&gt; ID_SERIALIZATION_MAP = <span class=\"keyword\">new</span> HashMap&lt;Byte, Serialization&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; supportedExtensions = ExtensionLoader.getExtensionLoader(Serialization<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getSupportedExtensions</span>()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : supportedExtensions) &#123;</span><br><span class=\"line\">            Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getExtension</span>(<span class=\"title\">name</span>)</span>;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span> idByte = serialization.getContentTypeId();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ID_SERIALIZATION_MAP.containsKey(idByte)) &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"Serialization extension \"</span> + serialization.getClass().getName()</span><br><span class=\"line\">                        + <span class=\"string\">\" has duplicate id to Serialization extension \"</span></span><br><span class=\"line\">                        + ID_SERIALIZATION_MAP.get(idByte).getClass().getName()</span><br><span class=\"line\">                        + <span class=\"string\">\", ignore this Serialization extension\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ID_SERIALIZATION_MAP.put(idByte, serialization);</span><br><span class=\"line\">            ID_SERIALIZATIONNAME_MAP.put(idByte, name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Serialization <span class=\"title\">getSerializationById</span><span class=\"params\">(Byte id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID_SERIALIZATION_MAP.get(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Serialization <span class=\"title\">getSerialization</span><span class=\"params\">(URL url, Byte id)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Serialization serialization = getSerializationById(id);</span><br><span class=\"line\">        String serializationName = url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION);</span><br><span class=\"line\">        <span class=\"comment\">// Check if \"serialization id\" passed from network matches the id on this side(only take effect for JDK serialization), for security purpose.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serialization == <span class=\"keyword\">null</span></span><br><span class=\"line\">                || ((id == <span class=\"number\">3</span> || id == <span class=\"number\">7</span> || id == <span class=\"number\">4</span>) &amp;&amp; !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Unexpected serialization id:\"</span> + id + <span class=\"string\">\" received from network, please check if the peer send the right id.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serialization;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ObjectInput <span class=\"title\">deserialize</span><span class=\"params\">(URL url, InputStream is, <span class=\"keyword\">byte</span> proto)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Serialization s = getSerialization(url, proto);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.deserialize(url, is);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CodecSupport</code>主要是根据<code>proto</code>根据SPI找到对应的<code>Serialization</code>，然后调用<code>deserialize</code>方法返回<code>ObjectInput</code>对象。<code>Serialization</code>默认使用<code>hessian2</code>。<code>Serialization</code>不在深入分析。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>从<code>NettyCodecAdapter</code>的内部类<code>InternalEncoder</code>开始。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToByteEncoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg, ByteBuf out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        com.alibaba.dubbo.remoting.buffer.ChannelBuffer buffer = <span class=\"keyword\">new</span> NettyBackedChannelBuffer(out);</span><br><span class=\"line\">        Channel ch = ctx.channel();</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            codec.encode(channel, buffer, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>InternalEncoder</code>调用<code>DubboCountCodec.encode</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, Object msg)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    codec.encode(channel, buffer, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DubboCountCodec</code>调用<code>DubboCodec</code>的父类<code>ExchangeCodec</code>的<code>encode</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, Object msg)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">        encodeRequest(channel, buffer, (Request) msg);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">        encodeResponse(channel, buffer, (Response) msg);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.encode(channel, buffer, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encodeRequest</span><span class=\"params\">(Channel channel, ChannelBuffer buffer, Request req)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取序列化对象</span></span><br><span class=\"line\">    Serialization serialization = getSerialization(channel);</span><br><span class=\"line\">    <span class=\"comment\">// header.</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] header = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[HEADER_LENGTH];</span><br><span class=\"line\">    <span class=\"comment\">// set magic number.</span></span><br><span class=\"line\">    Bytes.short2bytes(MAGIC, header);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set request and serialization flag.</span></span><br><span class=\"line\">    header[<span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>) (FLAG_REQUEST | serialization.getContentTypeId());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.isTwoWay()) header[<span class=\"number\">2</span>] |= FLAG_TWOWAY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.isEvent()) header[<span class=\"number\">2</span>] |= FLAG_EVENT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set request id.</span></span><br><span class=\"line\">    Bytes.long2bytes(req.getId(), header, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// encode request data.</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> savedWriteIndex = buffer.writerIndex();</span><br><span class=\"line\">    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);</span><br><span class=\"line\">    ChannelBufferOutputStream bos = <span class=\"keyword\">new</span> ChannelBufferOutputStream(buffer);</span><br><span class=\"line\">    ObjectOutput out = serialization.serialize(channel.getUrl(), bos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.isEvent()) &#123;</span><br><span class=\"line\">        encodeEventData(channel, out, req.getData());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        encodeRequestData(channel, out, req.getData(), req.getVersion());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.flushBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out <span class=\"keyword\">instanceof</span> Cleanable) &#123;</span><br><span class=\"line\">        ((Cleanable) out).cleanup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bos.flush();</span><br><span class=\"line\">    bos.close();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = bos.writtenBytes();</span><br><span class=\"line\">    checkPayload(channel, len);</span><br><span class=\"line\">    Bytes.int2bytes(len, header, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// write</span></span><br><span class=\"line\">    buffer.writerIndex(savedWriteIndex);</span><br><span class=\"line\">    buffer.writeBytes(header); <span class=\"comment\">// write header.</span></span><br><span class=\"line\">    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编码过程其实是解码的逆向过程，而且没有了粘包拆包的处理，代码更为简单。<code>encodeResponse</code>方法的代码和<code>encodeRequest</code>没有太大差别，就不细写了。<br>Dubbo编解码过程讲解结束。</p>\n"},{"layout":"post","title":"Dubbo系列-SPI源码解析","date":"2019-07-12T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# Dubbo系列-SPI源码解析\nDubbo SPI是解析Dubbo源码的基础，几乎所有的机制都是从SPI上扩展出来的。换个方面说，Dubbo的所以功能都能扩展，遵循了开闭原则，值得我们学习。\n\nDubbo SPI扩展点的来源和解析参考官方文档：\n[https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html](https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html)\n\n这里有2个核心注解：\n\n* @SPI，写在接口上，表明这个接口个扩展点。\n* @Adaptive，写在接口的方法上，在使用**getAdaptiveExtension**方法获得实例时，获得的对象不是真实的对象，以Protocol为例，获得的是Protocol$Adaptive对象。在调用过程中，根据url再来判断需要调用具体的哪个实例。\n\n\n```java\npublic class DubboTest {\n    @Test\n    public void test1() {\n        ExtensionLoader<Protocol> extensionLoader = ExtensionLoader.getExtensionLoader(Protocol.class);\n        Protocol dubboProtocol = extensionLoader.getExtension(\"dubbo\");\n        Protocol adaptiveProtocol = extensionLoader.getAdaptiveExtension();\n    }\n}\n```\n\nSPI的源码解析从这3行开始。\n\n#### ExtensionLoader初始化\n\n\n\n```java\npublic static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n        if (type == null)\n            throw new IllegalArgumentException(\"Extension type == null\");\n        //判断是否是接口\n        if (!type.isInterface()) {\n            throw new IllegalArgumentException(\"Extension type(\" + type + \") is not interface!\");\n        }\n        //判断是否有SPI注解\n        if (!withExtensionAnnotation(type)) {\n            throw new IllegalArgumentException(\"Extension type(\" + type +\n                    \") is not extension, because WITHOUT @\" + SPI.class.getSimpleName() + \" Annotation!\");\n        }\n\n        //初始化ExtensionLoader\n        ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        if (loader == null) {\n            EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));\n            loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        }\n        return loader;\n    }\n```\n\n#### getExtension\n再看**getExtension**方法\n\n```java\npublic T getExtension(String name) {\n        if (name == null || name.length() == 0)\n            throw new IllegalArgumentException(\"Extension name == null\");\n        if (\"true\".equals(name)) {\n            return getDefaultExtension();\n        }\n        //不知道为什么需要外面包一层holder\n        Holder<Object> holder = cachedInstances.get(name);\n        if (holder == null) {\n            cachedInstances.putIfAbsent(name, new Holder<Object>());\n            holder = cachedInstances.get(name);\n        }\n        //创建extension。\n        //dubbo源码里有着大量的单例初始化。\n        Object instance = holder.get();\n        if (instance == null) {\n            synchronized (holder) {\n                instance = holder.get();\n                if (instance == null) {\n                    instance = createExtension(name);\n                    holder.set(instance);\n                }\n            }\n        }\n        return (T) instance;\n    }\n```\n\n看**createExtension**方法\n\n```java\nprivate T createExtension(String name) {\n        Class<?> clazz = getExtensionClasses().get(name);\n        if (clazz == null) {\n            throw findException(name);\n        }\n        try {\n            T instance = (T) EXTENSION_INSTANCES.get(clazz);\n            if (instance == null) {\n                EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());\n                instance = (T) EXTENSION_INSTANCES.get(clazz);\n            }\n            //dubbo的IOC注入\n            injectExtension(instance);\n            //在dubbo的初始化过程中，如果继承SPI的类含有一个构造函数，且改构造函数有一个参数，认为是封装类。将wrapper类包在真实的类外面。\n            Set<Class<?>> wrapperClasses = cachedWrapperClasses;\n            if (wrapperClasses != null && !wrapperClasses.isEmpty()) {\n                for (Class<?> wrapperClass : wrapperClasses) {\n                    instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n                }\n            }\n            return instance;\n        } catch (Throwable t) {\n            throw new IllegalStateException(\"Extension instance(name: \" + name + \", class: \" +\n                    type + \")  could not be instantiated: \" + t.getMessage(), t);\n        }\n    }\n```\n\n\n\n#### getAdaptiveExtension\n\n我们看getAdaptiveExtension的源码\n\n```java\nprivate T createAdaptiveExtension() {\n        try {\n            return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Can not create adaptive extension \" + type + \", cause: \" + e.getMessage(), e);\n        }\n    }\n```\n可以看到从**getAdaptiveExtensionClass**方法获得class对象，然后再实例化和IOC注入。\n\n```java\nprivate Class<?> createAdaptiveExtensionClass() {\n        //根据adaptive注解，动态生成Adaptive类代码。\n        String code = createAdaptiveExtensionClassCode();\n        ClassLoader classLoader = findClassLoader();\n        //编译代码\n        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n        return compiler.compile(code, classLoader);\n    }\n```\n\n已protocol为例，最后生成的Protocol$Adaptive代码如下：\n\n```java\n\npackage com.alibaba.dubbo.rpc;\n\nimport com.alibaba.dubbo.common.extension.ExtensionLoader;\n\n\npublic class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {\n    public void destroy() {\n        throw new UnsupportedOperationException(\n            \"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\");\n    }\n\n    public int getDefaultPort() {\n        throw new UnsupportedOperationException(\n            \"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\");\n    }\n\n    public com.alibaba.dubbo.rpc.Exporter export(\n        com.alibaba.dubbo.rpc.Invoker arg0)\n        throws com.alibaba.dubbo.rpc.RpcException {\n        if (arg0 == null) {\n            throw new IllegalArgumentException(\n                \"com.alibaba.dubbo.rpc.Invoker argument == null\");\n        }\n\n        if (arg0.getUrl() == null) {\n            throw new IllegalArgumentException(\n                \"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null\");\n        }\n\n        com.alibaba.dubbo.common.URL url = arg0.getUrl();\n        String extName = ((url.getProtocol() == null) ? \"dubbo\"\n                                                      : url.getProtocol());\n\n        if (extName == null) {\n            throw new IllegalStateException(\n                \"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\" +\n                url.toString() + \") use keys([protocol])\");\n        }\n\n        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class)\n                                                                                                   .getExtension(extName);\n\n        return extension.export(arg0);\n    }\n\n    public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0,\n        com.alibaba.dubbo.common.URL arg1)\n        throws com.alibaba.dubbo.rpc.RpcException {\n        if (arg1 == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n\n        com.alibaba.dubbo.common.URL url = arg1;\n        String extName = ((url.getProtocol() == null) ? \"dubbo\"\n                                                      : url.getProtocol());\n\n        if (extName == null) {\n            throw new IllegalStateException(\n                \"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\" +\n                url.toString() + \") use keys([protocol])\");\n        }\n\n        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class)\n                                                                                                   .getExtension(extName);\n\n        return extension.refer(arg0, arg1);\n    }\n}\n\n```\n\n至此，Dubbo的SPI源码分析到此完毕。\n","source":"_posts/2019-07-13-Dubbo系列SPI源码解析.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列-SPI源码解析\"\ndate:       2019-07-13\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# Dubbo系列-SPI源码解析\nDubbo SPI是解析Dubbo源码的基础，几乎所有的机制都是从SPI上扩展出来的。换个方面说，Dubbo的所以功能都能扩展，遵循了开闭原则，值得我们学习。\n\nDubbo SPI扩展点的来源和解析参考官方文档：\n[https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html](https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html)\n\n这里有2个核心注解：\n\n* @SPI，写在接口上，表明这个接口个扩展点。\n* @Adaptive，写在接口的方法上，在使用**getAdaptiveExtension**方法获得实例时，获得的对象不是真实的对象，以Protocol为例，获得的是Protocol$Adaptive对象。在调用过程中，根据url再来判断需要调用具体的哪个实例。\n\n\n```java\npublic class DubboTest {\n    @Test\n    public void test1() {\n        ExtensionLoader<Protocol> extensionLoader = ExtensionLoader.getExtensionLoader(Protocol.class);\n        Protocol dubboProtocol = extensionLoader.getExtension(\"dubbo\");\n        Protocol adaptiveProtocol = extensionLoader.getAdaptiveExtension();\n    }\n}\n```\n\nSPI的源码解析从这3行开始。\n\n#### ExtensionLoader初始化\n\n\n\n```java\npublic static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n        if (type == null)\n            throw new IllegalArgumentException(\"Extension type == null\");\n        //判断是否是接口\n        if (!type.isInterface()) {\n            throw new IllegalArgumentException(\"Extension type(\" + type + \") is not interface!\");\n        }\n        //判断是否有SPI注解\n        if (!withExtensionAnnotation(type)) {\n            throw new IllegalArgumentException(\"Extension type(\" + type +\n                    \") is not extension, because WITHOUT @\" + SPI.class.getSimpleName() + \" Annotation!\");\n        }\n\n        //初始化ExtensionLoader\n        ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        if (loader == null) {\n            EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));\n            loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        }\n        return loader;\n    }\n```\n\n#### getExtension\n再看**getExtension**方法\n\n```java\npublic T getExtension(String name) {\n        if (name == null || name.length() == 0)\n            throw new IllegalArgumentException(\"Extension name == null\");\n        if (\"true\".equals(name)) {\n            return getDefaultExtension();\n        }\n        //不知道为什么需要外面包一层holder\n        Holder<Object> holder = cachedInstances.get(name);\n        if (holder == null) {\n            cachedInstances.putIfAbsent(name, new Holder<Object>());\n            holder = cachedInstances.get(name);\n        }\n        //创建extension。\n        //dubbo源码里有着大量的单例初始化。\n        Object instance = holder.get();\n        if (instance == null) {\n            synchronized (holder) {\n                instance = holder.get();\n                if (instance == null) {\n                    instance = createExtension(name);\n                    holder.set(instance);\n                }\n            }\n        }\n        return (T) instance;\n    }\n```\n\n看**createExtension**方法\n\n```java\nprivate T createExtension(String name) {\n        Class<?> clazz = getExtensionClasses().get(name);\n        if (clazz == null) {\n            throw findException(name);\n        }\n        try {\n            T instance = (T) EXTENSION_INSTANCES.get(clazz);\n            if (instance == null) {\n                EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());\n                instance = (T) EXTENSION_INSTANCES.get(clazz);\n            }\n            //dubbo的IOC注入\n            injectExtension(instance);\n            //在dubbo的初始化过程中，如果继承SPI的类含有一个构造函数，且改构造函数有一个参数，认为是封装类。将wrapper类包在真实的类外面。\n            Set<Class<?>> wrapperClasses = cachedWrapperClasses;\n            if (wrapperClasses != null && !wrapperClasses.isEmpty()) {\n                for (Class<?> wrapperClass : wrapperClasses) {\n                    instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n                }\n            }\n            return instance;\n        } catch (Throwable t) {\n            throw new IllegalStateException(\"Extension instance(name: \" + name + \", class: \" +\n                    type + \")  could not be instantiated: \" + t.getMessage(), t);\n        }\n    }\n```\n\n\n\n#### getAdaptiveExtension\n\n我们看getAdaptiveExtension的源码\n\n```java\nprivate T createAdaptiveExtension() {\n        try {\n            return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Can not create adaptive extension \" + type + \", cause: \" + e.getMessage(), e);\n        }\n    }\n```\n可以看到从**getAdaptiveExtensionClass**方法获得class对象，然后再实例化和IOC注入。\n\n```java\nprivate Class<?> createAdaptiveExtensionClass() {\n        //根据adaptive注解，动态生成Adaptive类代码。\n        String code = createAdaptiveExtensionClassCode();\n        ClassLoader classLoader = findClassLoader();\n        //编译代码\n        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n        return compiler.compile(code, classLoader);\n    }\n```\n\n已protocol为例，最后生成的Protocol$Adaptive代码如下：\n\n```java\n\npackage com.alibaba.dubbo.rpc;\n\nimport com.alibaba.dubbo.common.extension.ExtensionLoader;\n\n\npublic class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {\n    public void destroy() {\n        throw new UnsupportedOperationException(\n            \"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\");\n    }\n\n    public int getDefaultPort() {\n        throw new UnsupportedOperationException(\n            \"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\");\n    }\n\n    public com.alibaba.dubbo.rpc.Exporter export(\n        com.alibaba.dubbo.rpc.Invoker arg0)\n        throws com.alibaba.dubbo.rpc.RpcException {\n        if (arg0 == null) {\n            throw new IllegalArgumentException(\n                \"com.alibaba.dubbo.rpc.Invoker argument == null\");\n        }\n\n        if (arg0.getUrl() == null) {\n            throw new IllegalArgumentException(\n                \"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null\");\n        }\n\n        com.alibaba.dubbo.common.URL url = arg0.getUrl();\n        String extName = ((url.getProtocol() == null) ? \"dubbo\"\n                                                      : url.getProtocol());\n\n        if (extName == null) {\n            throw new IllegalStateException(\n                \"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\" +\n                url.toString() + \") use keys([protocol])\");\n        }\n\n        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class)\n                                                                                                   .getExtension(extName);\n\n        return extension.export(arg0);\n    }\n\n    public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0,\n        com.alibaba.dubbo.common.URL arg1)\n        throws com.alibaba.dubbo.rpc.RpcException {\n        if (arg1 == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n\n        com.alibaba.dubbo.common.URL url = arg1;\n        String extName = ((url.getProtocol() == null) ? \"dubbo\"\n                                                      : url.getProtocol());\n\n        if (extName == null) {\n            throw new IllegalStateException(\n                \"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\" +\n                url.toString() + \") use keys([protocol])\");\n        }\n\n        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class)\n                                                                                                   .getExtension(extName);\n\n        return extension.refer(arg0, arg1);\n    }\n}\n\n```\n\n至此，Dubbo的SPI源码分析到此完毕。\n","slug":"2019-07-13-Dubbo系列SPI源码解析","published":1,"updated":"2019-07-15T01:45:19.323Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a200021fytdkgyayfa","content":"<h1 id=\"Dubbo系列-SPI源码解析\"><a href=\"#Dubbo系列-SPI源码解析\" class=\"headerlink\" title=\"Dubbo系列-SPI源码解析\"></a>Dubbo系列-SPI源码解析</h1><p>Dubbo SPI是解析Dubbo源码的基础，几乎所有的机制都是从SPI上扩展出来的。换个方面说，Dubbo的所以功能都能扩展，遵循了开闭原则，值得我们学习。</p>\n<p>Dubbo SPI扩展点的来源和解析参考官方文档：<br><a href=\"https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html\" target=\"_blank\" rel=\"noopener\">https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html</a></p>\n<p>这里有2个核心注解：</p>\n<ul>\n<li>@SPI，写在接口上，表明这个接口个扩展点。</li>\n<li>@Adaptive，写在接口的方法上，在使用<strong>getAdaptiveExtension</strong>方法获得实例时，获得的对象不是真实的对象，以Protocol为例，获得的是Protocol$Adaptive对象。在调用过程中，根据url再来判断需要调用具体的哪个实例。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ExtensionLoader&lt;Protocol&gt; extensionLoader = ExtensionLoader.getExtensionLoader(Protocol<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        Protocol dubboProtocol = extensionLoader.getExtension(<span class=\"string\">\"dubbo\"</span>);</span><br><span class=\"line\">        Protocol adaptiveProtocol = extensionLoader.getAdaptiveExtension();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SPI的源码解析从这3行开始。</p>\n<h4 id=\"ExtensionLoader初始化\"><a href=\"#ExtensionLoader初始化\" class=\"headerlink\" title=\"ExtensionLoader初始化\"></a>ExtensionLoader初始化</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">ExtensionLoader&lt;T&gt; <span class=\"title\">getExtensionLoader</span><span class=\"params\">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension type == null\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是接口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!type.isInterface()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension type(\"</span> + type + <span class=\"string\">\") is not interface!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有SPI注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!withExtensionAnnotation(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension type(\"</span> + type +</span><br><span class=\"line\">                    \") is not extension, because WITHOUT @\" + SPI.class.getSimpleName() + \" Annotation!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化ExtensionLoader</span></span><br><span class=\"line\">        ExtensionLoader&lt;T&gt; loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EXTENSION_LOADERS.putIfAbsent(type, <span class=\"keyword\">new</span> ExtensionLoader&lt;T&gt;(type));</span><br><span class=\"line\">            loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loader;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getExtension\"><a href=\"#getExtension\" class=\"headerlink\" title=\"getExtension\"></a>getExtension</h4><p>再看<strong>getExtension</strong>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getExtension</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span> || name.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension name == null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"true\"</span>.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDefaultExtension();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//不知道为什么需要外面包一层holder</span></span><br><span class=\"line\">        Holder&lt;Object&gt; holder = cachedInstances.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (holder == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cachedInstances.putIfAbsent(name, <span class=\"keyword\">new</span> Holder&lt;Object&gt;());</span><br><span class=\"line\">            holder = cachedInstances.get(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建extension。</span></span><br><span class=\"line\">        <span class=\"comment\">//dubbo源码里有着大量的单例初始化。</span></span><br><span class=\"line\">        Object instance = holder.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (holder) &#123;</span><br><span class=\"line\">                instance = holder.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = createExtension(name);</span><br><span class=\"line\">                    holder.set(instance);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>看<strong>createExtension</strong>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">createExtension</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> findException(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());</span><br><span class=\"line\">                instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//dubbo的IOC注入</span></span><br><span class=\"line\">            injectExtension(instance);</span><br><span class=\"line\">            <span class=\"comment\">//在dubbo的初始化过程中，如果继承SPI的类含有一个构造函数，且改构造函数有一个参数，认为是封装类。将wrapper类包在真实的类外面。</span></span><br><span class=\"line\">            Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wrapperClasses != <span class=\"keyword\">null</span> &amp;&amp; !wrapperClasses.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class=\"line\">                    instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Extension instance(name: \"</span> + name + <span class=\"string\">\", class: \"</span> +</span><br><span class=\"line\">                    type + <span class=\"string\">\")  could not be instantiated: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"getAdaptiveExtension\"><a href=\"#getAdaptiveExtension\" class=\"headerlink\" title=\"getAdaptiveExtension\"></a>getAdaptiveExtension</h4><p>我们看getAdaptiveExtension的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">createAdaptiveExtension</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Can not create adaptive extension \"</span> + type + <span class=\"string\">\", cause: \"</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到从<strong>getAdaptiveExtensionClass</strong>方法获得class对象，然后再实例化和IOC注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据adaptive注解，动态生成Adaptive类代码。</span></span><br><span class=\"line\">        String code = createAdaptiveExtensionClassCode();</span><br><span class=\"line\">        ClassLoader classLoader = findClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">//编译代码</span></span><br><span class=\"line\">        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getAdaptiveExtension</span>()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compiler.compile(code, classLoader);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>已protocol为例，最后生成的Protocol$Adaptive代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.dubbo.rpc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Protocol</span>$<span class=\"title\">Adaptive</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">alibaba</span>.<span class=\"title\">dubbo</span>.<span class=\"title\">rpc</span>.<span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">            <span class=\"string\">\"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultPort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">            <span class=\"string\">\"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> com.alibaba.dubbo.rpc.<span class=\"function\">Exporter <span class=\"title\">export</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        com.alibaba.dubbo.rpc.Invoker arg0)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg0 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                <span class=\"string\">\"com.alibaba.dubbo.rpc.Invoker argument == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg0.getUrl() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                <span class=\"string\">\"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class=\"line\">        String extName = ((url.getProtocol() == <span class=\"keyword\">null</span>) ? <span class=\"string\">\"dubbo\"</span></span><br><span class=\"line\">                                                      : url.getProtocol());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (extName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\"</span> +</span><br><span class=\"line\">                url.toString() + <span class=\"string\">\") use keys([protocol])\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">                                                                                                   .<span class=\"title\">getExtension</span>(<span class=\"title\">extName</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> extension.export(arg0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> com.alibaba.dubbo.rpc.<span class=\"function\">Invoker <span class=\"title\">refer</span><span class=\"params\">(java.lang.Class arg0,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        com.alibaba.dubbo.common.URL arg1)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.common.URL url = arg1;</span><br><span class=\"line\">        String extName = ((url.getProtocol() == <span class=\"keyword\">null</span>) ? <span class=\"string\">\"dubbo\"</span></span><br><span class=\"line\">                                                      : url.getProtocol());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (extName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\"</span> +</span><br><span class=\"line\">                url.toString() + <span class=\"string\">\") use keys([protocol])\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">                                                                                                   .<span class=\"title\">getExtension</span>(<span class=\"title\">extName</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> extension.refer(arg0, arg1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，Dubbo的SPI源码分析到此完毕。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dubbo系列-SPI源码解析\"><a href=\"#Dubbo系列-SPI源码解析\" class=\"headerlink\" title=\"Dubbo系列-SPI源码解析\"></a>Dubbo系列-SPI源码解析</h1><p>Dubbo SPI是解析Dubbo源码的基础，几乎所有的机制都是从SPI上扩展出来的。换个方面说，Dubbo的所以功能都能扩展，遵循了开闭原则，值得我们学习。</p>\n<p>Dubbo SPI扩展点的来源和解析参考官方文档：<br><a href=\"https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html\" target=\"_blank\" rel=\"noopener\">https://dubbo.gitbooks.io/dubbo-dev-book/SPI.html</a></p>\n<p>这里有2个核心注解：</p>\n<ul>\n<li>@SPI，写在接口上，表明这个接口个扩展点。</li>\n<li>@Adaptive，写在接口的方法上，在使用<strong>getAdaptiveExtension</strong>方法获得实例时，获得的对象不是真实的对象，以Protocol为例，获得的是Protocol$Adaptive对象。在调用过程中，根据url再来判断需要调用具体的哪个实例。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ExtensionLoader&lt;Protocol&gt; extensionLoader = ExtensionLoader.getExtensionLoader(Protocol<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        Protocol dubboProtocol = extensionLoader.getExtension(<span class=\"string\">\"dubbo\"</span>);</span><br><span class=\"line\">        Protocol adaptiveProtocol = extensionLoader.getAdaptiveExtension();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SPI的源码解析从这3行开始。</p>\n<h4 id=\"ExtensionLoader初始化\"><a href=\"#ExtensionLoader初始化\" class=\"headerlink\" title=\"ExtensionLoader初始化\"></a>ExtensionLoader初始化</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">ExtensionLoader&lt;T&gt; <span class=\"title\">getExtensionLoader</span><span class=\"params\">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension type == null\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是接口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!type.isInterface()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension type(\"</span> + type + <span class=\"string\">\") is not interface!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有SPI注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!withExtensionAnnotation(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension type(\"</span> + type +</span><br><span class=\"line\">                    \") is not extension, because WITHOUT @\" + SPI.class.getSimpleName() + \" Annotation!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化ExtensionLoader</span></span><br><span class=\"line\">        ExtensionLoader&lt;T&gt; loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EXTENSION_LOADERS.putIfAbsent(type, <span class=\"keyword\">new</span> ExtensionLoader&lt;T&gt;(type));</span><br><span class=\"line\">            loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loader;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getExtension\"><a href=\"#getExtension\" class=\"headerlink\" title=\"getExtension\"></a>getExtension</h4><p>再看<strong>getExtension</strong>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getExtension</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span> || name.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Extension name == null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"true\"</span>.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDefaultExtension();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//不知道为什么需要外面包一层holder</span></span><br><span class=\"line\">        Holder&lt;Object&gt; holder = cachedInstances.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (holder == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cachedInstances.putIfAbsent(name, <span class=\"keyword\">new</span> Holder&lt;Object&gt;());</span><br><span class=\"line\">            holder = cachedInstances.get(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建extension。</span></span><br><span class=\"line\">        <span class=\"comment\">//dubbo源码里有着大量的单例初始化。</span></span><br><span class=\"line\">        Object instance = holder.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (holder) &#123;</span><br><span class=\"line\">                instance = holder.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = createExtension(name);</span><br><span class=\"line\">                    holder.set(instance);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>看<strong>createExtension</strong>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">createExtension</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> findException(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());</span><br><span class=\"line\">                instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//dubbo的IOC注入</span></span><br><span class=\"line\">            injectExtension(instance);</span><br><span class=\"line\">            <span class=\"comment\">//在dubbo的初始化过程中，如果继承SPI的类含有一个构造函数，且改构造函数有一个参数，认为是封装类。将wrapper类包在真实的类外面。</span></span><br><span class=\"line\">            Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wrapperClasses != <span class=\"keyword\">null</span> &amp;&amp; !wrapperClasses.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class=\"line\">                    instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Extension instance(name: \"</span> + name + <span class=\"string\">\", class: \"</span> +</span><br><span class=\"line\">                    type + <span class=\"string\">\")  could not be instantiated: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"getAdaptiveExtension\"><a href=\"#getAdaptiveExtension\" class=\"headerlink\" title=\"getAdaptiveExtension\"></a>getAdaptiveExtension</h4><p>我们看getAdaptiveExtension的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">createAdaptiveExtension</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Can not create adaptive extension \"</span> + type + <span class=\"string\">\", cause: \"</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到从<strong>getAdaptiveExtensionClass</strong>方法获得class对象，然后再实例化和IOC注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据adaptive注解，动态生成Adaptive类代码。</span></span><br><span class=\"line\">        String code = createAdaptiveExtensionClassCode();</span><br><span class=\"line\">        ClassLoader classLoader = findClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">//编译代码</span></span><br><span class=\"line\">        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getAdaptiveExtension</span>()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compiler.compile(code, classLoader);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>已protocol为例，最后生成的Protocol$Adaptive代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.dubbo.rpc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Protocol</span>$<span class=\"title\">Adaptive</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">alibaba</span>.<span class=\"title\">dubbo</span>.<span class=\"title\">rpc</span>.<span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">            <span class=\"string\">\"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultPort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">            <span class=\"string\">\"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> com.alibaba.dubbo.rpc.<span class=\"function\">Exporter <span class=\"title\">export</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        com.alibaba.dubbo.rpc.Invoker arg0)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg0 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                <span class=\"string\">\"com.alibaba.dubbo.rpc.Invoker argument == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg0.getUrl() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                <span class=\"string\">\"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class=\"line\">        String extName = ((url.getProtocol() == <span class=\"keyword\">null</span>) ? <span class=\"string\">\"dubbo\"</span></span><br><span class=\"line\">                                                      : url.getProtocol());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (extName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\"</span> +</span><br><span class=\"line\">                url.toString() + <span class=\"string\">\") use keys([protocol])\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">                                                                                                   .<span class=\"title\">getExtension</span>(<span class=\"title\">extName</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> extension.export(arg0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> com.alibaba.dubbo.rpc.<span class=\"function\">Invoker <span class=\"title\">refer</span><span class=\"params\">(java.lang.Class arg0,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        com.alibaba.dubbo.common.URL arg1)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.common.URL url = arg1;</span><br><span class=\"line\">        String extName = ((url.getProtocol() == <span class=\"keyword\">null</span>) ? <span class=\"string\">\"dubbo\"</span></span><br><span class=\"line\">                                                      : url.getProtocol());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (extName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(\"</span> +</span><br><span class=\"line\">                url.toString() + <span class=\"string\">\") use keys([protocol])\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">                                                                                                   .<span class=\"title\">getExtension</span>(<span class=\"title\">extName</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> extension.refer(arg0, arg1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，Dubbo的SPI源码分析到此完毕。</p>\n"},{"layout":"post","title":"Dubbo系列-心跳机制","date":"2019-08-05T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# Dubbo系列-心跳机制\n\n首先参考文章：[聊聊 TCP 长连接和心跳那些事](https://www.cnkirito.moe/tcp-talk/)\n\nTCP 中的 KeepAlive 机制：\n> KeepAlive 并不是 TCP 协议的一部分，但是大多数操作系统都实现了这个机制（所以需要在操作系统层面设置 KeepAlive 的相关参数）。KeepAlive 机制开启后，在一定时间内（一般时间为 7200s，参数 tcp_keepalive_time）在链路上没有数据传送的情况下，TCP 层将发送相应的 KeepAlive 探针以确定连接可用性，探测失败后重试 10（参数 tcp_keepalive_probes）次，每次间隔时间 75s（参数 tcp_keepalive_intvl），所有探测失败后，才认为当前连接已经不可用。\n\n既然操作系统已经做了KeepAlive，为什么我们要在应用层面做KeepAlive呢?主要体现在三个方面：\n\n* KeepAlive 的开关是在应用层开启的，但是具体参数（如重试测试，重试间隔时间）的设置却是操作系统级别的，位于操作系统的 /etc/sysctl.conf 配置中，这对于应用来说不够灵活。\n* KeepAlive 的保活机制只在链路空闲的情况下才会起到作用，假如此时有数据发送，且物理链路已经不通，操作系统这边的链路状态还是 ESTABLISHED，这时会发生什么？自然会走 TCP 重传机制，要知道默认的 TCP 超时重传，指数退避算法也是一个相当长的过程。\n* KeepAlive 本身是面向网络的，并不面向于应用，当连接不可用，可能是由于应用本身的 GC 频繁，系统 load 高等情况，但网络仍然是通的，此时，应用已经失去了活性，连接应该被认为是不可用的。\n\n## Dubbo的心跳机制\n\nDubbo的客户端和服务端都会进行心跳的检查，客户端在`HeaderExchangeClient`中开启，服务端在`HeaderExchangeServer`中开启。\n\n```java\npublic class HeaderExchangeClient implements ExchangeClient {\n    \n    private void startHeartbeatTimer() {\n        stopHeartbeatTimer();\n        if (heartbeat > 0) {\n            heartbeatTimer = scheduled.scheduleWithFixedDelay(\n                    new HeartBeatTask(new HeartBeatTask.ChannelProvider() {\n                        @Override\n                        public Collection<Channel> getChannels() {\n                            return Collections.<Channel>singletonList(HeaderExchangeClient.this);\n                        }\n                    }, heartbeat, heartbeatTimeout),\n                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);\n        }\n    }\n}\n```\n\n```java\npublic class HeaderExchangeServer implements ExchangeServer {\n    private void startHeartbeatTimer() {\n        stopHeartbeatTimer();\n        if (heartbeat > 0) {\n            heartbeatTimer = scheduled.scheduleWithFixedDelay(\n                    new HeartBeatTask(new HeartBeatTask.ChannelProvider() {\n                        @Override\n                        public Collection<Channel> getChannels() {\n                            return Collections.unmodifiableCollection(\n                                    HeaderExchangeServer.this.getChannels());\n                        }\n                    }, heartbeat, heartbeatTimeout),\n                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);\n        }\n    }\n}\n```\n\n客户端和服务端都是启动`HeartBeatTask`来进行心跳的任务。\n\n```java\nfinal class HeartBeatTask implements Runnable {\n    @Override\n    public void run() {\n        try {\n            //当前时间\n            long now = System.currentTimeMillis();\n            //循环所有的channel\n            for (Channel channel : channelProvider.getChannels()) {\n                if (channel.isClosed()) {\n                    continue;\n                }\n                try {\n                    //获得最近一次读数据的时间\n                    Long lastRead = (Long) channel.getAttribute(\n                            HeaderExchangeHandler.KEY_READ_TIMESTAMP);\n                    //最近一次写数据的时间\n                    Long lastWrite = (Long) channel.getAttribute(\n                            HeaderExchangeHandler.KEY_WRITE_TIMESTAMP);\n                    //写或者读的时间建个如果大于heartbeat的话，发送一个心跳包\n                    if ((lastRead != null && now - lastRead > heartbeat)\n                            || (lastWrite != null && now - lastWrite > heartbeat)) {\n                        Request req = new Request();\n                        req.setVersion(Version.getProtocolVersion());\n                        req.setTwoWay(true);\n                        req.setEvent(Request.HEARTBEAT_EVENT);\n                        channel.send(req);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Send heartbeat to remote channel \" + channel.getRemoteAddress()\n                                    + \", cause: The channel has no data-transmission exceeds a heartbeat period: \" + heartbeat + \"ms\");\n                        }\n                    }\n                    //写或者读的时间建个如果大于heartbeatTimeout的话，客户端重新连接，服务端断开连接\n                    if (lastRead != null && now - lastRead > heartbeatTimeout) {\n                        logger.warn(\"Close channel \" + channel\n                                + \", because heartbeat read idle time out: \" + heartbeatTimeout + \"ms\");\n                        if (channel instanceof Client) {\n                            try {\n                                ((Client) channel).reconnect();\n                            } catch (Exception e) {\n                                //do nothing\n                            }\n                        } else {\n                            channel.close();\n                        }\n                    }\n                } catch (Throwable t) {\n                    logger.warn(\"Exception when heartbeat to remote channel \" + channel.getRemoteAddress(), t);\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(\"Unhandled exception when heartbeat, cause: \" + t.getMessage(), t);\n        }\n    }\n}\n\n```\n\n其中`heartbeat`默认60*1000，`heartbeatTimeout`默认3倍的`heartbeat`，且`heartbeatTimeout`必须要大于2倍的`heartbeat`，否则启动会报错。\n\n","source":"_posts/2019-08-06-Dubbo系列-心跳机制.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列-心跳机制\"\ndate:       2019-08-06\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# Dubbo系列-心跳机制\n\n首先参考文章：[聊聊 TCP 长连接和心跳那些事](https://www.cnkirito.moe/tcp-talk/)\n\nTCP 中的 KeepAlive 机制：\n> KeepAlive 并不是 TCP 协议的一部分，但是大多数操作系统都实现了这个机制（所以需要在操作系统层面设置 KeepAlive 的相关参数）。KeepAlive 机制开启后，在一定时间内（一般时间为 7200s，参数 tcp_keepalive_time）在链路上没有数据传送的情况下，TCP 层将发送相应的 KeepAlive 探针以确定连接可用性，探测失败后重试 10（参数 tcp_keepalive_probes）次，每次间隔时间 75s（参数 tcp_keepalive_intvl），所有探测失败后，才认为当前连接已经不可用。\n\n既然操作系统已经做了KeepAlive，为什么我们要在应用层面做KeepAlive呢?主要体现在三个方面：\n\n* KeepAlive 的开关是在应用层开启的，但是具体参数（如重试测试，重试间隔时间）的设置却是操作系统级别的，位于操作系统的 /etc/sysctl.conf 配置中，这对于应用来说不够灵活。\n* KeepAlive 的保活机制只在链路空闲的情况下才会起到作用，假如此时有数据发送，且物理链路已经不通，操作系统这边的链路状态还是 ESTABLISHED，这时会发生什么？自然会走 TCP 重传机制，要知道默认的 TCP 超时重传，指数退避算法也是一个相当长的过程。\n* KeepAlive 本身是面向网络的，并不面向于应用，当连接不可用，可能是由于应用本身的 GC 频繁，系统 load 高等情况，但网络仍然是通的，此时，应用已经失去了活性，连接应该被认为是不可用的。\n\n## Dubbo的心跳机制\n\nDubbo的客户端和服务端都会进行心跳的检查，客户端在`HeaderExchangeClient`中开启，服务端在`HeaderExchangeServer`中开启。\n\n```java\npublic class HeaderExchangeClient implements ExchangeClient {\n    \n    private void startHeartbeatTimer() {\n        stopHeartbeatTimer();\n        if (heartbeat > 0) {\n            heartbeatTimer = scheduled.scheduleWithFixedDelay(\n                    new HeartBeatTask(new HeartBeatTask.ChannelProvider() {\n                        @Override\n                        public Collection<Channel> getChannels() {\n                            return Collections.<Channel>singletonList(HeaderExchangeClient.this);\n                        }\n                    }, heartbeat, heartbeatTimeout),\n                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);\n        }\n    }\n}\n```\n\n```java\npublic class HeaderExchangeServer implements ExchangeServer {\n    private void startHeartbeatTimer() {\n        stopHeartbeatTimer();\n        if (heartbeat > 0) {\n            heartbeatTimer = scheduled.scheduleWithFixedDelay(\n                    new HeartBeatTask(new HeartBeatTask.ChannelProvider() {\n                        @Override\n                        public Collection<Channel> getChannels() {\n                            return Collections.unmodifiableCollection(\n                                    HeaderExchangeServer.this.getChannels());\n                        }\n                    }, heartbeat, heartbeatTimeout),\n                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);\n        }\n    }\n}\n```\n\n客户端和服务端都是启动`HeartBeatTask`来进行心跳的任务。\n\n```java\nfinal class HeartBeatTask implements Runnable {\n    @Override\n    public void run() {\n        try {\n            //当前时间\n            long now = System.currentTimeMillis();\n            //循环所有的channel\n            for (Channel channel : channelProvider.getChannels()) {\n                if (channel.isClosed()) {\n                    continue;\n                }\n                try {\n                    //获得最近一次读数据的时间\n                    Long lastRead = (Long) channel.getAttribute(\n                            HeaderExchangeHandler.KEY_READ_TIMESTAMP);\n                    //最近一次写数据的时间\n                    Long lastWrite = (Long) channel.getAttribute(\n                            HeaderExchangeHandler.KEY_WRITE_TIMESTAMP);\n                    //写或者读的时间建个如果大于heartbeat的话，发送一个心跳包\n                    if ((lastRead != null && now - lastRead > heartbeat)\n                            || (lastWrite != null && now - lastWrite > heartbeat)) {\n                        Request req = new Request();\n                        req.setVersion(Version.getProtocolVersion());\n                        req.setTwoWay(true);\n                        req.setEvent(Request.HEARTBEAT_EVENT);\n                        channel.send(req);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Send heartbeat to remote channel \" + channel.getRemoteAddress()\n                                    + \", cause: The channel has no data-transmission exceeds a heartbeat period: \" + heartbeat + \"ms\");\n                        }\n                    }\n                    //写或者读的时间建个如果大于heartbeatTimeout的话，客户端重新连接，服务端断开连接\n                    if (lastRead != null && now - lastRead > heartbeatTimeout) {\n                        logger.warn(\"Close channel \" + channel\n                                + \", because heartbeat read idle time out: \" + heartbeatTimeout + \"ms\");\n                        if (channel instanceof Client) {\n                            try {\n                                ((Client) channel).reconnect();\n                            } catch (Exception e) {\n                                //do nothing\n                            }\n                        } else {\n                            channel.close();\n                        }\n                    }\n                } catch (Throwable t) {\n                    logger.warn(\"Exception when heartbeat to remote channel \" + channel.getRemoteAddress(), t);\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(\"Unhandled exception when heartbeat, cause: \" + t.getMessage(), t);\n        }\n    }\n}\n\n```\n\n其中`heartbeat`默认60*1000，`heartbeatTimeout`默认3倍的`heartbeat`，且`heartbeatTimeout`必须要大于2倍的`heartbeat`，否则启动会报错。\n\n","slug":"2019-08-06-Dubbo系列-心跳机制","published":1,"updated":"2019-08-06T06:37:50.133Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a300031fyt8gsa3u6m","content":"<h1 id=\"Dubbo系列-心跳机制\"><a href=\"#Dubbo系列-心跳机制\" class=\"headerlink\" title=\"Dubbo系列-心跳机制\"></a>Dubbo系列-心跳机制</h1><p>首先参考文章：<a href=\"https://www.cnkirito.moe/tcp-talk/\" target=\"_blank\" rel=\"noopener\">聊聊 TCP 长连接和心跳那些事</a></p>\n<p>TCP 中的 KeepAlive 机制：</p>\n<blockquote>\n<p>KeepAlive 并不是 TCP 协议的一部分，但是大多数操作系统都实现了这个机制（所以需要在操作系统层面设置 KeepAlive 的相关参数）。KeepAlive 机制开启后，在一定时间内（一般时间为 7200s，参数 tcp_keepalive_time）在链路上没有数据传送的情况下，TCP 层将发送相应的 KeepAlive 探针以确定连接可用性，探测失败后重试 10（参数 tcp_keepalive_probes）次，每次间隔时间 75s（参数 tcp_keepalive_intvl），所有探测失败后，才认为当前连接已经不可用。</p>\n</blockquote>\n<p>既然操作系统已经做了KeepAlive，为什么我们要在应用层面做KeepAlive呢?主要体现在三个方面：</p>\n<ul>\n<li>KeepAlive 的开关是在应用层开启的，但是具体参数（如重试测试，重试间隔时间）的设置却是操作系统级别的，位于操作系统的 /etc/sysctl.conf 配置中，这对于应用来说不够灵活。</li>\n<li>KeepAlive 的保活机制只在链路空闲的情况下才会起到作用，假如此时有数据发送，且物理链路已经不通，操作系统这边的链路状态还是 ESTABLISHED，这时会发生什么？自然会走 TCP 重传机制，要知道默认的 TCP 超时重传，指数退避算法也是一个相当长的过程。</li>\n<li>KeepAlive 本身是面向网络的，并不面向于应用，当连接不可用，可能是由于应用本身的 GC 频繁，系统 load 高等情况，但网络仍然是通的，此时，应用已经失去了活性，连接应该被认为是不可用的。</li>\n</ul>\n<h2 id=\"Dubbo的心跳机制\"><a href=\"#Dubbo的心跳机制\" class=\"headerlink\" title=\"Dubbo的心跳机制\"></a>Dubbo的心跳机制</h2><p>Dubbo的客户端和服务端都会进行心跳的检查，客户端在<code>HeaderExchangeClient</code>中开启，服务端在<code>HeaderExchangeServer</code>中开启。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderExchangeClient</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExchangeClient</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stopHeartbeatTimer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heartbeat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> HeartBeatTask(<span class=\"keyword\">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Channel&gt; <span class=\"title\">getChannels</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Collections.&lt;Channel&gt;singletonList(HeaderExchangeClient.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, heartbeat, heartbeatTimeout),</span><br><span class=\"line\">                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderExchangeServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExchangeServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stopHeartbeatTimer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heartbeat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> HeartBeatTask(<span class=\"keyword\">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Channel&gt; <span class=\"title\">getChannels</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Collections.unmodifiableCollection(</span><br><span class=\"line\">                                    HeaderExchangeServer.<span class=\"keyword\">this</span>.getChannels());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, heartbeat, heartbeatTimeout),</span><br><span class=\"line\">                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端和服务端都是启动<code>HeartBeatTask</code>来进行心跳的任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartBeatTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前时间</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> now = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"comment\">//循环所有的channel</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Channel channel : channelProvider.getChannels()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel.isClosed()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获得最近一次读数据的时间</span></span><br><span class=\"line\">                    Long lastRead = (Long) channel.getAttribute(</span><br><span class=\"line\">                            HeaderExchangeHandler.KEY_READ_TIMESTAMP);</span><br><span class=\"line\">                    <span class=\"comment\">//最近一次写数据的时间</span></span><br><span class=\"line\">                    Long lastWrite = (Long) channel.getAttribute(</span><br><span class=\"line\">                            HeaderExchangeHandler.KEY_WRITE_TIMESTAMP);</span><br><span class=\"line\">                    <span class=\"comment\">//写或者读的时间建个如果大于heartbeat的话，发送一个心跳包</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((lastRead != <span class=\"keyword\">null</span> &amp;&amp; now - lastRead &gt; heartbeat)</span><br><span class=\"line\">                            || (lastWrite != <span class=\"keyword\">null</span> &amp;&amp; now - lastWrite &gt; heartbeat)) &#123;</span><br><span class=\"line\">                        Request req = <span class=\"keyword\">new</span> Request();</span><br><span class=\"line\">                        req.setVersion(Version.getProtocolVersion());</span><br><span class=\"line\">                        req.setTwoWay(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        req.setEvent(Request.HEARTBEAT_EVENT);</span><br><span class=\"line\">                        channel.send(req);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                            logger.debug(<span class=\"string\">\"Send heartbeat to remote channel \"</span> + channel.getRemoteAddress()</span><br><span class=\"line\">                                    + <span class=\"string\">\", cause: The channel has no data-transmission exceeds a heartbeat period: \"</span> + heartbeat + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//写或者读的时间建个如果大于heartbeatTimeout的话，客户端重新连接，服务端断开连接</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lastRead != <span class=\"keyword\">null</span> &amp;&amp; now - lastRead &gt; heartbeatTimeout) &#123;</span><br><span class=\"line\">                        logger.warn(<span class=\"string\">\"Close channel \"</span> + channel</span><br><span class=\"line\">                                + <span class=\"string\">\", because heartbeat read idle time out: \"</span> + heartbeatTimeout + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (channel <span class=\"keyword\">instanceof</span> Client) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                ((Client) channel).reconnect();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            channel.close();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"Exception when heartbeat to remote channel \"</span> + channel.getRemoteAddress(), t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Unhandled exception when heartbeat, cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>heartbeat</code>默认60*1000，<code>heartbeatTimeout</code>默认3倍的<code>heartbeat</code>，且<code>heartbeatTimeout</code>必须要大于2倍的<code>heartbeat</code>，否则启动会报错。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dubbo系列-心跳机制\"><a href=\"#Dubbo系列-心跳机制\" class=\"headerlink\" title=\"Dubbo系列-心跳机制\"></a>Dubbo系列-心跳机制</h1><p>首先参考文章：<a href=\"https://www.cnkirito.moe/tcp-talk/\" target=\"_blank\" rel=\"noopener\">聊聊 TCP 长连接和心跳那些事</a></p>\n<p>TCP 中的 KeepAlive 机制：</p>\n<blockquote>\n<p>KeepAlive 并不是 TCP 协议的一部分，但是大多数操作系统都实现了这个机制（所以需要在操作系统层面设置 KeepAlive 的相关参数）。KeepAlive 机制开启后，在一定时间内（一般时间为 7200s，参数 tcp_keepalive_time）在链路上没有数据传送的情况下，TCP 层将发送相应的 KeepAlive 探针以确定连接可用性，探测失败后重试 10（参数 tcp_keepalive_probes）次，每次间隔时间 75s（参数 tcp_keepalive_intvl），所有探测失败后，才认为当前连接已经不可用。</p>\n</blockquote>\n<p>既然操作系统已经做了KeepAlive，为什么我们要在应用层面做KeepAlive呢?主要体现在三个方面：</p>\n<ul>\n<li>KeepAlive 的开关是在应用层开启的，但是具体参数（如重试测试，重试间隔时间）的设置却是操作系统级别的，位于操作系统的 /etc/sysctl.conf 配置中，这对于应用来说不够灵活。</li>\n<li>KeepAlive 的保活机制只在链路空闲的情况下才会起到作用，假如此时有数据发送，且物理链路已经不通，操作系统这边的链路状态还是 ESTABLISHED，这时会发生什么？自然会走 TCP 重传机制，要知道默认的 TCP 超时重传，指数退避算法也是一个相当长的过程。</li>\n<li>KeepAlive 本身是面向网络的，并不面向于应用，当连接不可用，可能是由于应用本身的 GC 频繁，系统 load 高等情况，但网络仍然是通的，此时，应用已经失去了活性，连接应该被认为是不可用的。</li>\n</ul>\n<h2 id=\"Dubbo的心跳机制\"><a href=\"#Dubbo的心跳机制\" class=\"headerlink\" title=\"Dubbo的心跳机制\"></a>Dubbo的心跳机制</h2><p>Dubbo的客户端和服务端都会进行心跳的检查，客户端在<code>HeaderExchangeClient</code>中开启，服务端在<code>HeaderExchangeServer</code>中开启。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderExchangeClient</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExchangeClient</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stopHeartbeatTimer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heartbeat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> HeartBeatTask(<span class=\"keyword\">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Channel&gt; <span class=\"title\">getChannels</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Collections.&lt;Channel&gt;singletonList(HeaderExchangeClient.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, heartbeat, heartbeatTimeout),</span><br><span class=\"line\">                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderExchangeServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExchangeServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stopHeartbeatTimer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heartbeat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> HeartBeatTask(<span class=\"keyword\">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Channel&gt; <span class=\"title\">getChannels</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> Collections.unmodifiableCollection(</span><br><span class=\"line\">                                    HeaderExchangeServer.<span class=\"keyword\">this</span>.getChannels());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, heartbeat, heartbeatTimeout),</span><br><span class=\"line\">                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端和服务端都是启动<code>HeartBeatTask</code>来进行心跳的任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartBeatTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前时间</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> now = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"comment\">//循环所有的channel</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Channel channel : channelProvider.getChannels()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel.isClosed()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获得最近一次读数据的时间</span></span><br><span class=\"line\">                    Long lastRead = (Long) channel.getAttribute(</span><br><span class=\"line\">                            HeaderExchangeHandler.KEY_READ_TIMESTAMP);</span><br><span class=\"line\">                    <span class=\"comment\">//最近一次写数据的时间</span></span><br><span class=\"line\">                    Long lastWrite = (Long) channel.getAttribute(</span><br><span class=\"line\">                            HeaderExchangeHandler.KEY_WRITE_TIMESTAMP);</span><br><span class=\"line\">                    <span class=\"comment\">//写或者读的时间建个如果大于heartbeat的话，发送一个心跳包</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((lastRead != <span class=\"keyword\">null</span> &amp;&amp; now - lastRead &gt; heartbeat)</span><br><span class=\"line\">                            || (lastWrite != <span class=\"keyword\">null</span> &amp;&amp; now - lastWrite &gt; heartbeat)) &#123;</span><br><span class=\"line\">                        Request req = <span class=\"keyword\">new</span> Request();</span><br><span class=\"line\">                        req.setVersion(Version.getProtocolVersion());</span><br><span class=\"line\">                        req.setTwoWay(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        req.setEvent(Request.HEARTBEAT_EVENT);</span><br><span class=\"line\">                        channel.send(req);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                            logger.debug(<span class=\"string\">\"Send heartbeat to remote channel \"</span> + channel.getRemoteAddress()</span><br><span class=\"line\">                                    + <span class=\"string\">\", cause: The channel has no data-transmission exceeds a heartbeat period: \"</span> + heartbeat + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//写或者读的时间建个如果大于heartbeatTimeout的话，客户端重新连接，服务端断开连接</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lastRead != <span class=\"keyword\">null</span> &amp;&amp; now - lastRead &gt; heartbeatTimeout) &#123;</span><br><span class=\"line\">                        logger.warn(<span class=\"string\">\"Close channel \"</span> + channel</span><br><span class=\"line\">                                + <span class=\"string\">\", because heartbeat read idle time out: \"</span> + heartbeatTimeout + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (channel <span class=\"keyword\">instanceof</span> Client) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                ((Client) channel).reconnect();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            channel.close();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"Exception when heartbeat to remote channel \"</span> + channel.getRemoteAddress(), t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Unhandled exception when heartbeat, cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>heartbeat</code>默认60*1000，<code>heartbeatTimeout</code>默认3倍的<code>heartbeat</code>，且<code>heartbeatTimeout</code>必须要大于2倍的<code>heartbeat</code>，否则启动会报错。</p>\n"},{"layout":"post","title":"Dubbo系列-服务端调用流程解析","date":"2019-07-12T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# dubbo系列（四）服务端调用流程解析\n\n[toc]\n\n## 流程解析\n\n通过服务暴露流程，我们知道了dubbo服务端暴露dubbo协议的服务是在DubboProtocol类中进行的。\n\n```java\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        URL url = invoker.getUrl();\n\n        //按照serviceKey，将DubboExporter存入map中\n        String key = serviceKey(url);\n        DubboExporter<T> exporter = new DubboExporter<T>(invoker, key, exporterMap);\n        exporterMap.put(key, exporter);\n\n\n        Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);\n        Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, false);\n        if (isStubSupportEvent && !isCallbackservice) {\n            String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);\n            if (stubServiceMethods == null || stubServiceMethods.length() == 0) {\n                if (logger.isWarnEnabled()) {\n                    logger.warn(new IllegalStateException(\"consumer [\" + url.getParameter(Constants.INTERFACE_KEY) +\n                            \"], has set stubproxy support event ,but no stub methods founded.\"));\n                }\n            } else {\n                stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);\n            }\n        }\n\n        //开启服务\n        openServer(url);\n        optimizeSerialization(url);\n        return exporter;\n    }\n\n    private void openServer(URL url) {\n        // find server.\n        String key = url.getAddress();\n        //client can export a service which's only for server to invoke\n        boolean isServer = url.getParameter(Constants.IS_SERVER_KEY, true);\n        if (isServer) {\n            ExchangeServer server = serverMap.get(key);\n            if (server == null) {\n                //如果服务没有启动的话，调用createService方法来启动服务。\n                //注意key是address，这里保证了一个address地址只会启动一次\n                serverMap.put(key, createServer(url));\n            } else {\n                // server supports reset, use together with override\n                server.reset(url);\n            }\n        }\n    }\n\n    private ExchangeServer createServer(URL url) {\n        // send readonly event when server closes, it's enabled by default\n        url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());\n        // enable heartbeat by default\n        url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));\n        //默认使用netty服务\n        String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n\n        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n            throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n\n        //这里写入默认的解码器参数\n        url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);\n        ExchangeServer server;\n        try {\n            //最后调用Exchangers的静态方法来启动服务.\n            server = Exchangers.bind(url, requestHandler);\n        } catch (RemotingException e) {\n            throw new RpcException(\"Fail to start server(url: \" + url + \") \" + e.getMessage(), e);\n        }\n        str = url.getParameter(Constants.CLIENT_KEY);\n        if (str != null && str.length() > 0) {\n            Set<String> supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();\n            if (!supportedTypes.contains(str)) {\n                throw new RpcException(\"Unsupported client type: \" + str);\n            }\n        }\n        return server;\n    }\n\n```\n我们这里先不管`Invoker`对象是做什么的，可以看到在暴露服务前，dubbo先将`invoker`对象封装进`DubboExporter`对象中，然后存到一个`map`对象里。在最后调用`bind`接口时，除了传入`url`外，还会传入`requestHandler`对象，我们先看下`requestHandler`对象是做什么的。\n\n\n```java\n    private ExchangeHandler requestHandler = new ExchangeHandlerAdapter() {\n\n        @Override\n        public Object reply(ExchangeChannel channel, Object message) throws RemotingException {\n            if (message instanceof Invocation) {\n                Invocation inv = (Invocation) message;\n                //从exporterMap中获取invoker对象\n                Invoker<?> invoker = getInvoker(channel, inv);\n                // need to consider backward-compatibility if it's a callback\n                if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) {\n                    String methodsStr = invoker.getUrl().getParameters().get(\"methods\");\n                    boolean hasMethod = false;\n                    if (methodsStr == null || methodsStr.indexOf(\",\") == -1) {\n                        hasMethod = inv.getMethodName().equals(methodsStr);\n                    } else {\n                        String[] methods = methodsStr.split(\",\");\n                        for (String method : methods) {\n                            if (inv.getMethodName().equals(method)) {\n                                hasMethod = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!hasMethod) {\n                        logger.warn(new IllegalStateException(\"The methodName \" + inv.getMethodName()\n                                + \" not found in callback service interface ,invoke will be ignored.\"\n                                + \" please update the api interface. url is:\"\n                                + invoker.getUrl()) + \" ,invocation is :\" + inv);\n                        return null;\n                    }\n                }\n                RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());\n                return invoker.invoke(inv);\n            }\n            throw new RemotingException(channel, \"Unsupported request: \"\n                    + (message == null ? null : (message.getClass().getName() + \": \" + message))\n                    + \", channel: consumer: \" + channel.getRemoteAddress() + \" --> provider: \" + channel.getLocalAddress());\n        }\n\n        @Override\n        public void received(Channel channel, Object message) throws RemotingException {\n            if (message instanceof Invocation) {\n                reply((ExchangeChannel) channel, message);\n            } else {\n                super.received(channel, message);\n            }\n        }\n\n        @Override\n        public void connected(Channel channel) throws RemotingException {\n            invoke(channel, Constants.ON_CONNECT_KEY);\n        }\n\n        @Override\n        public void disconnected(Channel channel) throws RemotingException {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"disconnected from \" + channel.getRemoteAddress() + \",url:\" + channel.getUrl());\n            }\n            invoke(channel, Constants.ON_DISCONNECT_KEY);\n        }\n\n        private void invoke(Channel channel, String methodKey) {\n            Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);\n            if (invocation != null) {\n                try {\n                    received(channel, invocation);\n                } catch (Throwable t) {\n                    logger.warn(\"Failed to invoke event method \" + invocation.getMethodName() + \"(), cause: \" + t.getMessage(), t);\n                }\n            }\n        }\n\n        private Invocation createInvocation(Channel channel, URL url, String methodKey) {\n            String method = url.getParameter(methodKey);\n            if (method == null || method.length() == 0) {\n                return null;\n            }\n            RpcInvocation invocation = new RpcInvocation(method, new Class<?>[0], new Object[0]);\n            invocation.setAttachment(Constants.PATH_KEY, url.getPath());\n            invocation.setAttachment(Constants.GROUP_KEY, url.getParameter(Constants.GROUP_KEY));\n            invocation.setAttachment(Constants.INTERFACE_KEY, url.getParameter(Constants.INTERFACE_KEY));\n            invocation.setAttachment(Constants.VERSION_KEY, url.getParameter(Constants.VERSION_KEY));\n            if (url.getParameter(Constants.STUB_EVENT_KEY, false)) {\n                invocation.setAttachment(Constants.STUB_EVENT_KEY, Boolean.TRUE.toString());\n            }\n            return invocation;\n        }\n    };\n```\n通过`requestHandler`的实现方法我们可以看到它主要用来处理各种请求回调，我们重点关注`reply`的回调方法，主要做了3件事情：\n1. 从exporterMap获取具体的invoker对象。\n2. 判断调用的method是否存在。\n3. 调用`invoker.invoke`。\n\n我们继续深入`Exchangers.bind`。\n\n```java\n    public static ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        url = url.addParameterIfAbsent(Constants.CODEC_KEY, \"exchange\");\n        return getExchanger(url).bind(url, handler);\n    }\n\n    public static Exchanger getExchanger(URL url) {\n        String type = url.getParameter(Constants.EXCHANGER_KEY, Constants.DEFAULT_EXCHANGER);\n        return getExchanger(type);\n    }\n\n    public static Exchanger getExchanger(String type) {\n        return ExtensionLoader.getExtensionLoader(Exchanger.class).getExtension(type);\n    }\n```\n\n`Exchangers.bind`主要做了2件事情：\n1. 获取`Exchanger`对象，这里根据SPI默认获取`HeaderExchanger`，实际上`Exchanger`也只有这么一个实现类。\n2. 调用`Exchanger`的`bind`方法，返回`ExchangeServer`对象。\n\n我们再看`HeaderExchanger`的`bind`代码。\n\n```java\n    @Override\n    public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {\n        return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))));\n    }\n```\n\n`HeaderExchanger` 主要3件事情：\n1. 封装`handler`对象，外面分别套了一个`HeaderExchangeHandler`和`DecodeHandler`。\n2. `Transporters.bind`开启服务，传入`url`和`ChannelHandler`两个参数，返回`Server`。\n3. 初始化`HeaderExchangeServer`对象并返回。\n\n我们先看`HeaderExchangeServer`做了什么事情。\n\n```java\n    public HeaderExchangeServer(Server server) {\n        if (server == null) {\n            throw new IllegalArgumentException(\"server == null\");\n        }\n        this.server = server;\n        this.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);\n        this.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3);\n        if (heartbeatTimeout < heartbeat * 2) {\n            throw new IllegalStateException(\"heartbeatTimeout < heartbeatInterval * 2\");\n        }\n        startHeartbeatTimer();\n    }\n\n    private void startHeartbeatTimer() {\n        stopHeartbeatTimer();\n        if (heartbeat > 0) {\n            heartbeatTimer = scheduled.scheduleWithFixedDelay(\n                    new HeartBeatTask(new HeartBeatTask.ChannelProvider() {\n                        @Override\n                        public Collection<Channel> getChannels() {\n                            return Collections.unmodifiableCollection(\n                                    HeaderExchangeServer.this.getChannels());\n                        }\n                    }, heartbeat, heartbeatTimeout),\n                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    private void stopHeartbeatTimer() {\n        try {\n            ScheduledFuture<?> timer = heartbeatTimer;\n            if (timer != null && !timer.isCancelled()) {\n                timer.cancel(true);\n            }\n        } catch (Throwable t) {\n            logger.warn(t.getMessage(), t);\n        } finally {\n            heartbeatTimer = null;\n        }\n    }\n\n    @Override\n    public void close() {\n        doClose();\n        server.close();\n    }\n\n    ...\n\n```\n\n`HeaderExchangeServer`主要是封装了server对象，并通过`ScheduledExecutorService`来定时向客户端发送心跳。心跳在这里不详细分析，我们继续深入`Transporters.bind`看服务是如何暴露的。\n\n```java\n    public static Server bind(URL url, ChannelHandler... handlers) throws RemotingException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handlers == null || handlers.length == 0) {\n            throw new IllegalArgumentException(\"handlers == null\");\n        }\n        ChannelHandler handler;\n        if (handlers.length == 1) {\n            handler = handlers[0];\n        } else {\n            handler = new ChannelHandlerDispatcher(handlers);\n        }\n        return getTransporter().bind(url, handler);\n    }\n\n    public static Transporter getTransporter() {\n        return ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension();\n    }\n```\n\n`Transporters.bind`主要做的两件事情：\n1. 通过`SPI`找到`Transporter`对象，这里默认使用`NettyTransporter`。\n2. 调用`NettyTransporter.bind`\n\n```java\n    @Override\n    public Server bind(URL url, ChannelHandler listener) throws RemotingException {\n        return new NettyServer(url, listener);\n    }\n```\n\n`NettyTransporter.bind`方法初始化了一个`NettyServer`。\n\n```java\n    public NettyServer(URL url, ChannelHandler handler) throws RemotingException {\n        //封装ChannelHandler，调用父类的初始化方法。最终会调到doOpen方法上。\n        super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));\n    }\n\n    @Override\n    protected void doOpen() throws Throwable {\n        bootstrap = new ServerBootstrap();\n        //一个boss线程和核数+1（最大不超过32）的worker线程\n        bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory(\"NettyServerBoss\", true));\n        workerGroup = new NioEventLoopGroup(getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS),\n                new DefaultThreadFactory(\"NettyServerWorker\", true));\n\n        final NettyServerHandler nettyServerHandler = new NettyServerHandler(getUrl(), this);\n        channels = nettyServerHandler.getChannels();\n\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                //禁用nagle算法，防止粘包\n                .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)\n                //允许重复使用本地地址和端口\n                .childOption(ChannelOption.SO_REUSEADDR, Boolean.TRUE)\n                //ByteBuf分配器\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .childHandler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        //根据之前写入的codec，getCodec()默认获取DubboCountCodec\n                        NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this);\n                        ch.pipeline()\n                                .addLast(\"decoder\", adapter.getDecoder())\n                                .addLast(\"encoder\", adapter.getEncoder())\n                                .addLast(\"handler\", nettyServerHandler);\n                    }\n                });\n        // bind\n        ChannelFuture channelFuture = bootstrap.bind(getBindAddress());\n        channelFuture.syncUninterruptibly();\n        channel = channelFuture.channel();\n\n    }\n```\n\n`NettyServer`主要做的几件事情:\n\n1. 初始化时对`ChannelHandler`进行封装。\n2. 初始化`NettyServerHandler`，并传入`NettyServer`自身。\n3. 初始化`netty`的`ServerBootstrap`，注册3三个`ChannelHandler`。\n4. 启动服务。\n\n`dubbo`编解码相关的以后单独讲，我们继续深入`nettyServerHandler`。\n\n```java\npublic class NettyServerHandler extends ChannelDuplexHandler {\n    private final ChannelHandler handler;\n\n    public NettyServerHandler(URL url, ChannelHandler handler) {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        this.url = url;\n        this.handler = handler;\n    }\n\n    ...\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);\n        try {\n            handler.received(channel, msg);\n        } finally {\n            NettyChannel.removeChannelIfDisconnected(ctx.channel());\n        }\n    }\n\n    ...\n\n\n    @Override\n    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n        super.write(ctx, msg, promise);\n        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);\n        try {\n            handler.sent(channel, msg);\n        } finally {\n            NettyChannel.removeChannelIfDisconnected(ctx.channel());\n        }\n    }\n\n    ...\n}\n```\n\n`NettyServerHandler`继承`netty`的`ChannelDuplexHandler`，实现了`channelRead`和`write`两个方法，最终调用`ChannelHandler`的`received`和`sent`方法。`NettyServerHandler`可以看成是`netty`的`channelHandler`和`dubbo`的`channelHandler`的转换。\n\n![](http://ww1.sinaimg.cn/large/006tNc79ly1g4osnw3gvdj30py0qs404.jpg)\n\n根据类图可以看到`NettyServer`实现了`dubbo`的`channelHandler`，其`sent`方法和`received`方法主要在父类`AbstractPeer`中实现。\n\n```java\npublic abstract class AbstractPeer implements Endpoint, ChannelHandler {\n    public AbstractPeer(URL url, ChannelHandler handler) {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        this.url = url;\n        this.handler = handler;\n    }\n\n    @Override\n    public void sent(Channel ch, Object msg) throws RemotingException {\n        if (closed) {\n            return;\n        }\n        handler.sent(ch, msg);\n    }\n\n    @Override\n    public void received(Channel ch, Object msg) throws RemotingException {\n        if (closed) {\n            return;\n        }\n        handler.received(ch, msg);\n    }\n\n```\n\n`AbstractPeer`调用`ChannelHandler`的`sent`和`received`方法。而`ChannelHandler`是在`NettyServer`初始化时传入的。\n\n```java\n    public NettyServer(URL url, ChannelHandler handler) throws RemotingException {\n        super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));\n    }\n```\n\n`ExecutorUtil.setThreadName`在url加了一个线程名的参数`DubboServerHandler`，在传入`handler`前，`ChannelHandlers.wrap`对`handler`进行了封装。\n\n```java\npublic class ChannelHandlers {\n\n    private static ChannelHandlers INSTANCE = new ChannelHandlers();\n\n    protected ChannelHandlers() {\n    }\n\n    public static ChannelHandler wrap(ChannelHandler handler, URL url) {\n        return ChannelHandlers.getInstance().wrapInternal(handler, url);\n    }\n\n    protected static ChannelHandlers getInstance() {\n        return INSTANCE;\n    }\n\n    static void setTestingChannelHandlers(ChannelHandlers instance) {\n        INSTANCE = instance;\n    }\n\n    protected ChannelHandler wrapInternal(ChannelHandler handler, URL url) {\n        return new MultiMessageHandler(new HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher.class)\n                .getAdaptiveExtension().dispatch(handler, url)));\n    }\n}\n```\n在`wrapInternal`方法中，对`handler`进行了3次的封装：\n1. `Dispatcher.dispatch`\n2. `HeartbeatHandler`\n3. `MultiMessageHandler`\n\n我们依次来看这3个`ChannelHandler`各做什么事情。首先`Dispatcher`是个SPI，默认会使用`AllDispatcher`。\n\n```java\npublic class AllDispatcher implements Dispatcher {\n\n    public static final String NAME = \"all\";\n\n    @Override\n    public ChannelHandler dispatch(ChannelHandler handler, URL url) {\n        return new AllChannelHandler(handler, url);\n    }\n\n}\n```\n\n```java\npublic class AllChannelHandler extends WrappedChannelHandler {\n    ...\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        ExecutorService cexecutor = getExecutorService();\n        try {\n            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));\n        } catch (Throwable t) {\n            //TODO A temporary solution to the problem that the exception information can not be sent to the opposite end after the thread pool is full. Need a refactoring\n            //fix The thread pool is full, refuses to call, does not return, and causes the consumer to wait for time out\n        \tif(message instanceof Request && t instanceof RejectedExecutionException){\n        \t\tRequest request = (Request)message;\n        \t\tif(request.isTwoWay()){\n        \t\t\tString msg = \"Server side(\" + url.getIp() + \",\" + url.getPort() + \") threadpool is exhausted ,detail msg:\" + t.getMessage();\n        \t\t\tResponse response = new Response(request.getId(), request.getVersion());\n        \t\t\tresponse.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);\n        \t\t\tresponse.setErrorMessage(msg);\n        \t\t\tchannel.send(response);\n        \t\t\treturn;\n        \t\t}\n        \t}\n            throw new ExecutionException(message, channel, getClass() + \" error when process received event .\", t);\n        }\n    }\n}\n```\n\n```java\npublic class ChannelEventRunnable implements Runnable {\n\n@Override\n    public void run() {\n        if (state == ChannelState.RECEIVED) {\n            try {\n                handler.received(channel, message);\n            } catch (Exception e) {\n                logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel\n                        + \", message is \" + message, e);\n            }\n        } else {\n            switch (state) {\n            case CONNECTED:\n                try {\n                    handler.connected(channel);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel, e);\n                }\n                break;\n            case DISCONNECTED:\n                try {\n                    handler.disconnected(channel);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel, e);\n                }\n                break;\n            case SENT:\n                try {\n                    handler.sent(channel, message);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel\n                            + \", message is \" + message, e);\n                }\n            case CAUGHT:\n                try {\n                    handler.caught(channel, exception);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel\n                            + \", message is: \" + message + \", exception is \" + exception, e);\n                }\n                break;\n            default:\n                logger.warn(\"unknown state: \" + state + \", message is \" + message);\n            }\n        }\n\n    }\n}\n```\n\n`AllChannelHandler`做的事情其实就是将具体的业务处理代码放入线程池。`ChannelEventRunnable`中的代码看起来有点怪异，其实是CPU分支预测的优化，具体查看[优化技巧：提前if判断帮助CPU分支预测](http://hengyunabc.github.io/optimization-tip-if-vs-switch/)\n\n这里可以总结一下`dubbo`的几个线程池和`Dispatcher`。\n\n**Dispatcher**\n\n* all:所有消息都派发到线程池，包括请求、响应、连接事件、断开事件、心跳等。\n* direct:所有消息都不派发到线程池，全部在IO线程上直接执行。\n* message:只有请求响应消息派发到线程池，其他连接断开事件、心跳等消息，直接在IO线程上执行。\n* execution:只请求消息派发到线程池，不含响应，响应和其他连接断开事件、心跳等消息，直接在IO线程上执行。\n* connection:在IO线程上，将连接断开事件放入队列，有序逐个执行，其他消息派发到线程池。\n\n**ThreadPool**\n\n* fixed:固定大小线程池，启动时建立线程，不关闭，一直持有。（缺省）\n* cached:缓存线程池，空闲一分钟自动删除，需要时重建。\n* limited:可伸缩线程池，但池中的线程只会增长不会收缩。（为避免收缩时突然来了大流量引起的性能问题）。\n\n接下来看`HeartbeatHandler`。\n\n```java\npublic class HeartbeatHandler extends AbstractChannelHandlerDelegate {\n    ...\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        setReadTimestamp(channel);\n        //判断是否是心跳\n        if (isHeartbeatRequest(message)) {\n            Request req = (Request) message;\n            if (req.isTwoWay()) {\n                //发送心跳返回\n                Response res = new Response(req.getId(), req.getVersion());\n                res.setEvent(Response.HEARTBEAT_EVENT);\n                channel.send(res);\n                if (logger.isInfoEnabled()) {\n                    int heartbeat = channel.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Received heartbeat from remote channel \" + channel.getRemoteAddress()\n                                + \", cause: The channel has no data-transmission exceeds a heartbeat period\"\n                                + (heartbeat > 0 ? \": \" + heartbeat + \"ms\" : \"\"));\n                    }\n                }\n            }\n            return;\n        }\n        if (isHeartbeatResponse(message)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Receive heartbeat response in thread \" + Thread.currentThread().getName());\n            }\n            return;\n        }\n        handler.received(channel, message);\n    }\n\n    private boolean isHeartbeatRequest(Object message) {\n        return message instanceof Request && ((Request) message).isHeartbeat();\n    }\n    ...\n}\n```\n\n`HeartbeatHandler`负责处理接收到的心跳。\n\n\n```java\npublic class MultiMessageHandler extends AbstractChannelHandlerDelegate {\n\n    public MultiMessageHandler(ChannelHandler handler) {\n        super(handler);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        if (message instanceof MultiMessage) {\n            MultiMessage list = (MultiMessage) message;\n            for (Object obj : list) {\n                handler.received(channel, obj);\n            }\n        } else {\n            handler.received(channel, message);\n        }\n    }\n}\n```\n\n`MultiMessageHandler`如果是批量请求，则依次对请求调用下一个Handler来处理。\n\n```java\npublic class DecodeHandler extends AbstractChannelHandlerDelegate {\n\n    private static final Logger log = LoggerFactory.getLogger(DecodeHandler.class);\n\n    public DecodeHandler(ChannelHandler handler) {\n        super(handler);\n    }\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        if (message instanceof Decodeable) {\n            decode(message);\n        }\n\n        if (message instanceof Request) {\n            decode(((Request) message).getData());\n        }\n\n        if (message instanceof Response) {\n            decode(((Response) message).getResult());\n        }\n\n        handler.received(channel, message);\n    }\n\n    private void decode(Object message) {\n        if (message != null && message instanceof Decodeable) {\n            try {\n                ((Decodeable) message).decode();\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Decode decodeable message \" + message.getClass().getName());\n                }\n            } catch (Throwable e) {\n                if (log.isWarnEnabled()) {\n                    log.warn(\"Call Decodeable.decode failed: \" + e.getMessage(), e);\n                }\n            } // ~ end of catch\n        } // ~ end of if\n    } // ~ end of method decode\n}\n```\n接下来会调用`DecodeHandler`，`DecodeHandler`调用`message`的`decode`方法进行序列化。\n\n**HeaderExchangeHandler**\n```java\npublic class HeaderExchangeHandler implements ChannelHandlerDelegate {\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());\n        ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);\n        try {\n            //服务端接受request\n            if (message instanceof Request) {\n                // handle request.\n                Request request = (Request) message;\n                if (request.isEvent()) {\n                    handlerEvent(channel, request);\n                } else {\n                    if (request.isTwoWay()) {\n                        Response response = handleRequest(exchangeChannel, request);\n                        channel.send(response);\n                    } else {\n                        handler.received(exchangeChannel, request.getData());\n                    }\n                }\n            //客户端接受response\n            } else if (message instanceof Response) {\n                handleResponse(channel, (Response) message);\n            } else if (message instanceof String) {\n                if (isClientSide(channel)) {\n                    Exception e = new Exception(\"Dubbo client can not supported string message: \" + message + \" in channel: \" + channel + \", url: \" + channel.getUrl());\n                    logger.error(e.getMessage(), e);\n                } else {\n                    //如果是String类型的，调用telnet方法。\n                    String echo = handler.telnet(channel, (String) message);\n                    if (echo != null && echo.length() > 0) {\n                        channel.send(echo);\n                    }\n                }\n            } else {\n                handler.received(exchangeChannel, message);\n            }\n        } finally {\n            HeaderExchangeChannel.removeChannelIfDisconnected(channel);\n        }\n    }\n\n}\n```\n\n\n\n最后经过层层过滤回到`DubboProtocol`的`ExchangeHandler`上，通过`invoker.invoke(Invocation)`调到具体的业务代码上。\n\n***\n\n### invoker\n\n![](http://ww1.sinaimg.cn/large/006tNc79ly1g5p1p2axxij31z009o78l.jpg)\n通过调试，可以看到invoker是个链式的结构，最终调用到了具体的服务方法上。我们先看`ProtocolFilterWrapper`。\n\n```java\npublic class ProtocolFilterWrapper implements Protocol {\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        //如果协议不是registry时，调用buildInvokerChain方法。\n        if (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) {\n            return protocol.export(invoker);\n        }\n        return protocol.export(buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER));\n    }\n    private static <T> Invoker<T> buildInvokerChain(final Invoker<T> invoker, String key, String group) {\n        Invoker<T> last = invoker;\n        //获取所有的Filter，循环构建调用链。\n        List<Filter> filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);\n        if (!filters.isEmpty()) {\n            for (int i = filters.size() - 1; i >= 0; i--) {\n                final Filter filter = filters.get(i);\n                final Invoker<T> next = last;\n                last = new Invoker<T>() {\n\n                    @Override\n                    public Class<T> getInterface() {\n                        return invoker.getInterface();\n                    }\n\n                    @Override\n                    public URL getUrl() {\n                        return invoker.getUrl();\n                    }\n\n                    @Override\n                    public boolean isAvailable() {\n                        return invoker.isAvailable();\n                    }\n\n                    @Override\n                    public Result invoke(Invocation invocation) throws RpcException {\n                        return filter.invoke(next, invocation);\n                    }\n\n                    @Override\n                    public void destroy() {\n                        invoker.destroy();\n                    }\n\n                    @Override\n                    public String toString() {\n                        return invoker.toString();\n                    }\n                };\n            }\n        }\n        return last;\n    }\n}\n```\n\n`ProtocolFilterWrapper`当协议不是registry时，调用`buildInvokerChain`方法。`buildInvokerChain`获取所有的Filter，循环构建调用链。\nDubbo对于服务端的`Filter`有:\n\n> com.alibaba.dubbo.rpc.filter.EchoFilter\n> com.alibaba.dubbo.rpc.filter.ClassLoaderFilter\n> com.alibaba.dubbo.rpc.filter.GenericFilter\n> com.alibaba.dubbo.rpc.filter.ContextFilter\n> com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter\n> com.alibaba.dubbo.rpc.filter.TimeoutFilter\n> com.alibaba.dubbo.monitor.support.MonitorFilter\n> com.alibaba.dubbo.rpc.filter.ExceptionFilter\n\n每个`Filter`的作用不详细展开。\n\n接下来的`InvokerDelegete`和`DelegateProviderMetaDataInvoker`是没有什么业务的委托类，最后看`JavassistProxyFactory`。\n\n在`ServiceConfig`的`doExportUrlsFor1Protocol()`中，第一次创建了`Invoker`对象。\n\n```java\nInvoker<?> invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));\n                        DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);\n```\n其中`proxyFactory`默认使用，`JavassistProxyFactory`。\n\n```java\npublic class JavassistProxyFactory extends AbstractProxyFactory {\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getProxy(Invoker<T> invoker, Class<?>[] interfaces) {\n        return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));\n    }\n\n    @Override\n    public <T> Invoker<T> getInvoker(T proxy, Class<T> type, URL url) {\n        // TODO Wrapper cannot handle this scenario correctly: the classname contains '$'\n        final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') < 0 ? proxy.getClass() : type);\n        return new AbstractProxyInvoker<T>(proxy, type, url) {\n            @Override\n            protected Object doInvoke(T proxy, String methodName,\n                                      Class<?>[] parameterTypes,\n                                      Object[] arguments) throws Throwable {\n                return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);\n            }\n        };\n    }\n\n}\n```\n\n`JavassistProxyFactory`使用`Wrapper.getWrapper`创建`Wrapper`对象，然后创建`AbstractProxyInvoker`对象，\n\n```java\npublic abstract class Wrapper {\n    public static Wrapper getWrapper(Class<?> c) {\n        while (ClassGenerator.isDynamicClass(c)) // can not wrapper on dynamic class.\n            c = c.getSuperclass();\n\n        if (c == Object.class)\n            return OBJECT_WRAPPER;\n\n        Wrapper ret = WRAPPER_MAP.get(c);\n        if (ret == null) {\n            ret = makeWrapper(c);\n            WRAPPER_MAP.put(c, ret);\n        }\n        return ret;\n    }\n\n    private static Wrapper makeWrapper(Class<?> c) {\n        ...\n        ClassLoader cl = ClassHelper.getClassLoader(c);\n        ...\n        ClassGenerator cc = ClassGenerator.newInstance(cl);\n        ...\n\n        Class<?> wc = cc.toClass();\n        ...\n        return (Wrapper) wc.newInstance();\n\n    }\n\n}\n```\n`Wrapper`通过javassist动态生成`Wrapper`类，将文件反编译，可以看到代理类的源码。\n\n\n```java\npublic class Wrapper0 extends Wrapper implements DC {\n    public static String[] pns;\n    public static Map pts;\n    public static String[] mns;\n    public static String[] dmns;\n    public static Class[] mts0;\n\n    public String[] getPropertyNames() {\n        return pns;\n    }\n\n    public boolean hasProperty(String var1) {\n        return pts.containsKey(var1);\n    }\n\n    public Class getPropertyType(String var1) {\n        return (Class)pts.get(var1);\n    }\n\n    public String[] getMethodNames() {\n        return mns;\n    }\n\n    public String[] getDeclaredMethodNames() {\n        return dmns;\n    }\n\n    public void setPropertyValue(Object var1, String var2, Object var3) {\n        try {\n            DemoService var4 = (DemoService)var1;\n        } catch (Throwable var6) {\n            throw new IllegalArgumentException(var6);\n        }\n\n        throw new NoSuchPropertyException(\"Not found property \\\"\" + var2 + \"\\\" filed or setter method in class com.guhailin.sample.DemoService.\");\n    }\n\n    public Object getPropertyValue(Object var1, String var2) {\n        try {\n            DemoService var3 = (DemoService)var1;\n        } catch (Throwable var5) {\n            throw new IllegalArgumentException(var5);\n        }\n\n        throw new NoSuchPropertyException(\"Not found property \\\"\" + var2 + \"\\\" filed or setter method in class com.guhailin.sample.DemoService.\");\n    }\n\n    public Object invokeMethod(Object var1, String var2, Class[] var3, Object[] var4) throws InvocationTargetException {\n        DemoService var5;\n        try {\n            var5 = (DemoService)var1;\n        } catch (Throwable var8) {\n            throw new IllegalArgumentException(var8);\n        }\n\n        try {\n            if (\"sayHello\".equals(var2) && var3.length == 1) {\n                return var5.sayHello((String)var4[0]);\n            }\n        } catch (Throwable var9) {\n            throw new InvocationTargetException(var9);\n        }\n\n        throw new NoSuchMethodException(\"Not found method \\\"\" + var2 + \"\\\" in class com.guhailin.sample.DemoService.\");\n    }\n\n    public Wrapper0() {\n    }\n}\n\n```\n由此可以看到代理类是如何调用实体类的。\n\n\n## 总结\n\n### 线程模型\n\n![](http://ww2.sinaimg.cn/large/006tNc79ly1g4p16b27z7j30lm05dwf4.jpg)\n\n在使用默认`AllDispatcher`的情况下，`Dubbo`的线程模型为 *1+M+N*的模型，即1个acceptor线程，M个IO线程，N个业务线程。\n\n\n### 调用栈\n\n```mermaid\ngraph TB\nboss[boss] --> worker[worker]\nworker --> nettyServerhandler[nettyServerhandler]\nnettyServerhandler --> nettyServer[nettyServer]\nnettyServer --> MultiMessageHandler[MultiMessageHandler]\nMultiMessageHandler --> HeartBeatHhandler[HeartBeatHhandler]\nHeartBeatHhandler --> AllChannelHandler[AllChannelHandler]\nAllChannelHandler --> ThreadPool[ThreadPool]\nThreadPool --> DecodeHandler[DecodeHandler]\nDecodeHandler --> HeaderExchangehandler[HeaderExchangehandler]\nHeaderExchangehandler --> DubboProtocol.ExchangeHandler[DubboProtocol.ExchangeHandler]\nDubboProtocol.ExchangeHandler --> Invoker[Invoker]\n```\n\n","source":"_posts/2019-07-13-Dubbo系列服务端调用流程解析.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列-服务端调用流程解析\"\ndate:       2019-07-13\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# dubbo系列（四）服务端调用流程解析\n\n[toc]\n\n## 流程解析\n\n通过服务暴露流程，我们知道了dubbo服务端暴露dubbo协议的服务是在DubboProtocol类中进行的。\n\n```java\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        URL url = invoker.getUrl();\n\n        //按照serviceKey，将DubboExporter存入map中\n        String key = serviceKey(url);\n        DubboExporter<T> exporter = new DubboExporter<T>(invoker, key, exporterMap);\n        exporterMap.put(key, exporter);\n\n\n        Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);\n        Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, false);\n        if (isStubSupportEvent && !isCallbackservice) {\n            String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);\n            if (stubServiceMethods == null || stubServiceMethods.length() == 0) {\n                if (logger.isWarnEnabled()) {\n                    logger.warn(new IllegalStateException(\"consumer [\" + url.getParameter(Constants.INTERFACE_KEY) +\n                            \"], has set stubproxy support event ,but no stub methods founded.\"));\n                }\n            } else {\n                stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);\n            }\n        }\n\n        //开启服务\n        openServer(url);\n        optimizeSerialization(url);\n        return exporter;\n    }\n\n    private void openServer(URL url) {\n        // find server.\n        String key = url.getAddress();\n        //client can export a service which's only for server to invoke\n        boolean isServer = url.getParameter(Constants.IS_SERVER_KEY, true);\n        if (isServer) {\n            ExchangeServer server = serverMap.get(key);\n            if (server == null) {\n                //如果服务没有启动的话，调用createService方法来启动服务。\n                //注意key是address，这里保证了一个address地址只会启动一次\n                serverMap.put(key, createServer(url));\n            } else {\n                // server supports reset, use together with override\n                server.reset(url);\n            }\n        }\n    }\n\n    private ExchangeServer createServer(URL url) {\n        // send readonly event when server closes, it's enabled by default\n        url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());\n        // enable heartbeat by default\n        url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));\n        //默认使用netty服务\n        String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n\n        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n            throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n\n        //这里写入默认的解码器参数\n        url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);\n        ExchangeServer server;\n        try {\n            //最后调用Exchangers的静态方法来启动服务.\n            server = Exchangers.bind(url, requestHandler);\n        } catch (RemotingException e) {\n            throw new RpcException(\"Fail to start server(url: \" + url + \") \" + e.getMessage(), e);\n        }\n        str = url.getParameter(Constants.CLIENT_KEY);\n        if (str != null && str.length() > 0) {\n            Set<String> supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();\n            if (!supportedTypes.contains(str)) {\n                throw new RpcException(\"Unsupported client type: \" + str);\n            }\n        }\n        return server;\n    }\n\n```\n我们这里先不管`Invoker`对象是做什么的，可以看到在暴露服务前，dubbo先将`invoker`对象封装进`DubboExporter`对象中，然后存到一个`map`对象里。在最后调用`bind`接口时，除了传入`url`外，还会传入`requestHandler`对象，我们先看下`requestHandler`对象是做什么的。\n\n\n```java\n    private ExchangeHandler requestHandler = new ExchangeHandlerAdapter() {\n\n        @Override\n        public Object reply(ExchangeChannel channel, Object message) throws RemotingException {\n            if (message instanceof Invocation) {\n                Invocation inv = (Invocation) message;\n                //从exporterMap中获取invoker对象\n                Invoker<?> invoker = getInvoker(channel, inv);\n                // need to consider backward-compatibility if it's a callback\n                if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) {\n                    String methodsStr = invoker.getUrl().getParameters().get(\"methods\");\n                    boolean hasMethod = false;\n                    if (methodsStr == null || methodsStr.indexOf(\",\") == -1) {\n                        hasMethod = inv.getMethodName().equals(methodsStr);\n                    } else {\n                        String[] methods = methodsStr.split(\",\");\n                        for (String method : methods) {\n                            if (inv.getMethodName().equals(method)) {\n                                hasMethod = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!hasMethod) {\n                        logger.warn(new IllegalStateException(\"The methodName \" + inv.getMethodName()\n                                + \" not found in callback service interface ,invoke will be ignored.\"\n                                + \" please update the api interface. url is:\"\n                                + invoker.getUrl()) + \" ,invocation is :\" + inv);\n                        return null;\n                    }\n                }\n                RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());\n                return invoker.invoke(inv);\n            }\n            throw new RemotingException(channel, \"Unsupported request: \"\n                    + (message == null ? null : (message.getClass().getName() + \": \" + message))\n                    + \", channel: consumer: \" + channel.getRemoteAddress() + \" --> provider: \" + channel.getLocalAddress());\n        }\n\n        @Override\n        public void received(Channel channel, Object message) throws RemotingException {\n            if (message instanceof Invocation) {\n                reply((ExchangeChannel) channel, message);\n            } else {\n                super.received(channel, message);\n            }\n        }\n\n        @Override\n        public void connected(Channel channel) throws RemotingException {\n            invoke(channel, Constants.ON_CONNECT_KEY);\n        }\n\n        @Override\n        public void disconnected(Channel channel) throws RemotingException {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"disconnected from \" + channel.getRemoteAddress() + \",url:\" + channel.getUrl());\n            }\n            invoke(channel, Constants.ON_DISCONNECT_KEY);\n        }\n\n        private void invoke(Channel channel, String methodKey) {\n            Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);\n            if (invocation != null) {\n                try {\n                    received(channel, invocation);\n                } catch (Throwable t) {\n                    logger.warn(\"Failed to invoke event method \" + invocation.getMethodName() + \"(), cause: \" + t.getMessage(), t);\n                }\n            }\n        }\n\n        private Invocation createInvocation(Channel channel, URL url, String methodKey) {\n            String method = url.getParameter(methodKey);\n            if (method == null || method.length() == 0) {\n                return null;\n            }\n            RpcInvocation invocation = new RpcInvocation(method, new Class<?>[0], new Object[0]);\n            invocation.setAttachment(Constants.PATH_KEY, url.getPath());\n            invocation.setAttachment(Constants.GROUP_KEY, url.getParameter(Constants.GROUP_KEY));\n            invocation.setAttachment(Constants.INTERFACE_KEY, url.getParameter(Constants.INTERFACE_KEY));\n            invocation.setAttachment(Constants.VERSION_KEY, url.getParameter(Constants.VERSION_KEY));\n            if (url.getParameter(Constants.STUB_EVENT_KEY, false)) {\n                invocation.setAttachment(Constants.STUB_EVENT_KEY, Boolean.TRUE.toString());\n            }\n            return invocation;\n        }\n    };\n```\n通过`requestHandler`的实现方法我们可以看到它主要用来处理各种请求回调，我们重点关注`reply`的回调方法，主要做了3件事情：\n1. 从exporterMap获取具体的invoker对象。\n2. 判断调用的method是否存在。\n3. 调用`invoker.invoke`。\n\n我们继续深入`Exchangers.bind`。\n\n```java\n    public static ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        url = url.addParameterIfAbsent(Constants.CODEC_KEY, \"exchange\");\n        return getExchanger(url).bind(url, handler);\n    }\n\n    public static Exchanger getExchanger(URL url) {\n        String type = url.getParameter(Constants.EXCHANGER_KEY, Constants.DEFAULT_EXCHANGER);\n        return getExchanger(type);\n    }\n\n    public static Exchanger getExchanger(String type) {\n        return ExtensionLoader.getExtensionLoader(Exchanger.class).getExtension(type);\n    }\n```\n\n`Exchangers.bind`主要做了2件事情：\n1. 获取`Exchanger`对象，这里根据SPI默认获取`HeaderExchanger`，实际上`Exchanger`也只有这么一个实现类。\n2. 调用`Exchanger`的`bind`方法，返回`ExchangeServer`对象。\n\n我们再看`HeaderExchanger`的`bind`代码。\n\n```java\n    @Override\n    public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {\n        return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))));\n    }\n```\n\n`HeaderExchanger` 主要3件事情：\n1. 封装`handler`对象，外面分别套了一个`HeaderExchangeHandler`和`DecodeHandler`。\n2. `Transporters.bind`开启服务，传入`url`和`ChannelHandler`两个参数，返回`Server`。\n3. 初始化`HeaderExchangeServer`对象并返回。\n\n我们先看`HeaderExchangeServer`做了什么事情。\n\n```java\n    public HeaderExchangeServer(Server server) {\n        if (server == null) {\n            throw new IllegalArgumentException(\"server == null\");\n        }\n        this.server = server;\n        this.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);\n        this.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3);\n        if (heartbeatTimeout < heartbeat * 2) {\n            throw new IllegalStateException(\"heartbeatTimeout < heartbeatInterval * 2\");\n        }\n        startHeartbeatTimer();\n    }\n\n    private void startHeartbeatTimer() {\n        stopHeartbeatTimer();\n        if (heartbeat > 0) {\n            heartbeatTimer = scheduled.scheduleWithFixedDelay(\n                    new HeartBeatTask(new HeartBeatTask.ChannelProvider() {\n                        @Override\n                        public Collection<Channel> getChannels() {\n                            return Collections.unmodifiableCollection(\n                                    HeaderExchangeServer.this.getChannels());\n                        }\n                    }, heartbeat, heartbeatTimeout),\n                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    private void stopHeartbeatTimer() {\n        try {\n            ScheduledFuture<?> timer = heartbeatTimer;\n            if (timer != null && !timer.isCancelled()) {\n                timer.cancel(true);\n            }\n        } catch (Throwable t) {\n            logger.warn(t.getMessage(), t);\n        } finally {\n            heartbeatTimer = null;\n        }\n    }\n\n    @Override\n    public void close() {\n        doClose();\n        server.close();\n    }\n\n    ...\n\n```\n\n`HeaderExchangeServer`主要是封装了server对象，并通过`ScheduledExecutorService`来定时向客户端发送心跳。心跳在这里不详细分析，我们继续深入`Transporters.bind`看服务是如何暴露的。\n\n```java\n    public static Server bind(URL url, ChannelHandler... handlers) throws RemotingException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handlers == null || handlers.length == 0) {\n            throw new IllegalArgumentException(\"handlers == null\");\n        }\n        ChannelHandler handler;\n        if (handlers.length == 1) {\n            handler = handlers[0];\n        } else {\n            handler = new ChannelHandlerDispatcher(handlers);\n        }\n        return getTransporter().bind(url, handler);\n    }\n\n    public static Transporter getTransporter() {\n        return ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension();\n    }\n```\n\n`Transporters.bind`主要做的两件事情：\n1. 通过`SPI`找到`Transporter`对象，这里默认使用`NettyTransporter`。\n2. 调用`NettyTransporter.bind`\n\n```java\n    @Override\n    public Server bind(URL url, ChannelHandler listener) throws RemotingException {\n        return new NettyServer(url, listener);\n    }\n```\n\n`NettyTransporter.bind`方法初始化了一个`NettyServer`。\n\n```java\n    public NettyServer(URL url, ChannelHandler handler) throws RemotingException {\n        //封装ChannelHandler，调用父类的初始化方法。最终会调到doOpen方法上。\n        super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));\n    }\n\n    @Override\n    protected void doOpen() throws Throwable {\n        bootstrap = new ServerBootstrap();\n        //一个boss线程和核数+1（最大不超过32）的worker线程\n        bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory(\"NettyServerBoss\", true));\n        workerGroup = new NioEventLoopGroup(getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS),\n                new DefaultThreadFactory(\"NettyServerWorker\", true));\n\n        final NettyServerHandler nettyServerHandler = new NettyServerHandler(getUrl(), this);\n        channels = nettyServerHandler.getChannels();\n\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                //禁用nagle算法，防止粘包\n                .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)\n                //允许重复使用本地地址和端口\n                .childOption(ChannelOption.SO_REUSEADDR, Boolean.TRUE)\n                //ByteBuf分配器\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .childHandler(new ChannelInitializer<NioSocketChannel>() {\n                    @Override\n                    protected void initChannel(NioSocketChannel ch) throws Exception {\n                        //根据之前写入的codec，getCodec()默认获取DubboCountCodec\n                        NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this);\n                        ch.pipeline()\n                                .addLast(\"decoder\", adapter.getDecoder())\n                                .addLast(\"encoder\", adapter.getEncoder())\n                                .addLast(\"handler\", nettyServerHandler);\n                    }\n                });\n        // bind\n        ChannelFuture channelFuture = bootstrap.bind(getBindAddress());\n        channelFuture.syncUninterruptibly();\n        channel = channelFuture.channel();\n\n    }\n```\n\n`NettyServer`主要做的几件事情:\n\n1. 初始化时对`ChannelHandler`进行封装。\n2. 初始化`NettyServerHandler`，并传入`NettyServer`自身。\n3. 初始化`netty`的`ServerBootstrap`，注册3三个`ChannelHandler`。\n4. 启动服务。\n\n`dubbo`编解码相关的以后单独讲，我们继续深入`nettyServerHandler`。\n\n```java\npublic class NettyServerHandler extends ChannelDuplexHandler {\n    private final ChannelHandler handler;\n\n    public NettyServerHandler(URL url, ChannelHandler handler) {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        this.url = url;\n        this.handler = handler;\n    }\n\n    ...\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);\n        try {\n            handler.received(channel, msg);\n        } finally {\n            NettyChannel.removeChannelIfDisconnected(ctx.channel());\n        }\n    }\n\n    ...\n\n\n    @Override\n    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n        super.write(ctx, msg, promise);\n        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);\n        try {\n            handler.sent(channel, msg);\n        } finally {\n            NettyChannel.removeChannelIfDisconnected(ctx.channel());\n        }\n    }\n\n    ...\n}\n```\n\n`NettyServerHandler`继承`netty`的`ChannelDuplexHandler`，实现了`channelRead`和`write`两个方法，最终调用`ChannelHandler`的`received`和`sent`方法。`NettyServerHandler`可以看成是`netty`的`channelHandler`和`dubbo`的`channelHandler`的转换。\n\n![](http://ww1.sinaimg.cn/large/006tNc79ly1g4osnw3gvdj30py0qs404.jpg)\n\n根据类图可以看到`NettyServer`实现了`dubbo`的`channelHandler`，其`sent`方法和`received`方法主要在父类`AbstractPeer`中实现。\n\n```java\npublic abstract class AbstractPeer implements Endpoint, ChannelHandler {\n    public AbstractPeer(URL url, ChannelHandler handler) {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        this.url = url;\n        this.handler = handler;\n    }\n\n    @Override\n    public void sent(Channel ch, Object msg) throws RemotingException {\n        if (closed) {\n            return;\n        }\n        handler.sent(ch, msg);\n    }\n\n    @Override\n    public void received(Channel ch, Object msg) throws RemotingException {\n        if (closed) {\n            return;\n        }\n        handler.received(ch, msg);\n    }\n\n```\n\n`AbstractPeer`调用`ChannelHandler`的`sent`和`received`方法。而`ChannelHandler`是在`NettyServer`初始化时传入的。\n\n```java\n    public NettyServer(URL url, ChannelHandler handler) throws RemotingException {\n        super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));\n    }\n```\n\n`ExecutorUtil.setThreadName`在url加了一个线程名的参数`DubboServerHandler`，在传入`handler`前，`ChannelHandlers.wrap`对`handler`进行了封装。\n\n```java\npublic class ChannelHandlers {\n\n    private static ChannelHandlers INSTANCE = new ChannelHandlers();\n\n    protected ChannelHandlers() {\n    }\n\n    public static ChannelHandler wrap(ChannelHandler handler, URL url) {\n        return ChannelHandlers.getInstance().wrapInternal(handler, url);\n    }\n\n    protected static ChannelHandlers getInstance() {\n        return INSTANCE;\n    }\n\n    static void setTestingChannelHandlers(ChannelHandlers instance) {\n        INSTANCE = instance;\n    }\n\n    protected ChannelHandler wrapInternal(ChannelHandler handler, URL url) {\n        return new MultiMessageHandler(new HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher.class)\n                .getAdaptiveExtension().dispatch(handler, url)));\n    }\n}\n```\n在`wrapInternal`方法中，对`handler`进行了3次的封装：\n1. `Dispatcher.dispatch`\n2. `HeartbeatHandler`\n3. `MultiMessageHandler`\n\n我们依次来看这3个`ChannelHandler`各做什么事情。首先`Dispatcher`是个SPI，默认会使用`AllDispatcher`。\n\n```java\npublic class AllDispatcher implements Dispatcher {\n\n    public static final String NAME = \"all\";\n\n    @Override\n    public ChannelHandler dispatch(ChannelHandler handler, URL url) {\n        return new AllChannelHandler(handler, url);\n    }\n\n}\n```\n\n```java\npublic class AllChannelHandler extends WrappedChannelHandler {\n    ...\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        ExecutorService cexecutor = getExecutorService();\n        try {\n            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));\n        } catch (Throwable t) {\n            //TODO A temporary solution to the problem that the exception information can not be sent to the opposite end after the thread pool is full. Need a refactoring\n            //fix The thread pool is full, refuses to call, does not return, and causes the consumer to wait for time out\n        \tif(message instanceof Request && t instanceof RejectedExecutionException){\n        \t\tRequest request = (Request)message;\n        \t\tif(request.isTwoWay()){\n        \t\t\tString msg = \"Server side(\" + url.getIp() + \",\" + url.getPort() + \") threadpool is exhausted ,detail msg:\" + t.getMessage();\n        \t\t\tResponse response = new Response(request.getId(), request.getVersion());\n        \t\t\tresponse.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);\n        \t\t\tresponse.setErrorMessage(msg);\n        \t\t\tchannel.send(response);\n        \t\t\treturn;\n        \t\t}\n        \t}\n            throw new ExecutionException(message, channel, getClass() + \" error when process received event .\", t);\n        }\n    }\n}\n```\n\n```java\npublic class ChannelEventRunnable implements Runnable {\n\n@Override\n    public void run() {\n        if (state == ChannelState.RECEIVED) {\n            try {\n                handler.received(channel, message);\n            } catch (Exception e) {\n                logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel\n                        + \", message is \" + message, e);\n            }\n        } else {\n            switch (state) {\n            case CONNECTED:\n                try {\n                    handler.connected(channel);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel, e);\n                }\n                break;\n            case DISCONNECTED:\n                try {\n                    handler.disconnected(channel);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel, e);\n                }\n                break;\n            case SENT:\n                try {\n                    handler.sent(channel, message);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel\n                            + \", message is \" + message, e);\n                }\n            case CAUGHT:\n                try {\n                    handler.caught(channel, exception);\n                } catch (Exception e) {\n                    logger.warn(\"ChannelEventRunnable handle \" + state + \" operation error, channel is \" + channel\n                            + \", message is: \" + message + \", exception is \" + exception, e);\n                }\n                break;\n            default:\n                logger.warn(\"unknown state: \" + state + \", message is \" + message);\n            }\n        }\n\n    }\n}\n```\n\n`AllChannelHandler`做的事情其实就是将具体的业务处理代码放入线程池。`ChannelEventRunnable`中的代码看起来有点怪异，其实是CPU分支预测的优化，具体查看[优化技巧：提前if判断帮助CPU分支预测](http://hengyunabc.github.io/optimization-tip-if-vs-switch/)\n\n这里可以总结一下`dubbo`的几个线程池和`Dispatcher`。\n\n**Dispatcher**\n\n* all:所有消息都派发到线程池，包括请求、响应、连接事件、断开事件、心跳等。\n* direct:所有消息都不派发到线程池，全部在IO线程上直接执行。\n* message:只有请求响应消息派发到线程池，其他连接断开事件、心跳等消息，直接在IO线程上执行。\n* execution:只请求消息派发到线程池，不含响应，响应和其他连接断开事件、心跳等消息，直接在IO线程上执行。\n* connection:在IO线程上，将连接断开事件放入队列，有序逐个执行，其他消息派发到线程池。\n\n**ThreadPool**\n\n* fixed:固定大小线程池，启动时建立线程，不关闭，一直持有。（缺省）\n* cached:缓存线程池，空闲一分钟自动删除，需要时重建。\n* limited:可伸缩线程池，但池中的线程只会增长不会收缩。（为避免收缩时突然来了大流量引起的性能问题）。\n\n接下来看`HeartbeatHandler`。\n\n```java\npublic class HeartbeatHandler extends AbstractChannelHandlerDelegate {\n    ...\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        setReadTimestamp(channel);\n        //判断是否是心跳\n        if (isHeartbeatRequest(message)) {\n            Request req = (Request) message;\n            if (req.isTwoWay()) {\n                //发送心跳返回\n                Response res = new Response(req.getId(), req.getVersion());\n                res.setEvent(Response.HEARTBEAT_EVENT);\n                channel.send(res);\n                if (logger.isInfoEnabled()) {\n                    int heartbeat = channel.getUrl().getParameter(Constants.HEARTBEAT_KEY, 0);\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Received heartbeat from remote channel \" + channel.getRemoteAddress()\n                                + \", cause: The channel has no data-transmission exceeds a heartbeat period\"\n                                + (heartbeat > 0 ? \": \" + heartbeat + \"ms\" : \"\"));\n                    }\n                }\n            }\n            return;\n        }\n        if (isHeartbeatResponse(message)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Receive heartbeat response in thread \" + Thread.currentThread().getName());\n            }\n            return;\n        }\n        handler.received(channel, message);\n    }\n\n    private boolean isHeartbeatRequest(Object message) {\n        return message instanceof Request && ((Request) message).isHeartbeat();\n    }\n    ...\n}\n```\n\n`HeartbeatHandler`负责处理接收到的心跳。\n\n\n```java\npublic class MultiMessageHandler extends AbstractChannelHandlerDelegate {\n\n    public MultiMessageHandler(ChannelHandler handler) {\n        super(handler);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        if (message instanceof MultiMessage) {\n            MultiMessage list = (MultiMessage) message;\n            for (Object obj : list) {\n                handler.received(channel, obj);\n            }\n        } else {\n            handler.received(channel, message);\n        }\n    }\n}\n```\n\n`MultiMessageHandler`如果是批量请求，则依次对请求调用下一个Handler来处理。\n\n```java\npublic class DecodeHandler extends AbstractChannelHandlerDelegate {\n\n    private static final Logger log = LoggerFactory.getLogger(DecodeHandler.class);\n\n    public DecodeHandler(ChannelHandler handler) {\n        super(handler);\n    }\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        if (message instanceof Decodeable) {\n            decode(message);\n        }\n\n        if (message instanceof Request) {\n            decode(((Request) message).getData());\n        }\n\n        if (message instanceof Response) {\n            decode(((Response) message).getResult());\n        }\n\n        handler.received(channel, message);\n    }\n\n    private void decode(Object message) {\n        if (message != null && message instanceof Decodeable) {\n            try {\n                ((Decodeable) message).decode();\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Decode decodeable message \" + message.getClass().getName());\n                }\n            } catch (Throwable e) {\n                if (log.isWarnEnabled()) {\n                    log.warn(\"Call Decodeable.decode failed: \" + e.getMessage(), e);\n                }\n            } // ~ end of catch\n        } // ~ end of if\n    } // ~ end of method decode\n}\n```\n接下来会调用`DecodeHandler`，`DecodeHandler`调用`message`的`decode`方法进行序列化。\n\n**HeaderExchangeHandler**\n```java\npublic class HeaderExchangeHandler implements ChannelHandlerDelegate {\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());\n        ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);\n        try {\n            //服务端接受request\n            if (message instanceof Request) {\n                // handle request.\n                Request request = (Request) message;\n                if (request.isEvent()) {\n                    handlerEvent(channel, request);\n                } else {\n                    if (request.isTwoWay()) {\n                        Response response = handleRequest(exchangeChannel, request);\n                        channel.send(response);\n                    } else {\n                        handler.received(exchangeChannel, request.getData());\n                    }\n                }\n            //客户端接受response\n            } else if (message instanceof Response) {\n                handleResponse(channel, (Response) message);\n            } else if (message instanceof String) {\n                if (isClientSide(channel)) {\n                    Exception e = new Exception(\"Dubbo client can not supported string message: \" + message + \" in channel: \" + channel + \", url: \" + channel.getUrl());\n                    logger.error(e.getMessage(), e);\n                } else {\n                    //如果是String类型的，调用telnet方法。\n                    String echo = handler.telnet(channel, (String) message);\n                    if (echo != null && echo.length() > 0) {\n                        channel.send(echo);\n                    }\n                }\n            } else {\n                handler.received(exchangeChannel, message);\n            }\n        } finally {\n            HeaderExchangeChannel.removeChannelIfDisconnected(channel);\n        }\n    }\n\n}\n```\n\n\n\n最后经过层层过滤回到`DubboProtocol`的`ExchangeHandler`上，通过`invoker.invoke(Invocation)`调到具体的业务代码上。\n\n***\n\n### invoker\n\n![](http://ww1.sinaimg.cn/large/006tNc79ly1g5p1p2axxij31z009o78l.jpg)\n通过调试，可以看到invoker是个链式的结构，最终调用到了具体的服务方法上。我们先看`ProtocolFilterWrapper`。\n\n```java\npublic class ProtocolFilterWrapper implements Protocol {\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        //如果协议不是registry时，调用buildInvokerChain方法。\n        if (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) {\n            return protocol.export(invoker);\n        }\n        return protocol.export(buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER));\n    }\n    private static <T> Invoker<T> buildInvokerChain(final Invoker<T> invoker, String key, String group) {\n        Invoker<T> last = invoker;\n        //获取所有的Filter，循环构建调用链。\n        List<Filter> filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);\n        if (!filters.isEmpty()) {\n            for (int i = filters.size() - 1; i >= 0; i--) {\n                final Filter filter = filters.get(i);\n                final Invoker<T> next = last;\n                last = new Invoker<T>() {\n\n                    @Override\n                    public Class<T> getInterface() {\n                        return invoker.getInterface();\n                    }\n\n                    @Override\n                    public URL getUrl() {\n                        return invoker.getUrl();\n                    }\n\n                    @Override\n                    public boolean isAvailable() {\n                        return invoker.isAvailable();\n                    }\n\n                    @Override\n                    public Result invoke(Invocation invocation) throws RpcException {\n                        return filter.invoke(next, invocation);\n                    }\n\n                    @Override\n                    public void destroy() {\n                        invoker.destroy();\n                    }\n\n                    @Override\n                    public String toString() {\n                        return invoker.toString();\n                    }\n                };\n            }\n        }\n        return last;\n    }\n}\n```\n\n`ProtocolFilterWrapper`当协议不是registry时，调用`buildInvokerChain`方法。`buildInvokerChain`获取所有的Filter，循环构建调用链。\nDubbo对于服务端的`Filter`有:\n\n> com.alibaba.dubbo.rpc.filter.EchoFilter\n> com.alibaba.dubbo.rpc.filter.ClassLoaderFilter\n> com.alibaba.dubbo.rpc.filter.GenericFilter\n> com.alibaba.dubbo.rpc.filter.ContextFilter\n> com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter\n> com.alibaba.dubbo.rpc.filter.TimeoutFilter\n> com.alibaba.dubbo.monitor.support.MonitorFilter\n> com.alibaba.dubbo.rpc.filter.ExceptionFilter\n\n每个`Filter`的作用不详细展开。\n\n接下来的`InvokerDelegete`和`DelegateProviderMetaDataInvoker`是没有什么业务的委托类，最后看`JavassistProxyFactory`。\n\n在`ServiceConfig`的`doExportUrlsFor1Protocol()`中，第一次创建了`Invoker`对象。\n\n```java\nInvoker<?> invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));\n                        DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);\n```\n其中`proxyFactory`默认使用，`JavassistProxyFactory`。\n\n```java\npublic class JavassistProxyFactory extends AbstractProxyFactory {\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getProxy(Invoker<T> invoker, Class<?>[] interfaces) {\n        return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));\n    }\n\n    @Override\n    public <T> Invoker<T> getInvoker(T proxy, Class<T> type, URL url) {\n        // TODO Wrapper cannot handle this scenario correctly: the classname contains '$'\n        final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') < 0 ? proxy.getClass() : type);\n        return new AbstractProxyInvoker<T>(proxy, type, url) {\n            @Override\n            protected Object doInvoke(T proxy, String methodName,\n                                      Class<?>[] parameterTypes,\n                                      Object[] arguments) throws Throwable {\n                return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);\n            }\n        };\n    }\n\n}\n```\n\n`JavassistProxyFactory`使用`Wrapper.getWrapper`创建`Wrapper`对象，然后创建`AbstractProxyInvoker`对象，\n\n```java\npublic abstract class Wrapper {\n    public static Wrapper getWrapper(Class<?> c) {\n        while (ClassGenerator.isDynamicClass(c)) // can not wrapper on dynamic class.\n            c = c.getSuperclass();\n\n        if (c == Object.class)\n            return OBJECT_WRAPPER;\n\n        Wrapper ret = WRAPPER_MAP.get(c);\n        if (ret == null) {\n            ret = makeWrapper(c);\n            WRAPPER_MAP.put(c, ret);\n        }\n        return ret;\n    }\n\n    private static Wrapper makeWrapper(Class<?> c) {\n        ...\n        ClassLoader cl = ClassHelper.getClassLoader(c);\n        ...\n        ClassGenerator cc = ClassGenerator.newInstance(cl);\n        ...\n\n        Class<?> wc = cc.toClass();\n        ...\n        return (Wrapper) wc.newInstance();\n\n    }\n\n}\n```\n`Wrapper`通过javassist动态生成`Wrapper`类，将文件反编译，可以看到代理类的源码。\n\n\n```java\npublic class Wrapper0 extends Wrapper implements DC {\n    public static String[] pns;\n    public static Map pts;\n    public static String[] mns;\n    public static String[] dmns;\n    public static Class[] mts0;\n\n    public String[] getPropertyNames() {\n        return pns;\n    }\n\n    public boolean hasProperty(String var1) {\n        return pts.containsKey(var1);\n    }\n\n    public Class getPropertyType(String var1) {\n        return (Class)pts.get(var1);\n    }\n\n    public String[] getMethodNames() {\n        return mns;\n    }\n\n    public String[] getDeclaredMethodNames() {\n        return dmns;\n    }\n\n    public void setPropertyValue(Object var1, String var2, Object var3) {\n        try {\n            DemoService var4 = (DemoService)var1;\n        } catch (Throwable var6) {\n            throw new IllegalArgumentException(var6);\n        }\n\n        throw new NoSuchPropertyException(\"Not found property \\\"\" + var2 + \"\\\" filed or setter method in class com.guhailin.sample.DemoService.\");\n    }\n\n    public Object getPropertyValue(Object var1, String var2) {\n        try {\n            DemoService var3 = (DemoService)var1;\n        } catch (Throwable var5) {\n            throw new IllegalArgumentException(var5);\n        }\n\n        throw new NoSuchPropertyException(\"Not found property \\\"\" + var2 + \"\\\" filed or setter method in class com.guhailin.sample.DemoService.\");\n    }\n\n    public Object invokeMethod(Object var1, String var2, Class[] var3, Object[] var4) throws InvocationTargetException {\n        DemoService var5;\n        try {\n            var5 = (DemoService)var1;\n        } catch (Throwable var8) {\n            throw new IllegalArgumentException(var8);\n        }\n\n        try {\n            if (\"sayHello\".equals(var2) && var3.length == 1) {\n                return var5.sayHello((String)var4[0]);\n            }\n        } catch (Throwable var9) {\n            throw new InvocationTargetException(var9);\n        }\n\n        throw new NoSuchMethodException(\"Not found method \\\"\" + var2 + \"\\\" in class com.guhailin.sample.DemoService.\");\n    }\n\n    public Wrapper0() {\n    }\n}\n\n```\n由此可以看到代理类是如何调用实体类的。\n\n\n## 总结\n\n### 线程模型\n\n![](http://ww2.sinaimg.cn/large/006tNc79ly1g4p16b27z7j30lm05dwf4.jpg)\n\n在使用默认`AllDispatcher`的情况下，`Dubbo`的线程模型为 *1+M+N*的模型，即1个acceptor线程，M个IO线程，N个业务线程。\n\n\n### 调用栈\n\n```mermaid\ngraph TB\nboss[boss] --> worker[worker]\nworker --> nettyServerhandler[nettyServerhandler]\nnettyServerhandler --> nettyServer[nettyServer]\nnettyServer --> MultiMessageHandler[MultiMessageHandler]\nMultiMessageHandler --> HeartBeatHhandler[HeartBeatHhandler]\nHeartBeatHhandler --> AllChannelHandler[AllChannelHandler]\nAllChannelHandler --> ThreadPool[ThreadPool]\nThreadPool --> DecodeHandler[DecodeHandler]\nDecodeHandler --> HeaderExchangehandler[HeaderExchangehandler]\nHeaderExchangehandler --> DubboProtocol.ExchangeHandler[DubboProtocol.ExchangeHandler]\nDubboProtocol.ExchangeHandler --> Invoker[Invoker]\n```\n\n","slug":"2019-07-13-Dubbo系列服务端调用流程解析","published":1,"updated":"2019-08-06T06:43:55.048Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a400041fyt1jjscbsj","content":"<h1 id=\"dubbo系列（四）服务端调用流程解析\"><a href=\"#dubbo系列（四）服务端调用流程解析\" class=\"headerlink\" title=\"dubbo系列（四）服务端调用流程解析\"></a>dubbo系列（四）服务端调用流程解析</h1><p>[toc]</p>\n<h2 id=\"流程解析\"><a href=\"#流程解析\" class=\"headerlink\" title=\"流程解析\"></a>流程解析</h2><p>通过服务暴露流程，我们知道了dubbo服务端暴露dubbo协议的服务是在DubboProtocol类中进行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">    URL url = invoker.getUrl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按照serviceKey，将DubboExporter存入map中</span></span><br><span class=\"line\">    String key = serviceKey(url);</span><br><span class=\"line\">    DubboExporter&lt;T&gt; exporter = <span class=\"keyword\">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class=\"line\">    exporterMap.put(key, exporter);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);</span><br><span class=\"line\">    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) &#123;</span><br><span class=\"line\">        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stubServiceMethods == <span class=\"keyword\">null</span> || stubServiceMethods.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"consumer [\"</span> + url.getParameter(Constants.INTERFACE_KEY) +</span><br><span class=\"line\">                        <span class=\"string\">\"], has set stubproxy support event ,but no stub methods founded.\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开启服务</span></span><br><span class=\"line\">    openServer(url);</span><br><span class=\"line\">    optimizeSerialization(url);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exporter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openServer</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// find server.</span></span><br><span class=\"line\">    String key = url.getAddress();</span><br><span class=\"line\">    <span class=\"comment\">//client can export a service which's only for server to invoke</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isServer = url.getParameter(Constants.IS_SERVER_KEY, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isServer) &#123;</span><br><span class=\"line\">        ExchangeServer server = serverMap.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (server == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果服务没有启动的话，调用createService方法来启动服务。</span></span><br><span class=\"line\">            <span class=\"comment\">//注意key是address，这里保证了一个address地址只会启动一次</span></span><br><span class=\"line\">            serverMap.put(key, createServer(url));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// server supports reset, use together with override</span></span><br><span class=\"line\">            server.reset(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ExchangeServer <span class=\"title\">createServer</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// send readonly event when server closes, it's enabled by default</span></span><br><span class=\"line\">    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());</span><br><span class=\"line\">    <span class=\"comment\">// enable heartbeat by default</span></span><br><span class=\"line\">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class=\"line\">    <span class=\"comment\">//默认使用netty服务</span></span><br><span class=\"line\">    String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">hasExtension</span>(<span class=\"title\">str</span>))</span></span><br><span class=\"line\">        throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这里写入默认的解码器参数</span></span><br><span class=\"line\">    url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);</span><br><span class=\"line\">    ExchangeServer server;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//最后调用Exchangers的静态方法来启动服务.</span></span><br><span class=\"line\">        server = Exchangers.bind(url, requestHandler);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemotingException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RpcException(<span class=\"string\">\"Fail to start server(url: \"</span> + url + <span class=\"string\">\") \"</span> + e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str = url.getParameter(Constants.CLIENT_KEY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getSupportedExtensions</span>()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!supportedTypes.contains(str)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RpcException(<span class=\"string\">\"Unsupported client type: \"</span> + str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们这里先不管<code>Invoker</code>对象是做什么的，可以看到在暴露服务前，dubbo先将<code>invoker</code>对象封装进<code>DubboExporter</code>对象中，然后存到一个<code>map</code>对象里。在最后调用<code>bind</code>接口时，除了传入<code>url</code>外，还会传入<code>requestHandler</code>对象，我们先看下<code>requestHandler</code>对象是做什么的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ExchangeHandler requestHandler = <span class=\"keyword\">new</span> ExchangeHandlerAdapter() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">reply</span><span class=\"params\">(ExchangeChannel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Invocation) &#123;</span><br><span class=\"line\">            Invocation inv = (Invocation) message;</span><br><span class=\"line\">            <span class=\"comment\">//从exporterMap中获取invoker对象</span></span><br><span class=\"line\">            Invoker&lt;?&gt; invoker = getInvoker(channel, inv);</span><br><span class=\"line\">            <span class=\"comment\">// need to consider backward-compatibility if it's a callback</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class=\"line\">                String methodsStr = invoker.getUrl().getParameters().get(<span class=\"string\">\"methods\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> hasMethod = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (methodsStr == <span class=\"keyword\">null</span> || methodsStr.indexOf(<span class=\"string\">\",\"</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    hasMethod = inv.getMethodName().equals(methodsStr);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    String[] methods = methodsStr.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String method : methods) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (inv.getMethodName().equals(method)) &#123;</span><br><span class=\"line\">                            hasMethod = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!hasMethod) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The methodName \"</span> + inv.getMethodName()</span><br><span class=\"line\">                            + <span class=\"string\">\" not found in callback service interface ,invoke will be ignored.\"</span></span><br><span class=\"line\">                            + <span class=\"string\">\" please update the api interface. url is:\"</span></span><br><span class=\"line\">                            + invoker.getUrl()) + <span class=\"string\">\" ,invocation is :\"</span> + inv);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invoker.invoke(inv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RemotingException(channel, <span class=\"string\">\"Unsupported request: \"</span></span><br><span class=\"line\">                + (message == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : (message.getClass().getName() + <span class=\"string\">\": \"</span> + message))</span><br><span class=\"line\">                + <span class=\"string\">\", channel: consumer: \"</span> + channel.getRemoteAddress() + <span class=\"string\">\" --&gt; provider: \"</span> + channel.getLocalAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Invocation) &#123;</span><br><span class=\"line\">            reply((ExchangeChannel) channel, message);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.received(channel, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connected</span><span class=\"params\">(Channel channel)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        invoke(channel, Constants.ON_CONNECT_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">disconnected</span><span class=\"params\">(Channel channel)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"disconnected from \"</span> + channel.getRemoteAddress() + <span class=\"string\">\",url:\"</span> + channel.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        invoke(channel, Constants.ON_DISCONNECT_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(Channel channel, String methodKey)</span> </span>&#123;</span><br><span class=\"line\">        Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (invocation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                received(channel, invocation);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"Failed to invoke event method \"</span> + invocation.getMethodName() + <span class=\"string\">\"(), cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Invocation <span class=\"title\">createInvocation</span><span class=\"params\">(Channel channel, URL url, String methodKey)</span> </span>&#123;</span><br><span class=\"line\">        String method = url.getParameter(methodKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method == <span class=\"keyword\">null</span> || method.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RpcInvocation invocation = <span class=\"keyword\">new</span> RpcInvocation(method, <span class=\"keyword\">new</span> Class&lt;?&gt;[<span class=\"number\">0</span>], <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        invocation.setAttachment(Constants.PATH_KEY, url.getPath());</span><br><span class=\"line\">        invocation.setAttachment(Constants.GROUP_KEY, url.getParameter(Constants.GROUP_KEY));</span><br><span class=\"line\">        invocation.setAttachment(Constants.INTERFACE_KEY, url.getParameter(Constants.INTERFACE_KEY));</span><br><span class=\"line\">        invocation.setAttachment(Constants.VERSION_KEY, url.getParameter(Constants.VERSION_KEY));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url.getParameter(Constants.STUB_EVENT_KEY, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">            invocation.setAttachment(Constants.STUB_EVENT_KEY, Boolean.TRUE.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invocation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过<code>requestHandler</code>的实现方法我们可以看到它主要用来处理各种请求回调，我们重点关注<code>reply</code>的回调方法，主要做了3件事情：</p>\n<ol>\n<li>从exporterMap获取具体的invoker对象。</li>\n<li>判断调用的method是否存在。</li>\n<li>调用<code>invoker.invoke</code>。</li>\n</ol>\n<p>我们继续深入<code>Exchangers.bind</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExchangeServer <span class=\"title\">bind</span><span class=\"params\">(URL url, ExchangeHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handler == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class=\"string\">\"exchange\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getExchanger(url).bind(url, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Exchanger <span class=\"title\">getExchanger</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    String type = url.getParameter(Constants.EXCHANGER_KEY, Constants.DEFAULT_EXCHANGER);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getExchanger(type);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Exchanger <span class=\"title\">getExchanger</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExtensionLoader.getExtensionLoader(Exchanger<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getExtension</span>(<span class=\"title\">type</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Exchangers.bind</code>主要做了2件事情：</p>\n<ol>\n<li>获取<code>Exchanger</code>对象，这里根据SPI默认获取<code>HeaderExchanger</code>，实际上<code>Exchanger</code>也只有这么一个实现类。</li>\n<li>调用<code>Exchanger</code>的<code>bind</code>方法，返回<code>ExchangeServer</code>对象。</li>\n</ol>\n<p>我们再看<code>HeaderExchanger</code>的<code>bind</code>代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ExchangeServer <span class=\"title\">bind</span><span class=\"params\">(URL url, ExchangeHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HeaderExchangeServer(Transporters.bind(url, <span class=\"keyword\">new</span> DecodeHandler(<span class=\"keyword\">new</span> HeaderExchangeHandler(handler))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>HeaderExchanger</code> 主要3件事情：</p>\n<ol>\n<li>封装<code>handler</code>对象，外面分别套了一个<code>HeaderExchangeHandler</code>和<code>DecodeHandler</code>。</li>\n<li><code>Transporters.bind</code>开启服务，传入<code>url</code>和<code>ChannelHandler</code>两个参数，返回<code>Server</code>。</li>\n<li>初始化<code>HeaderExchangeServer</code>对象并返回。</li>\n</ol>\n<p>我们先看<code>HeaderExchangeServer</code>做了什么事情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeaderExchangeServer</span><span class=\"params\">(Server server)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"server == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.server = server;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heartbeatTimeout &lt; heartbeat * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"heartbeatTimeout &lt; heartbeatInterval * 2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startHeartbeatTimer();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stopHeartbeatTimer();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heartbeat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> HeartBeatTask(<span class=\"keyword\">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Channel&gt; <span class=\"title\">getChannels</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Collections.unmodifiableCollection(</span><br><span class=\"line\">                                HeaderExchangeServer.<span class=\"keyword\">this</span>.getChannels());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, heartbeat, heartbeatTimeout),</span><br><span class=\"line\">                heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ScheduledFuture&lt;?&gt; timer = heartbeatTimer;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer != <span class=\"keyword\">null</span> &amp;&amp; !timer.isCancelled()) &#123;</span><br><span class=\"line\">            timer.cancel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        logger.warn(t.getMessage(), t);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        heartbeatTimer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    doClose();</span><br><span class=\"line\">    server.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>HeaderExchangeServer</code>主要是封装了server对象，并通过<code>ScheduledExecutorService</code>来定时向客户端发送心跳。心跳在这里不详细分析，我们继续深入<code>Transporters.bind</code>看服务是如何暴露的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Server <span class=\"title\">bind</span><span class=\"params\">(URL url, ChannelHandler... handlers)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlers == <span class=\"keyword\">null</span> || handlers.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handlers == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ChannelHandler handler;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlers.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        handler = handlers[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getTransporter().bind(url, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Transporter <span class=\"title\">getTransporter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExtensionLoader.getExtensionLoader(Transporter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getAdaptiveExtension</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Transporters.bind</code>主要做的两件事情：</p>\n<ol>\n<li>通过<code>SPI</code>找到<code>Transporter</code>对象，这里默认使用<code>NettyTransporter</code>。</li>\n<li>调用<code>NettyTransporter.bind</code></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Server <span class=\"title\">bind</span><span class=\"params\">(URL url, ChannelHandler listener)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NettyServer(url, listener);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NettyTransporter.bind</code>方法初始化了一个<code>NettyServer</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NettyServer</span><span class=\"params\">(URL url, ChannelHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//封装ChannelHandler，调用父类的初始化方法。最终会调到doOpen方法上。</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOpen</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">    <span class=\"comment\">//一个boss线程和核数+1（最大不超过32）的worker线程</span></span><br><span class=\"line\">    bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"NettyServerBoss\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">    workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"NettyServerWorker\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> NettyServerHandler nettyServerHandler = <span class=\"keyword\">new</span> NettyServerHandler(getUrl(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    channels = nettyServerHandler.getChannels();</span><br><span class=\"line\"></span><br><span class=\"line\">    bootstrap.group(bossGroup, workerGroup)</span><br><span class=\"line\">            .channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">            //禁用<span class=\"title\">nagle</span>算法，防止粘包</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">TCP_NODELAY</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">            //允许重复使用本地地址和端口</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">SO_REUSEADDR</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">            //<span class=\"title\">ByteBuf</span>分配器</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">ALLOCATOR</span>, <span class=\"title\">PooledByteBufAllocator</span>.<span class=\"title\">DEFAULT</span>)</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childHandler</span>(<span class=\"title\">new</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">NioSocketChannel</span>&gt;() </span>&#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(NioSocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//根据之前写入的codec，getCodec()默认获取DubboCountCodec</span></span><br><span class=\"line\">                    NettyCodecAdapter adapter = <span class=\"keyword\">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                    ch.pipeline()</span><br><span class=\"line\">                            .addLast(<span class=\"string\">\"decoder\"</span>, adapter.getDecoder())</span><br><span class=\"line\">                            .addLast(<span class=\"string\">\"encoder\"</span>, adapter.getEncoder())</span><br><span class=\"line\">                            .addLast(<span class=\"string\">\"handler\"</span>, nettyServerHandler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// bind</span></span><br><span class=\"line\">    ChannelFuture channelFuture = bootstrap.bind(getBindAddress());</span><br><span class=\"line\">    channelFuture.syncUninterruptibly();</span><br><span class=\"line\">    channel = channelFuture.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NettyServer</code>主要做的几件事情:</p>\n<ol>\n<li>初始化时对<code>ChannelHandler</code>进行封装。</li>\n<li>初始化<code>NettyServerHandler</code>，并传入<code>NettyServer</code>自身。</li>\n<li>初始化<code>netty</code>的<code>ServerBootstrap</code>，注册3三个<code>ChannelHandler</code>。</li>\n<li>启动服务。</li>\n</ol>\n<p><code>dubbo</code>编解码相关的以后单独讲，我们继续深入<code>nettyServerHandler</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelDuplexHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChannelHandler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NettyServerHandler</span><span class=\"params\">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handler == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            handler.received(channel, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.write(ctx, msg, promise);</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            handler.sent(channel, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NettyServerHandler</code>继承<code>netty</code>的<code>ChannelDuplexHandler</code>，实现了<code>channelRead</code>和<code>write</code>两个方法，最终调用<code>ChannelHandler</code>的<code>received</code>和<code>sent</code>方法。<code>NettyServerHandler</code>可以看成是<code>netty</code>的<code>channelHandler</code>和<code>dubbo</code>的<code>channelHandler</code>的转换。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006tNc79ly1g4osnw3gvdj30py0qs404.jpg\" alt=\"\"></p>\n<p>根据类图可以看到<code>NettyServer</code>实现了<code>dubbo</code>的<code>channelHandler</code>，其<code>sent</code>方法和<code>received</code>方法主要在父类<code>AbstractPeer</code>中实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPeer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Endpoint</span>, <span class=\"title\">ChannelHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractPeer</span><span class=\"params\">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handler == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sent</span><span class=\"params\">(Channel ch, Object msg)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (closed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handler.sent(ch, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel ch, Object msg)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (closed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handler.received(ch, msg);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AbstractPeer</code>调用<code>ChannelHandler</code>的<code>sent</code>和<code>received</code>方法。而<code>ChannelHandler</code>是在<code>NettyServer</code>初始化时传入的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NettyServer</span><span class=\"params\">(URL url, ChannelHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ExecutorUtil.setThreadName</code>在url加了一个线程名的参数<code>DubboServerHandler</code>，在传入<code>handler</code>前，<code>ChannelHandlers.wrap</code>对<code>handler</code>进行了封装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelHandlers</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChannelHandlers INSTANCE = <span class=\"keyword\">new</span> ChannelHandlers();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">ChannelHandlers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChannelHandler <span class=\"title\">wrap</span><span class=\"params\">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChannelHandlers.getInstance().wrapInternal(handler, url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> ChannelHandlers <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setTestingChannelHandlers</span><span class=\"params\">(ChannelHandlers instance)</span> </span>&#123;</span><br><span class=\"line\">        INSTANCE = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> ChannelHandler <span class=\"title\">wrapInternal</span><span class=\"params\">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MultiMessageHandler(<span class=\"keyword\">new</span> HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">                .<span class=\"title\">getAdaptiveExtension</span>().<span class=\"title\">dispatch</span>(<span class=\"title\">handler</span>, <span class=\"title\">url</span>)))</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>wrapInternal</code>方法中，对<code>handler</code>进行了3次的封装：</p>\n<ol>\n<li><code>Dispatcher.dispatch</code></li>\n<li><code>HeartbeatHandler</code></li>\n<li><code>MultiMessageHandler</code></li>\n</ol>\n<p>我们依次来看这3个<code>ChannelHandler</code>各做什么事情。首先<code>Dispatcher</code>是个SPI，默认会使用<code>AllDispatcher</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AllDispatcher</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dispatcher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"all\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ChannelHandler <span class=\"title\">dispatch</span><span class=\"params\">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AllChannelHandler(handler, url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AllChannelHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">WrappedChannelHandler</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        ExecutorService cexecutor = getExecutorService();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cexecutor.execute(<span class=\"keyword\">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//TODO A temporary solution to the problem that the exception information can not be sent to the opposite end after the thread pool is full. Need a refactoring</span></span><br><span class=\"line\">            <span class=\"comment\">//fix The thread pool is full, refuses to call, does not return, and causes the consumer to wait for time out</span></span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(message <span class=\"keyword\">instanceof</span> Request &amp;&amp; t <span class=\"keyword\">instanceof</span> RejectedExecutionException)&#123;</span><br><span class=\"line\">        \t\tRequest request = (Request)message;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(request.isTwoWay())&#123;</span><br><span class=\"line\">        \t\t\tString msg = <span class=\"string\">\"Server side(\"</span> + url.getIp() + <span class=\"string\">\",\"</span> + url.getPort() + <span class=\"string\">\") threadpool is exhausted ,detail msg:\"</span> + t.getMessage();</span><br><span class=\"line\">        \t\t\tResponse response = <span class=\"keyword\">new</span> Response(request.getId(), request.getVersion());</span><br><span class=\"line\">        \t\t\tresponse.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);</span><br><span class=\"line\">        \t\t\tresponse.setErrorMessage(msg);</span><br><span class=\"line\">        \t\t\tchannel.send(response);</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExecutionException(message, channel, getClass() + <span class=\"string\">\" error when process received event .\"</span>, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelEventRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state == ChannelState.RECEIVED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                handler.received(channel, message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel</span><br><span class=\"line\">                        + <span class=\"string\">\", message is \"</span> + message, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CONNECTED:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.connected(channel);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DISCONNECTED:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.disconnected(channel);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SENT:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.sent(channel, message);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel</span><br><span class=\"line\">                            + <span class=\"string\">\", message is \"</span> + message, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CAUGHT:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.caught(channel, exception);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel</span><br><span class=\"line\">                            + <span class=\"string\">\", message is: \"</span> + message + <span class=\"string\">\", exception is \"</span> + exception, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"unknown state: \"</span> + state + <span class=\"string\">\", message is \"</span> + message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AllChannelHandler</code>做的事情其实就是将具体的业务处理代码放入线程池。<code>ChannelEventRunnable</code>中的代码看起来有点怪异，其实是CPU分支预测的优化，具体查看<a href=\"http://hengyunabc.github.io/optimization-tip-if-vs-switch/\" target=\"_blank\" rel=\"noopener\">优化技巧：提前if判断帮助CPU分支预测</a></p>\n<p>这里可以总结一下<code>dubbo</code>的几个线程池和<code>Dispatcher</code>。</p>\n<p><strong>Dispatcher</strong></p>\n<ul>\n<li>all:所有消息都派发到线程池，包括请求、响应、连接事件、断开事件、心跳等。</li>\n<li>direct:所有消息都不派发到线程池，全部在IO线程上直接执行。</li>\n<li>message:只有请求响应消息派发到线程池，其他连接断开事件、心跳等消息，直接在IO线程上执行。</li>\n<li>execution:只请求消息派发到线程池，不含响应，响应和其他连接断开事件、心跳等消息，直接在IO线程上执行。</li>\n<li>connection:在IO线程上，将连接断开事件放入队列，有序逐个执行，其他消息派发到线程池。</li>\n</ul>\n<p><strong>ThreadPool</strong></p>\n<ul>\n<li>fixed:固定大小线程池，启动时建立线程，不关闭，一直持有。（缺省）</li>\n<li>cached:缓存线程池，空闲一分钟自动删除，需要时重建。</li>\n<li>limited:可伸缩线程池，但池中的线程只会增长不会收缩。（为避免收缩时突然来了大流量引起的性能问题）。</li>\n</ul>\n<p>接下来看<code>HeartbeatHandler</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartbeatHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        setReadTimestamp(channel);</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是心跳</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isHeartbeatRequest(message)) &#123;</span><br><span class=\"line\">            Request req = (Request) message;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (req.isTwoWay()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//发送心跳返回</span></span><br><span class=\"line\">                Response res = <span class=\"keyword\">new</span> Response(req.getId(), req.getVersion());</span><br><span class=\"line\">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class=\"line\">                channel.send(res);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> heartbeat = channel.getUrl().getParameter(Constants.HEARTBEAT_KEY, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                        logger.debug(<span class=\"string\">\"Received heartbeat from remote channel \"</span> + channel.getRemoteAddress()</span><br><span class=\"line\">                                + <span class=\"string\">\", cause: The channel has no data-transmission exceeds a heartbeat period\"</span></span><br><span class=\"line\">                                + (heartbeat &gt; <span class=\"number\">0</span> ? <span class=\"string\">\": \"</span> + heartbeat + <span class=\"string\">\"ms\"</span> : <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isHeartbeatResponse(message)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Receive heartbeat response in thread \"</span> + Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handler.received(channel, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHeartbeatRequest</span><span class=\"params\">(Object message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message <span class=\"keyword\">instanceof</span> Request &amp;&amp; ((Request) message).isHeartbeat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>HeartbeatHandler</code>负责处理接收到的心跳。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiMessageHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MultiMessageHandler</span><span class=\"params\">(ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> MultiMessage) &#123;</span><br><span class=\"line\">            MultiMessage list = (MultiMessage) message;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object obj : list) &#123;</span><br><span class=\"line\">                handler.received(channel, obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            handler.received(channel, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>MultiMessageHandler</code>如果是批量请求，则依次对请求调用下一个Handler来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecodeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(DecodeHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DecodeHandler</span><span class=\"params\">(ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Decodeable) &#123;</span><br><span class=\"line\">            decode(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">            decode(((Request) message).getData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">            decode(((Response) message).getResult());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        handler.received(channel, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(Object message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message != <span class=\"keyword\">null</span> &amp;&amp; message <span class=\"keyword\">instanceof</span> Decodeable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ((Decodeable) message).decode();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">\"Decode decodeable message \"</span> + message.getClass().getName());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (log.isWarnEnabled()) &#123;</span><br><span class=\"line\">                    log.warn(<span class=\"string\">\"Call Decodeable.decode failed: \"</span> + e.getMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"comment\">// ~ end of catch</span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// ~ end of if</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// ~ end of method decode</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来会调用<code>DecodeHandler</code>，<code>DecodeHandler</code>调用<code>message</code>的<code>decode</code>方法进行序列化。</p>\n<p><strong>HeaderExchangeHandler</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderExchangeHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());</span><br><span class=\"line\">        ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//服务端接受request</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// handle request.</span></span><br><span class=\"line\">                Request request = (Request) message;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (request.isEvent()) &#123;</span><br><span class=\"line\">                    handlerEvent(channel, request);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (request.isTwoWay()) &#123;</span><br><span class=\"line\">                        Response response = handleRequest(exchangeChannel, request);</span><br><span class=\"line\">                        channel.send(response);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        handler.received(exchangeChannel, request.getData());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//客户端接受response</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">                handleResponse(channel, (Response) message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isClientSide(channel)) &#123;</span><br><span class=\"line\">                    Exception e = <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Dubbo client can not supported string message: \"</span> + message + <span class=\"string\">\" in channel: \"</span> + channel + <span class=\"string\">\", url: \"</span> + channel.getUrl());</span><br><span class=\"line\">                    logger.error(e.getMessage(), e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果是String类型的，调用telnet方法。</span></span><br><span class=\"line\">                    String echo = handler.telnet(channel, (String) message);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (echo != <span class=\"keyword\">null</span> &amp;&amp; echo.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        channel.send(echo);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                handler.received(exchangeChannel, message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            HeaderExchangeChannel.removeChannelIfDisconnected(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后经过层层过滤回到<code>DubboProtocol</code>的<code>ExchangeHandler</code>上，通过<code>invoker.invoke(Invocation)</code>调到具体的业务代码上。</p>\n<hr>\n<h3 id=\"invoker\"><a href=\"#invoker\" class=\"headerlink\" title=\"invoker\"></a>invoker</h3><p><img src=\"http://ww1.sinaimg.cn/large/006tNc79ly1g5p1p2axxij31z009o78l.jpg\" alt=\"\"><br>通过调试，可以看到invoker是个链式的结构，最终调用到了具体的服务方法上。我们先看<code>ProtocolFilterWrapper</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProtocolFilterWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果协议不是registry时，调用buildInvokerChain方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> protocol.export(invoker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocol.export(buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">buildInvokerChain</span><span class=\"params\">(<span class=\"keyword\">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>&#123;</span><br><span class=\"line\">        Invoker&lt;T&gt; last = invoker;</span><br><span class=\"line\">        <span class=\"comment\">//获取所有的Filter，循环构建调用链。</span></span><br><span class=\"line\">        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getActivateExtension</span>(<span class=\"title\">invoker</span>.<span class=\"title\">getUrl</span>(), <span class=\"title\">key</span>, <span class=\"title\">group</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!filters.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = filters.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Filter filter = filters.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Invoker&lt;T&gt; next = last;</span><br><span class=\"line\">                last = <span class=\"keyword\">new</span> Invoker&lt;T&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Class&lt;T&gt; <span class=\"title\">getInterface</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.getInterface();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> URL <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.getUrl();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAvailable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.isAvailable();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">invoke</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> filter.invoke(next, invocation);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        invoker.destroy();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.toString();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ProtocolFilterWrapper</code>当协议不是registry时，调用<code>buildInvokerChain</code>方法。<code>buildInvokerChain</code>获取所有的Filter，循环构建调用链。<br>Dubbo对于服务端的<code>Filter</code>有:</p>\n<blockquote>\n<p>com.alibaba.dubbo.rpc.filter.EchoFilter<br>com.alibaba.dubbo.rpc.filter.ClassLoaderFilter<br>com.alibaba.dubbo.rpc.filter.GenericFilter<br>com.alibaba.dubbo.rpc.filter.ContextFilter<br>com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter<br>com.alibaba.dubbo.rpc.filter.TimeoutFilter<br>com.alibaba.dubbo.monitor.support.MonitorFilter<br>com.alibaba.dubbo.rpc.filter.ExceptionFilter</p>\n</blockquote>\n<p>每个<code>Filter</code>的作用不详细展开。</p>\n<p>接下来的<code>InvokerDelegete</code>和<code>DelegateProviderMetaDataInvoker</code>是没有什么业务的委托类，最后看<code>JavassistProxyFactory</code>。</p>\n<p>在<code>ServiceConfig</code>的<code>doExportUrlsFor1Protocol()</code>中，第一次创建了<code>Invoker</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class=\"line\">                        DelegateProviderMetaDataInvoker wrapperInvoker = <span class=\"keyword\">new</span> DelegateProviderMetaDataInvoker(invoker, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>其中<code>proxyFactory</code>默认使用，<code>JavassistProxyFactory</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavassistProxyFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProxyFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class=\"keyword\">new</span> InvokerInvocationHandler(invoker));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">getInvoker</span><span class=\"params\">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Wrapper cannot handle this scenario correctly: the classname contains '$'</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class=\"string\">'$'</span>) &lt; <span class=\"number\">0</span> ? proxy.getClass() : type);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doInvoke</span><span class=\"params\">(T proxy, String methodName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Object[] arguments)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>JavassistProxyFactory</code>使用<code>Wrapper.getWrapper</code>创建<code>Wrapper</code>对象，然后创建<code>AbstractProxyInvoker</code>对象，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Wrapper <span class=\"title\">getWrapper</span><span class=\"params\">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ClassGenerator.isDynamicClass(c)) <span class=\"comment\">// can not wrapper on dynamic class.</span></span><br><span class=\"line\">            c = c.getSuperclass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == Object<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"title\">return</span> <span class=\"title\">OBJECT_WRAPPER</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Wrapper ret = WRAPPER_MAP.get(c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ret = makeWrapper(c);</span><br><span class=\"line\">            WRAPPER_MAP.put(c, ret);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Wrapper <span class=\"title\">makeWrapper</span><span class=\"params\">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ClassLoader cl = ClassHelper.getClassLoader(c);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ClassGenerator cc = ClassGenerator.newInstance(cl);</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; wc = cc.toClass();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Wrapper) wc.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Wrapper</code>通过javassist动态生成<code>Wrapper</code>类，将文件反编译，可以看到代理类的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">DC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] pns;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map pts;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] mns;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] dmns;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class[] mts0;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasProperty</span><span class=\"params\">(String var1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pts.containsKey(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Class <span class=\"title\">getPropertyType</span><span class=\"params\">(String var1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Class)pts.get(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getMethodNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getDeclaredMethodNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dmns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPropertyValue</span><span class=\"params\">(Object var1, String var2, Object var3)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            DemoService var4 = (DemoService)var1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(var6);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchPropertyException(<span class=\"string\">\"Not found property \\\"\"</span> + var2 + <span class=\"string\">\"\\\" filed or setter method in class com.guhailin.sample.DemoService.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getPropertyValue</span><span class=\"params\">(Object var1, String var2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            DemoService var3 = (DemoService)var1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var5) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(var5);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchPropertyException(<span class=\"string\">\"Not found property \\\"\"</span> + var2 + <span class=\"string\">\"\\\" filed or setter method in class com.guhailin.sample.DemoService.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invokeMethod</span><span class=\"params\">(Object var1, String var2, Class[] var3, Object[] var4)</span> <span class=\"keyword\">throws</span> InvocationTargetException </span>&#123;</span><br><span class=\"line\">        DemoService var5;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            var5 = (DemoService)var1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var8) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(var8);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"sayHello\"</span>.equals(var2) &amp;&amp; var3.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> var5.sayHello((String)var4[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var9) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvocationTargetException(var9);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodException(<span class=\"string\">\"Not found method \\\"\"</span> + var2 + <span class=\"string\">\"\\\" in class com.guhailin.sample.DemoService.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Wrapper0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可以看到代理类是如何调用实体类的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h3><p><img src=\"http://ww2.sinaimg.cn/large/006tNc79ly1g4p16b27z7j30lm05dwf4.jpg\" alt=\"\"></p>\n<p>在使用默认<code>AllDispatcher</code>的情况下，<code>Dubbo</code>的线程模型为 <em>1+M+N</em>的模型，即1个acceptor线程，M个IO线程，N个业务线程。</p>\n<h3 id=\"调用栈\"><a href=\"#调用栈\" class=\"headerlink\" title=\"调用栈\"></a>调用栈</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">boss[boss] --&gt; worker[worker]</span><br><span class=\"line\">worker --&gt; nettyServerhandler[nettyServerhandler]</span><br><span class=\"line\">nettyServerhandler --&gt; nettyServer[nettyServer]</span><br><span class=\"line\">nettyServer --&gt; MultiMessageHandler[MultiMessageHandler]</span><br><span class=\"line\">MultiMessageHandler --&gt; HeartBeatHhandler[HeartBeatHhandler]</span><br><span class=\"line\">HeartBeatHhandler --&gt; AllChannelHandler[AllChannelHandler]</span><br><span class=\"line\">AllChannelHandler --&gt; ThreadPool[ThreadPool]</span><br><span class=\"line\">ThreadPool --&gt; DecodeHandler[DecodeHandler]</span><br><span class=\"line\">DecodeHandler --&gt; HeaderExchangehandler[HeaderExchangehandler]</span><br><span class=\"line\">HeaderExchangehandler --&gt; DubboProtocol.ExchangeHandler[DubboProtocol.ExchangeHandler]</span><br><span class=\"line\">DubboProtocol.ExchangeHandler --&gt; Invoker[Invoker]</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dubbo系列（四）服务端调用流程解析\"><a href=\"#dubbo系列（四）服务端调用流程解析\" class=\"headerlink\" title=\"dubbo系列（四）服务端调用流程解析\"></a>dubbo系列（四）服务端调用流程解析</h1><p>[toc]</p>\n<h2 id=\"流程解析\"><a href=\"#流程解析\" class=\"headerlink\" title=\"流程解析\"></a>流程解析</h2><p>通过服务暴露流程，我们知道了dubbo服务端暴露dubbo协议的服务是在DubboProtocol类中进行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">    URL url = invoker.getUrl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按照serviceKey，将DubboExporter存入map中</span></span><br><span class=\"line\">    String key = serviceKey(url);</span><br><span class=\"line\">    DubboExporter&lt;T&gt; exporter = <span class=\"keyword\">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class=\"line\">    exporterMap.put(key, exporter);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);</span><br><span class=\"line\">    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) &#123;</span><br><span class=\"line\">        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stubServiceMethods == <span class=\"keyword\">null</span> || stubServiceMethods.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"consumer [\"</span> + url.getParameter(Constants.INTERFACE_KEY) +</span><br><span class=\"line\">                        <span class=\"string\">\"], has set stubproxy support event ,but no stub methods founded.\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开启服务</span></span><br><span class=\"line\">    openServer(url);</span><br><span class=\"line\">    optimizeSerialization(url);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exporter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openServer</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// find server.</span></span><br><span class=\"line\">    String key = url.getAddress();</span><br><span class=\"line\">    <span class=\"comment\">//client can export a service which's only for server to invoke</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isServer = url.getParameter(Constants.IS_SERVER_KEY, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isServer) &#123;</span><br><span class=\"line\">        ExchangeServer server = serverMap.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (server == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果服务没有启动的话，调用createService方法来启动服务。</span></span><br><span class=\"line\">            <span class=\"comment\">//注意key是address，这里保证了一个address地址只会启动一次</span></span><br><span class=\"line\">            serverMap.put(key, createServer(url));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// server supports reset, use together with override</span></span><br><span class=\"line\">            server.reset(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ExchangeServer <span class=\"title\">createServer</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// send readonly event when server closes, it's enabled by default</span></span><br><span class=\"line\">    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());</span><br><span class=\"line\">    <span class=\"comment\">// enable heartbeat by default</span></span><br><span class=\"line\">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class=\"line\">    <span class=\"comment\">//默认使用netty服务</span></span><br><span class=\"line\">    String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">hasExtension</span>(<span class=\"title\">str</span>))</span></span><br><span class=\"line\">        throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这里写入默认的解码器参数</span></span><br><span class=\"line\">    url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);</span><br><span class=\"line\">    ExchangeServer server;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//最后调用Exchangers的静态方法来启动服务.</span></span><br><span class=\"line\">        server = Exchangers.bind(url, requestHandler);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemotingException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RpcException(<span class=\"string\">\"Fail to start server(url: \"</span> + url + <span class=\"string\">\") \"</span> + e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str = url.getParameter(Constants.CLIENT_KEY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span> &amp;&amp; str.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getSupportedExtensions</span>()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!supportedTypes.contains(str)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RpcException(<span class=\"string\">\"Unsupported client type: \"</span> + str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们这里先不管<code>Invoker</code>对象是做什么的，可以看到在暴露服务前，dubbo先将<code>invoker</code>对象封装进<code>DubboExporter</code>对象中，然后存到一个<code>map</code>对象里。在最后调用<code>bind</code>接口时，除了传入<code>url</code>外，还会传入<code>requestHandler</code>对象，我们先看下<code>requestHandler</code>对象是做什么的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ExchangeHandler requestHandler = <span class=\"keyword\">new</span> ExchangeHandlerAdapter() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">reply</span><span class=\"params\">(ExchangeChannel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Invocation) &#123;</span><br><span class=\"line\">            Invocation inv = (Invocation) message;</span><br><span class=\"line\">            <span class=\"comment\">//从exporterMap中获取invoker对象</span></span><br><span class=\"line\">            Invoker&lt;?&gt; invoker = getInvoker(channel, inv);</span><br><span class=\"line\">            <span class=\"comment\">// need to consider backward-compatibility if it's a callback</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class=\"line\">                String methodsStr = invoker.getUrl().getParameters().get(<span class=\"string\">\"methods\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> hasMethod = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (methodsStr == <span class=\"keyword\">null</span> || methodsStr.indexOf(<span class=\"string\">\",\"</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    hasMethod = inv.getMethodName().equals(methodsStr);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    String[] methods = methodsStr.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String method : methods) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (inv.getMethodName().equals(method)) &#123;</span><br><span class=\"line\">                            hasMethod = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!hasMethod) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The methodName \"</span> + inv.getMethodName()</span><br><span class=\"line\">                            + <span class=\"string\">\" not found in callback service interface ,invoke will be ignored.\"</span></span><br><span class=\"line\">                            + <span class=\"string\">\" please update the api interface. url is:\"</span></span><br><span class=\"line\">                            + invoker.getUrl()) + <span class=\"string\">\" ,invocation is :\"</span> + inv);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invoker.invoke(inv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RemotingException(channel, <span class=\"string\">\"Unsupported request: \"</span></span><br><span class=\"line\">                + (message == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : (message.getClass().getName() + <span class=\"string\">\": \"</span> + message))</span><br><span class=\"line\">                + <span class=\"string\">\", channel: consumer: \"</span> + channel.getRemoteAddress() + <span class=\"string\">\" --&gt; provider: \"</span> + channel.getLocalAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Invocation) &#123;</span><br><span class=\"line\">            reply((ExchangeChannel) channel, message);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.received(channel, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connected</span><span class=\"params\">(Channel channel)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        invoke(channel, Constants.ON_CONNECT_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">disconnected</span><span class=\"params\">(Channel channel)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"disconnected from \"</span> + channel.getRemoteAddress() + <span class=\"string\">\",url:\"</span> + channel.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        invoke(channel, Constants.ON_DISCONNECT_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(Channel channel, String methodKey)</span> </span>&#123;</span><br><span class=\"line\">        Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (invocation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                received(channel, invocation);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"Failed to invoke event method \"</span> + invocation.getMethodName() + <span class=\"string\">\"(), cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Invocation <span class=\"title\">createInvocation</span><span class=\"params\">(Channel channel, URL url, String methodKey)</span> </span>&#123;</span><br><span class=\"line\">        String method = url.getParameter(methodKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method == <span class=\"keyword\">null</span> || method.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RpcInvocation invocation = <span class=\"keyword\">new</span> RpcInvocation(method, <span class=\"keyword\">new</span> Class&lt;?&gt;[<span class=\"number\">0</span>], <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        invocation.setAttachment(Constants.PATH_KEY, url.getPath());</span><br><span class=\"line\">        invocation.setAttachment(Constants.GROUP_KEY, url.getParameter(Constants.GROUP_KEY));</span><br><span class=\"line\">        invocation.setAttachment(Constants.INTERFACE_KEY, url.getParameter(Constants.INTERFACE_KEY));</span><br><span class=\"line\">        invocation.setAttachment(Constants.VERSION_KEY, url.getParameter(Constants.VERSION_KEY));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url.getParameter(Constants.STUB_EVENT_KEY, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">            invocation.setAttachment(Constants.STUB_EVENT_KEY, Boolean.TRUE.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invocation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过<code>requestHandler</code>的实现方法我们可以看到它主要用来处理各种请求回调，我们重点关注<code>reply</code>的回调方法，主要做了3件事情：</p>\n<ol>\n<li>从exporterMap获取具体的invoker对象。</li>\n<li>判断调用的method是否存在。</li>\n<li>调用<code>invoker.invoke</code>。</li>\n</ol>\n<p>我们继续深入<code>Exchangers.bind</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExchangeServer <span class=\"title\">bind</span><span class=\"params\">(URL url, ExchangeHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handler == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class=\"string\">\"exchange\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getExchanger(url).bind(url, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Exchanger <span class=\"title\">getExchanger</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">    String type = url.getParameter(Constants.EXCHANGER_KEY, Constants.DEFAULT_EXCHANGER);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getExchanger(type);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Exchanger <span class=\"title\">getExchanger</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExtensionLoader.getExtensionLoader(Exchanger<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getExtension</span>(<span class=\"title\">type</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Exchangers.bind</code>主要做了2件事情：</p>\n<ol>\n<li>获取<code>Exchanger</code>对象，这里根据SPI默认获取<code>HeaderExchanger</code>，实际上<code>Exchanger</code>也只有这么一个实现类。</li>\n<li>调用<code>Exchanger</code>的<code>bind</code>方法，返回<code>ExchangeServer</code>对象。</li>\n</ol>\n<p>我们再看<code>HeaderExchanger</code>的<code>bind</code>代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ExchangeServer <span class=\"title\">bind</span><span class=\"params\">(URL url, ExchangeHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HeaderExchangeServer(Transporters.bind(url, <span class=\"keyword\">new</span> DecodeHandler(<span class=\"keyword\">new</span> HeaderExchangeHandler(handler))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>HeaderExchanger</code> 主要3件事情：</p>\n<ol>\n<li>封装<code>handler</code>对象，外面分别套了一个<code>HeaderExchangeHandler</code>和<code>DecodeHandler</code>。</li>\n<li><code>Transporters.bind</code>开启服务，传入<code>url</code>和<code>ChannelHandler</code>两个参数，返回<code>Server</code>。</li>\n<li>初始化<code>HeaderExchangeServer</code>对象并返回。</li>\n</ol>\n<p>我们先看<code>HeaderExchangeServer</code>做了什么事情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeaderExchangeServer</span><span class=\"params\">(Server server)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"server == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.server = server;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.heartbeat = server.getUrl().getParameter(Constants.HEARTBEAT_KEY, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.heartbeatTimeout = server.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heartbeatTimeout &lt; heartbeat * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"heartbeatTimeout &lt; heartbeatInterval * 2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startHeartbeatTimer();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stopHeartbeatTimer();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (heartbeat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> HeartBeatTask(<span class=\"keyword\">new</span> HeartBeatTask.ChannelProvider() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;Channel&gt; <span class=\"title\">getChannels</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Collections.unmodifiableCollection(</span><br><span class=\"line\">                                HeaderExchangeServer.<span class=\"keyword\">this</span>.getChannels());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, heartbeat, heartbeatTimeout),</span><br><span class=\"line\">                heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopHeartbeatTimer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ScheduledFuture&lt;?&gt; timer = heartbeatTimer;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer != <span class=\"keyword\">null</span> &amp;&amp; !timer.isCancelled()) &#123;</span><br><span class=\"line\">            timer.cancel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        logger.warn(t.getMessage(), t);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        heartbeatTimer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    doClose();</span><br><span class=\"line\">    server.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>HeaderExchangeServer</code>主要是封装了server对象，并通过<code>ScheduledExecutorService</code>来定时向客户端发送心跳。心跳在这里不详细分析，我们继续深入<code>Transporters.bind</code>看服务是如何暴露的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Server <span class=\"title\">bind</span><span class=\"params\">(URL url, ChannelHandler... handlers)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlers == <span class=\"keyword\">null</span> || handlers.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handlers == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ChannelHandler handler;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlers.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        handler = handlers[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getTransporter().bind(url, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Transporter <span class=\"title\">getTransporter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExtensionLoader.getExtensionLoader(Transporter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getAdaptiveExtension</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Transporters.bind</code>主要做的两件事情：</p>\n<ol>\n<li>通过<code>SPI</code>找到<code>Transporter</code>对象，这里默认使用<code>NettyTransporter</code>。</li>\n<li>调用<code>NettyTransporter.bind</code></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Server <span class=\"title\">bind</span><span class=\"params\">(URL url, ChannelHandler listener)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NettyServer(url, listener);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NettyTransporter.bind</code>方法初始化了一个<code>NettyServer</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NettyServer</span><span class=\"params\">(URL url, ChannelHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//封装ChannelHandler，调用父类的初始化方法。最终会调到doOpen方法上。</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOpen</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">    <span class=\"comment\">//一个boss线程和核数+1（最大不超过32）的worker线程</span></span><br><span class=\"line\">    bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"NettyServerBoss\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">    workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> DefaultThreadFactory(<span class=\"string\">\"NettyServerWorker\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> NettyServerHandler nettyServerHandler = <span class=\"keyword\">new</span> NettyServerHandler(getUrl(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    channels = nettyServerHandler.getChannels();</span><br><span class=\"line\"></span><br><span class=\"line\">    bootstrap.group(bossGroup, workerGroup)</span><br><span class=\"line\">            .channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">            //禁用<span class=\"title\">nagle</span>算法，防止粘包</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">TCP_NODELAY</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">            //允许重复使用本地地址和端口</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">SO_REUSEADDR</span>, <span class=\"title\">Boolean</span>.<span class=\"title\">TRUE</span>)</span></span><br><span class=\"line\"><span class=\"class\">            //<span class=\"title\">ByteBuf</span>分配器</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childOption</span>(<span class=\"title\">ChannelOption</span>.<span class=\"title\">ALLOCATOR</span>, <span class=\"title\">PooledByteBufAllocator</span>.<span class=\"title\">DEFAULT</span>)</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">childHandler</span>(<span class=\"title\">new</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">NioSocketChannel</span>&gt;() </span>&#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(NioSocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//根据之前写入的codec，getCodec()默认获取DubboCountCodec</span></span><br><span class=\"line\">                    NettyCodecAdapter adapter = <span class=\"keyword\">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                    ch.pipeline()</span><br><span class=\"line\">                            .addLast(<span class=\"string\">\"decoder\"</span>, adapter.getDecoder())</span><br><span class=\"line\">                            .addLast(<span class=\"string\">\"encoder\"</span>, adapter.getEncoder())</span><br><span class=\"line\">                            .addLast(<span class=\"string\">\"handler\"</span>, nettyServerHandler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// bind</span></span><br><span class=\"line\">    ChannelFuture channelFuture = bootstrap.bind(getBindAddress());</span><br><span class=\"line\">    channelFuture.syncUninterruptibly();</span><br><span class=\"line\">    channel = channelFuture.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NettyServer</code>主要做的几件事情:</p>\n<ol>\n<li>初始化时对<code>ChannelHandler</code>进行封装。</li>\n<li>初始化<code>NettyServerHandler</code>，并传入<code>NettyServer</code>自身。</li>\n<li>初始化<code>netty</code>的<code>ServerBootstrap</code>，注册3三个<code>ChannelHandler</code>。</li>\n<li>启动服务。</li>\n</ol>\n<p><code>dubbo</code>编解码相关的以后单独讲，我们继续深入<code>nettyServerHandler</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelDuplexHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChannelHandler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NettyServerHandler</span><span class=\"params\">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handler == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            handler.received(channel, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.write(ctx, msg, promise);</span><br><span class=\"line\">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            handler.sent(channel, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NettyServerHandler</code>继承<code>netty</code>的<code>ChannelDuplexHandler</code>，实现了<code>channelRead</code>和<code>write</code>两个方法，最终调用<code>ChannelHandler</code>的<code>received</code>和<code>sent</code>方法。<code>NettyServerHandler</code>可以看成是<code>netty</code>的<code>channelHandler</code>和<code>dubbo</code>的<code>channelHandler</code>的转换。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006tNc79ly1g4osnw3gvdj30py0qs404.jpg\" alt=\"\"></p>\n<p>根据类图可以看到<code>NettyServer</code>实现了<code>dubbo</code>的<code>channelHandler</code>，其<code>sent</code>方法和<code>received</code>方法主要在父类<code>AbstractPeer</code>中实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPeer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Endpoint</span>, <span class=\"title\">ChannelHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractPeer</span><span class=\"params\">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"url == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"handler == null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sent</span><span class=\"params\">(Channel ch, Object msg)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (closed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handler.sent(ch, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel ch, Object msg)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (closed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handler.received(ch, msg);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AbstractPeer</code>调用<code>ChannelHandler</code>的<code>sent</code>和<code>received</code>方法。而<code>ChannelHandler</code>是在<code>NettyServer</code>初始化时传入的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NettyServer</span><span class=\"params\">(URL url, ChannelHandler handler)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ExecutorUtil.setThreadName</code>在url加了一个线程名的参数<code>DubboServerHandler</code>，在传入<code>handler</code>前，<code>ChannelHandlers.wrap</code>对<code>handler</code>进行了封装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelHandlers</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChannelHandlers INSTANCE = <span class=\"keyword\">new</span> ChannelHandlers();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">ChannelHandlers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChannelHandler <span class=\"title\">wrap</span><span class=\"params\">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChannelHandlers.getInstance().wrapInternal(handler, url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> ChannelHandlers <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setTestingChannelHandlers</span><span class=\"params\">(ChannelHandlers instance)</span> </span>&#123;</span><br><span class=\"line\">        INSTANCE = instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> ChannelHandler <span class=\"title\">wrapInternal</span><span class=\"params\">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MultiMessageHandler(<span class=\"keyword\">new</span> HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">                .<span class=\"title\">getAdaptiveExtension</span>().<span class=\"title\">dispatch</span>(<span class=\"title\">handler</span>, <span class=\"title\">url</span>)))</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>wrapInternal</code>方法中，对<code>handler</code>进行了3次的封装：</p>\n<ol>\n<li><code>Dispatcher.dispatch</code></li>\n<li><code>HeartbeatHandler</code></li>\n<li><code>MultiMessageHandler</code></li>\n</ol>\n<p>我们依次来看这3个<code>ChannelHandler</code>各做什么事情。首先<code>Dispatcher</code>是个SPI，默认会使用<code>AllDispatcher</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AllDispatcher</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dispatcher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"all\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ChannelHandler <span class=\"title\">dispatch</span><span class=\"params\">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AllChannelHandler(handler, url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AllChannelHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">WrappedChannelHandler</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        ExecutorService cexecutor = getExecutorService();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            cexecutor.execute(<span class=\"keyword\">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//TODO A temporary solution to the problem that the exception information can not be sent to the opposite end after the thread pool is full. Need a refactoring</span></span><br><span class=\"line\">            <span class=\"comment\">//fix The thread pool is full, refuses to call, does not return, and causes the consumer to wait for time out</span></span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(message <span class=\"keyword\">instanceof</span> Request &amp;&amp; t <span class=\"keyword\">instanceof</span> RejectedExecutionException)&#123;</span><br><span class=\"line\">        \t\tRequest request = (Request)message;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(request.isTwoWay())&#123;</span><br><span class=\"line\">        \t\t\tString msg = <span class=\"string\">\"Server side(\"</span> + url.getIp() + <span class=\"string\">\",\"</span> + url.getPort() + <span class=\"string\">\") threadpool is exhausted ,detail msg:\"</span> + t.getMessage();</span><br><span class=\"line\">        \t\t\tResponse response = <span class=\"keyword\">new</span> Response(request.getId(), request.getVersion());</span><br><span class=\"line\">        \t\t\tresponse.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);</span><br><span class=\"line\">        \t\t\tresponse.setErrorMessage(msg);</span><br><span class=\"line\">        \t\t\tchannel.send(response);</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExecutionException(message, channel, getClass() + <span class=\"string\">\" error when process received event .\"</span>, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelEventRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state == ChannelState.RECEIVED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                handler.received(channel, message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel</span><br><span class=\"line\">                        + <span class=\"string\">\", message is \"</span> + message, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CONNECTED:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.connected(channel);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DISCONNECTED:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.disconnected(channel);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SENT:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.sent(channel, message);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel</span><br><span class=\"line\">                            + <span class=\"string\">\", message is \"</span> + message, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CAUGHT:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    handler.caught(channel, exception);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    logger.warn(<span class=\"string\">\"ChannelEventRunnable handle \"</span> + state + <span class=\"string\">\" operation error, channel is \"</span> + channel</span><br><span class=\"line\">                            + <span class=\"string\">\", message is: \"</span> + message + <span class=\"string\">\", exception is \"</span> + exception, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                logger.warn(<span class=\"string\">\"unknown state: \"</span> + state + <span class=\"string\">\", message is \"</span> + message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AllChannelHandler</code>做的事情其实就是将具体的业务处理代码放入线程池。<code>ChannelEventRunnable</code>中的代码看起来有点怪异，其实是CPU分支预测的优化，具体查看<a href=\"http://hengyunabc.github.io/optimization-tip-if-vs-switch/\" target=\"_blank\" rel=\"noopener\">优化技巧：提前if判断帮助CPU分支预测</a></p>\n<p>这里可以总结一下<code>dubbo</code>的几个线程池和<code>Dispatcher</code>。</p>\n<p><strong>Dispatcher</strong></p>\n<ul>\n<li>all:所有消息都派发到线程池，包括请求、响应、连接事件、断开事件、心跳等。</li>\n<li>direct:所有消息都不派发到线程池，全部在IO线程上直接执行。</li>\n<li>message:只有请求响应消息派发到线程池，其他连接断开事件、心跳等消息，直接在IO线程上执行。</li>\n<li>execution:只请求消息派发到线程池，不含响应，响应和其他连接断开事件、心跳等消息，直接在IO线程上执行。</li>\n<li>connection:在IO线程上，将连接断开事件放入队列，有序逐个执行，其他消息派发到线程池。</li>\n</ul>\n<p><strong>ThreadPool</strong></p>\n<ul>\n<li>fixed:固定大小线程池，启动时建立线程，不关闭，一直持有。（缺省）</li>\n<li>cached:缓存线程池，空闲一分钟自动删除，需要时重建。</li>\n<li>limited:可伸缩线程池，但池中的线程只会增长不会收缩。（为避免收缩时突然来了大流量引起的性能问题）。</li>\n</ul>\n<p>接下来看<code>HeartbeatHandler</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartbeatHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        setReadTimestamp(channel);</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是心跳</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isHeartbeatRequest(message)) &#123;</span><br><span class=\"line\">            Request req = (Request) message;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (req.isTwoWay()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//发送心跳返回</span></span><br><span class=\"line\">                Response res = <span class=\"keyword\">new</span> Response(req.getId(), req.getVersion());</span><br><span class=\"line\">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class=\"line\">                channel.send(res);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> heartbeat = channel.getUrl().getParameter(Constants.HEARTBEAT_KEY, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                        logger.debug(<span class=\"string\">\"Received heartbeat from remote channel \"</span> + channel.getRemoteAddress()</span><br><span class=\"line\">                                + <span class=\"string\">\", cause: The channel has no data-transmission exceeds a heartbeat period\"</span></span><br><span class=\"line\">                                + (heartbeat &gt; <span class=\"number\">0</span> ? <span class=\"string\">\": \"</span> + heartbeat + <span class=\"string\">\"ms\"</span> : <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isHeartbeatResponse(message)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Receive heartbeat response in thread \"</span> + Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handler.received(channel, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHeartbeatRequest</span><span class=\"params\">(Object message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message <span class=\"keyword\">instanceof</span> Request &amp;&amp; ((Request) message).isHeartbeat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>HeartbeatHandler</code>负责处理接收到的心跳。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiMessageHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MultiMessageHandler</span><span class=\"params\">(ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> MultiMessage) &#123;</span><br><span class=\"line\">            MultiMessage list = (MultiMessage) message;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object obj : list) &#123;</span><br><span class=\"line\">                handler.received(channel, obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            handler.received(channel, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>MultiMessageHandler</code>如果是批量请求，则依次对请求调用下一个Handler来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecodeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(DecodeHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DecodeHandler</span><span class=\"params\">(ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Decodeable) &#123;</span><br><span class=\"line\">            decode(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">            decode(((Request) message).getData());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">            decode(((Response) message).getResult());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        handler.received(channel, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(Object message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message != <span class=\"keyword\">null</span> &amp;&amp; message <span class=\"keyword\">instanceof</span> Decodeable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ((Decodeable) message).decode();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">\"Decode decodeable message \"</span> + message.getClass().getName());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (log.isWarnEnabled()) &#123;</span><br><span class=\"line\">                    log.warn(<span class=\"string\">\"Call Decodeable.decode failed: \"</span> + e.getMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"comment\">// ~ end of catch</span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// ~ end of if</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// ~ end of method decode</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来会调用<code>DecodeHandler</code>，<code>DecodeHandler</code>调用<code>message</code>的<code>decode</code>方法进行序列化。</p>\n<p><strong>HeaderExchangeHandler</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeaderExchangeHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelHandlerDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">received</span><span class=\"params\">(Channel channel, Object message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());</span><br><span class=\"line\">        ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//服务端接受request</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Request) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// handle request.</span></span><br><span class=\"line\">                Request request = (Request) message;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (request.isEvent()) &#123;</span><br><span class=\"line\">                    handlerEvent(channel, request);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (request.isTwoWay()) &#123;</span><br><span class=\"line\">                        Response response = handleRequest(exchangeChannel, request);</span><br><span class=\"line\">                        channel.send(response);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        handler.received(exchangeChannel, request.getData());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">//客户端接受response</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> Response) &#123;</span><br><span class=\"line\">                handleResponse(channel, (Response) message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (message <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isClientSide(channel)) &#123;</span><br><span class=\"line\">                    Exception e = <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Dubbo client can not supported string message: \"</span> + message + <span class=\"string\">\" in channel: \"</span> + channel + <span class=\"string\">\", url: \"</span> + channel.getUrl());</span><br><span class=\"line\">                    logger.error(e.getMessage(), e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果是String类型的，调用telnet方法。</span></span><br><span class=\"line\">                    String echo = handler.telnet(channel, (String) message);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (echo != <span class=\"keyword\">null</span> &amp;&amp; echo.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        channel.send(echo);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                handler.received(exchangeChannel, message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            HeaderExchangeChannel.removeChannelIfDisconnected(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后经过层层过滤回到<code>DubboProtocol</code>的<code>ExchangeHandler</code>上，通过<code>invoker.invoke(Invocation)</code>调到具体的业务代码上。</p>\n<hr>\n<h3 id=\"invoker\"><a href=\"#invoker\" class=\"headerlink\" title=\"invoker\"></a>invoker</h3><p><img src=\"http://ww1.sinaimg.cn/large/006tNc79ly1g5p1p2axxij31z009o78l.jpg\" alt=\"\"><br>通过调试，可以看到invoker是个链式的结构，最终调用到了具体的服务方法上。我们先看<code>ProtocolFilterWrapper</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProtocolFilterWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果协议不是registry时，调用buildInvokerChain方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> protocol.export(invoker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> protocol.export(buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">buildInvokerChain</span><span class=\"params\">(<span class=\"keyword\">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>&#123;</span><br><span class=\"line\">        Invoker&lt;T&gt; last = invoker;</span><br><span class=\"line\">        <span class=\"comment\">//获取所有的Filter，循环构建调用链。</span></span><br><span class=\"line\">        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter<span class=\"class\">.<span class=\"keyword\">class</span>).<span class=\"title\">getActivateExtension</span>(<span class=\"title\">invoker</span>.<span class=\"title\">getUrl</span>(), <span class=\"title\">key</span>, <span class=\"title\">group</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!filters.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = filters.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Filter filter = filters.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Invoker&lt;T&gt; next = last;</span><br><span class=\"line\">                last = <span class=\"keyword\">new</span> Invoker&lt;T&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Class&lt;T&gt; <span class=\"title\">getInterface</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.getInterface();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> URL <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.getUrl();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAvailable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.isAvailable();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">invoke</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> filter.invoke(next, invocation);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        invoker.destroy();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> invoker.toString();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ProtocolFilterWrapper</code>当协议不是registry时，调用<code>buildInvokerChain</code>方法。<code>buildInvokerChain</code>获取所有的Filter，循环构建调用链。<br>Dubbo对于服务端的<code>Filter</code>有:</p>\n<blockquote>\n<p>com.alibaba.dubbo.rpc.filter.EchoFilter<br>com.alibaba.dubbo.rpc.filter.ClassLoaderFilter<br>com.alibaba.dubbo.rpc.filter.GenericFilter<br>com.alibaba.dubbo.rpc.filter.ContextFilter<br>com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter<br>com.alibaba.dubbo.rpc.filter.TimeoutFilter<br>com.alibaba.dubbo.monitor.support.MonitorFilter<br>com.alibaba.dubbo.rpc.filter.ExceptionFilter</p>\n</blockquote>\n<p>每个<code>Filter</code>的作用不详细展开。</p>\n<p>接下来的<code>InvokerDelegete</code>和<code>DelegateProviderMetaDataInvoker</code>是没有什么业务的委托类，最后看<code>JavassistProxyFactory</code>。</p>\n<p>在<code>ServiceConfig</code>的<code>doExportUrlsFor1Protocol()</code>中，第一次创建了<code>Invoker</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class=\"line\">                        DelegateProviderMetaDataInvoker wrapperInvoker = <span class=\"keyword\">new</span> DelegateProviderMetaDataInvoker(invoker, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>其中<code>proxyFactory</code>默认使用，<code>JavassistProxyFactory</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavassistProxyFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProxyFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class=\"keyword\">new</span> InvokerInvocationHandler(invoker));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">getInvoker</span><span class=\"params\">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Wrapper cannot handle this scenario correctly: the classname contains '$'</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class=\"string\">'$'</span>) &lt; <span class=\"number\">0</span> ? proxy.getClass() : type);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doInvoke</span><span class=\"params\">(T proxy, String methodName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Object[] arguments)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>JavassistProxyFactory</code>使用<code>Wrapper.getWrapper</code>创建<code>Wrapper</code>对象，然后创建<code>AbstractProxyInvoker</code>对象，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Wrapper <span class=\"title\">getWrapper</span><span class=\"params\">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ClassGenerator.isDynamicClass(c)) <span class=\"comment\">// can not wrapper on dynamic class.</span></span><br><span class=\"line\">            c = c.getSuperclass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == Object<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"title\">return</span> <span class=\"title\">OBJECT_WRAPPER</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Wrapper ret = WRAPPER_MAP.get(c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ret = makeWrapper(c);</span><br><span class=\"line\">            WRAPPER_MAP.put(c, ret);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Wrapper <span class=\"title\">makeWrapper</span><span class=\"params\">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ClassLoader cl = ClassHelper.getClassLoader(c);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ClassGenerator cc = ClassGenerator.newInstance(cl);</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; wc = cc.toClass();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Wrapper) wc.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Wrapper</code>通过javassist动态生成<code>Wrapper</code>类，将文件反编译，可以看到代理类的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrapper0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Wrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">DC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] pns;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map pts;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] mns;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] dmns;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class[] mts0;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasProperty</span><span class=\"params\">(String var1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pts.containsKey(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Class <span class=\"title\">getPropertyType</span><span class=\"params\">(String var1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Class)pts.get(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getMethodNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getDeclaredMethodNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dmns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPropertyValue</span><span class=\"params\">(Object var1, String var2, Object var3)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            DemoService var4 = (DemoService)var1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(var6);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchPropertyException(<span class=\"string\">\"Not found property \\\"\"</span> + var2 + <span class=\"string\">\"\\\" filed or setter method in class com.guhailin.sample.DemoService.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getPropertyValue</span><span class=\"params\">(Object var1, String var2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            DemoService var3 = (DemoService)var1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var5) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(var5);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchPropertyException(<span class=\"string\">\"Not found property \\\"\"</span> + var2 + <span class=\"string\">\"\\\" filed or setter method in class com.guhailin.sample.DemoService.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invokeMethod</span><span class=\"params\">(Object var1, String var2, Class[] var3, Object[] var4)</span> <span class=\"keyword\">throws</span> InvocationTargetException </span>&#123;</span><br><span class=\"line\">        DemoService var5;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            var5 = (DemoService)var1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var8) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(var8);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"sayHello\"</span>.equals(var2) &amp;&amp; var3.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> var5.sayHello((String)var4[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var9) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvocationTargetException(var9);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodException(<span class=\"string\">\"Not found method \\\"\"</span> + var2 + <span class=\"string\">\"\\\" in class com.guhailin.sample.DemoService.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Wrapper0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可以看到代理类是如何调用实体类的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h3><p><img src=\"http://ww2.sinaimg.cn/large/006tNc79ly1g4p16b27z7j30lm05dwf4.jpg\" alt=\"\"></p>\n<p>在使用默认<code>AllDispatcher</code>的情况下，<code>Dubbo</code>的线程模型为 <em>1+M+N</em>的模型，即1个acceptor线程，M个IO线程，N个业务线程。</p>\n<h3 id=\"调用栈\"><a href=\"#调用栈\" class=\"headerlink\" title=\"调用栈\"></a>调用栈</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">boss[boss] --&gt; worker[worker]</span><br><span class=\"line\">worker --&gt; nettyServerhandler[nettyServerhandler]</span><br><span class=\"line\">nettyServerhandler --&gt; nettyServer[nettyServer]</span><br><span class=\"line\">nettyServer --&gt; MultiMessageHandler[MultiMessageHandler]</span><br><span class=\"line\">MultiMessageHandler --&gt; HeartBeatHhandler[HeartBeatHhandler]</span><br><span class=\"line\">HeartBeatHhandler --&gt; AllChannelHandler[AllChannelHandler]</span><br><span class=\"line\">AllChannelHandler --&gt; ThreadPool[ThreadPool]</span><br><span class=\"line\">ThreadPool --&gt; DecodeHandler[DecodeHandler]</span><br><span class=\"line\">DecodeHandler --&gt; HeaderExchangehandler[HeaderExchangehandler]</span><br><span class=\"line\">HeaderExchangehandler --&gt; DubboProtocol.ExchangeHandler[DubboProtocol.ExchangeHandler]</span><br><span class=\"line\">DubboProtocol.ExchangeHandler --&gt; Invoker[Invoker]</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"Dubbo系列-服务暴露","date":"2019-08-05T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# Dubbo服务暴露\n\n\nDubbo服务暴露的入口是`ServiceBean`。\n\n```java\npublic class ServiceBean<T> extends ServiceConfig<T> implements InitializingBean, DisposableBean,\n        ApplicationContextAware, ApplicationListener<ContextRefreshedEvent>, BeanNameAware,\n        ApplicationEventPublisherAware{\n        \n    public void afterPropertiesSet(){\n    \n        ...\n        \n        if (!isDelay()) {\n            //判断是否延迟暴露\n            export();\n        }\n    }\n    \n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        if (isDelay() && !isExported() && !isUnexported()) {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"The service ready on spring started. service: \" + getInterface());\n            }\n            export();\n        }\n    }\n    \n    @Override\n    public void export() {\n        super.export();\n        // Publish ServiceBeanExportedEvent\n        publishExportEvent();\n    }  \n}\n\n```\n\n`ServiceBean`的启动入口有2个，最终都是调用父类`ServiceConfig`的`export`方法。\n\n\n```java\npublic class ServiceConfig<T> extends AbstractServiceConfig {\n    public synchronized void export() {\n    \n        ...\n        //延迟暴露或者立即暴露\n        if (delay != null && delay > 0) {\n            delayExportExecutor.schedule(new Runnable() {\n                @Override\n                public void run() {\n                    doExport();\n                }\n            }, delay, TimeUnit.MILLISECONDS);\n        } else {\n            doExport();\n        }\n    }\n\n    protected synchronized void doExport() {\n        ...\n        doExportUrls();\n    }\n    \n    private void doExportUrls() {\n        List<URL> registryURLs = loadRegistries(true);\n        //循环处理多个协议\n        for (ProtocolConfig protocolConfig : protocols) {\n            doExportUrlsFor1Protocol(protocolConfig, registryURLs);\n        }\n    }\n    \n    private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\n        //doExportUrlsFor1Protocol里的代码很多，这里只展示关键的几行代码\n        \n        Invoker<?> invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));\n                        DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);\n\n        Exporter<?> exporter = protocol.export(wrapperInvoker);\n        exporters.add(exporter);\n    }\n}\n```\n\n这里主要做了2件事情：\n* `proxyFactory.getInvoker`，传入`ref`、`interfaceClass`、`url`对象，返回`Invoker`，其中`ref`即具体的Service实例。`Invoker`对下层分装了具体调用服务的细节。\n* `protocol.export`，这里根据url实际调用的是`RegistryProtocol`。\n\n\n```java\npublic class RegistryProtocol implements Protocol {\n    @Override\n    public <T> Exporter<T> export(final Invoker<T> originInvoker) throws RpcException {\n        // 导出服务\n        final ExporterChangeableWrapper<T> exporter = doLocalExport(originInvoker);\n\n        // 获取注册中心 URL，以 zookeeper 注册中心为例，得到的示例 URL 如下：\n        // zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&dubbo=2.0.2&export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider\n        URL registryUrl = getRegistryUrl(originInvoker);\n\n        // 根据 URL 加载 Registry 实现类，比如 ZookeeperRegistry\n        final Registry registry = getRegistry(originInvoker);\n        // 获取已注册的服务提供者 URL，比如：\n    // dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&application=demo-provider&dubbo=2.0.2&generic=false&interface=com.alibaba.dubbo.demo.DemoService&methods=sayHello\n        final URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker);\n\n        //to judge to delay publish whether or not\n        boolean register = registeredProviderUrl.getParameter(\"register\", true);\n\n        ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);\n\n        if (register) {\n            // 向注册中心注册服务\n            register(registryUrl, registeredProviderUrl);\n            ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(true);\n        }\n\n        \n        final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);\n        final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker);\n        overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);\n        // 向注册中心进行订阅 override 数据\n        registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);\n        // 创建并返回 DestroyableExporter\n        return new DestroyableExporter<T>(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);\n    }\n    \n    public void register(URL registryUrl, URL registedProviderUrl) {\n        Registry registry = registryFactory.getRegistry(registryUrl);\n        registry.register(registedProviderUrl);\n    }\n}\n\n```\n\n`RegistryProtocol`主要做的几件事情：\n\n* `doLocalExport()`暴露本地服务，一般是调用的`DubboProtocol`的`export`方法，`DubboProtocol`默认通过`Netty`开启端口。这里不做详细展开。\n* `register()`方法向注册中心注册服务。一般我们使用zookeepr注册中心。\n* `registry.subscribe`向注册中心进行订阅 override 数据，这个以后再分析。\n\n我们重点看`ZookeeperRegistry`的`register`方法。\n\n```java\npublic class ZookeeperRegistry extends FailbackRegistry {\n    public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) {\n        super(url);\n        \n        ...\n        \n        zkClient = zookeeperTransporter.connect(url);\n        zkClient.addStateListener(new StateListener() {\n            @Override\n            public void stateChanged(int state) {\n                //如果注册中心重连，所有已注册服务重新注册\n                if (state == RECONNECTED) {\n                    try {\n                        recover();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n    }\n\n    @Override\n    protected void doRegister(URL url) {\n        try {\n            //第二个参数默认为true，表示创建临时节点\n            zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to register \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n        }\n    }\n}\n\n```\n\n```java\npublic abstract class FailbackRegistry extends AbstractRegistry {\n    public FailbackRegistry(URL url) {\n        super(url);\n        this.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);\n        this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() {\n            @Override\n            public void run() {\n                // Check and connect to the registry\n                try {\n                    retry();\n                } catch (Throwable t) { // Defensive fault tolerance\n                    logger.error(\"Unexpected error occur at failed retry, cause: \" + t.getMessage(), t);\n                }\n            }\n        }, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public void register(URL url) {\n        super.register(url);\n        failedRegistered.remove(url);\n        failedUnregistered.remove(url);\n        try {\n            // Sending a registration request to the server side\n            doRegister(url);\n        } catch (Exception e) {\n            Throwable t = e;\n\n            // If the startup detection is opened, the Exception is thrown directly.\n            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)\n                    && url.getParameter(Constants.CHECK_KEY, true)\n                    && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());\n            boolean skipFailback = t instanceof SkipFailbackWrapperException;\n            if (check || skipFailback) {\n                if (skipFailback) {\n                    t = t.getCause();\n                }\n                throw new IllegalStateException(\"Failed to register \" + url + \" to registry \" + getUrl().getAddress() + \", cause: \" + t.getMessage(), t);\n            } else {\n                logger.error(\"Failed to register \" + url + \", waiting for retry, cause: \" + t.getMessage(), t);\n            }\n\n            // Record a failed registration request to a failed list, retry regularly\n            failedRegistered.add(url);\n        }\n    }\n}\n```\n\n`ZookeeperRegistry`继承了`FailbackRegistry`，`FailbackRegistry`顾名思义，实现了failback策略，当请求失败时，会进行重试。构造函数里初始化了一个`ScheduledExecutorService`，定时的调用`retry()`。最后调用子类的`doRegister()`来实现注册。\n\n`ZookeeperRegistry`通过`zookeeperTransporter.connect()`初始化了`ZookeeperClient`对象，在`doRegister()`方法中调用`zkClient.create()`来创建节点，默认创建临时节点。\n\n```java\npublic class CuratorZookeeperTransporter implements ZookeeperTransporter {\n\n    @Override\n    public ZookeeperClient connect(URL url) {\n        return new CuratorZookeeperClient(url);\n    }\n\n}\n\n\n```\n\n```java\npublic class CuratorZookeeperClient extends AbstractZookeeperClient<CuratorWatcher> {\n    private final CuratorFramework client;\n    public CuratorZookeeperClient(URL url) {\n        super(url);\n        try {\n            CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n                    .connectString(url.getBackupAddress())\n                    .retryPolicy(new RetryNTimes(1, 1000))\n                    .connectionTimeoutMs(5000);\n            String authority = url.getAuthority();\n            if (authority != null && authority.length() > 0) {\n                builder = builder.authorization(\"digest\", authority.getBytes());\n            }\n            client = builder.build();\n            client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState state) {\n                    if (state == ConnectionState.LOST) {\n                        CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);\n                    } else if (state == ConnectionState.CONNECTED) {\n                        CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);\n                    } else if (state == ConnectionState.RECONNECTED) {\n                        CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);\n                    }\n                }\n            });\n            client.start();\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n    @Override\n    public void createPersistent(String path) {\n        try {\n            client.create().forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n\n    @Override\n    public void createEphemeral(String path) {\n        try {\n            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n}\n```\n\n\n```java\npublic abstract class AbstractZookeeperClient<TargetChildListener> implements ZookeeperClient {\n    @Override\n    public void create(String path, boolean ephemeral) {\n        if (!ephemeral) {\n            if (checkExists(path)) {\n                return;\n            }\n        }\n        int i = path.lastIndexOf('/');\n        if (i > 0) {\n            create(path.substring(0, i), false);\n        }\n        if (ephemeral) {\n            createEphemeral(path);\n        } else {\n            createPersistent(path);\n        }\n    }\n}\n```\n可以看到最终是通过`CuratorFramework`和zookeeper进行通信的。\n\n## 总结\n\n最后整个服务暴露流程可以总结如下：\n\n```\nServiceBean#export\n    ->ServiceConfig#export\n        ->RegistryProtocol#export\n            ->DubboProtocol#export   //暴露Dubbo服务\n            ->CuratorZookeeperClient#doRegister   //注册中心\n                ->ZookeeperClient#create\n                    ->CuratorFramework#create\n```\n","source":"_posts/2019-08-06-Dubbo系列-服务暴露.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列-服务暴露\"\ndate:       2019-08-06\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# Dubbo服务暴露\n\n\nDubbo服务暴露的入口是`ServiceBean`。\n\n```java\npublic class ServiceBean<T> extends ServiceConfig<T> implements InitializingBean, DisposableBean,\n        ApplicationContextAware, ApplicationListener<ContextRefreshedEvent>, BeanNameAware,\n        ApplicationEventPublisherAware{\n        \n    public void afterPropertiesSet(){\n    \n        ...\n        \n        if (!isDelay()) {\n            //判断是否延迟暴露\n            export();\n        }\n    }\n    \n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        if (isDelay() && !isExported() && !isUnexported()) {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"The service ready on spring started. service: \" + getInterface());\n            }\n            export();\n        }\n    }\n    \n    @Override\n    public void export() {\n        super.export();\n        // Publish ServiceBeanExportedEvent\n        publishExportEvent();\n    }  \n}\n\n```\n\n`ServiceBean`的启动入口有2个，最终都是调用父类`ServiceConfig`的`export`方法。\n\n\n```java\npublic class ServiceConfig<T> extends AbstractServiceConfig {\n    public synchronized void export() {\n    \n        ...\n        //延迟暴露或者立即暴露\n        if (delay != null && delay > 0) {\n            delayExportExecutor.schedule(new Runnable() {\n                @Override\n                public void run() {\n                    doExport();\n                }\n            }, delay, TimeUnit.MILLISECONDS);\n        } else {\n            doExport();\n        }\n    }\n\n    protected synchronized void doExport() {\n        ...\n        doExportUrls();\n    }\n    \n    private void doExportUrls() {\n        List<URL> registryURLs = loadRegistries(true);\n        //循环处理多个协议\n        for (ProtocolConfig protocolConfig : protocols) {\n            doExportUrlsFor1Protocol(protocolConfig, registryURLs);\n        }\n    }\n    \n    private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\n        //doExportUrlsFor1Protocol里的代码很多，这里只展示关键的几行代码\n        \n        Invoker<?> invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));\n                        DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);\n\n        Exporter<?> exporter = protocol.export(wrapperInvoker);\n        exporters.add(exporter);\n    }\n}\n```\n\n这里主要做了2件事情：\n* `proxyFactory.getInvoker`，传入`ref`、`interfaceClass`、`url`对象，返回`Invoker`，其中`ref`即具体的Service实例。`Invoker`对下层分装了具体调用服务的细节。\n* `protocol.export`，这里根据url实际调用的是`RegistryProtocol`。\n\n\n```java\npublic class RegistryProtocol implements Protocol {\n    @Override\n    public <T> Exporter<T> export(final Invoker<T> originInvoker) throws RpcException {\n        // 导出服务\n        final ExporterChangeableWrapper<T> exporter = doLocalExport(originInvoker);\n\n        // 获取注册中心 URL，以 zookeeper 注册中心为例，得到的示例 URL 如下：\n        // zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&dubbo=2.0.2&export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider\n        URL registryUrl = getRegistryUrl(originInvoker);\n\n        // 根据 URL 加载 Registry 实现类，比如 ZookeeperRegistry\n        final Registry registry = getRegistry(originInvoker);\n        // 获取已注册的服务提供者 URL，比如：\n    // dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&application=demo-provider&dubbo=2.0.2&generic=false&interface=com.alibaba.dubbo.demo.DemoService&methods=sayHello\n        final URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker);\n\n        //to judge to delay publish whether or not\n        boolean register = registeredProviderUrl.getParameter(\"register\", true);\n\n        ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);\n\n        if (register) {\n            // 向注册中心注册服务\n            register(registryUrl, registeredProviderUrl);\n            ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(true);\n        }\n\n        \n        final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);\n        final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker);\n        overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);\n        // 向注册中心进行订阅 override 数据\n        registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);\n        // 创建并返回 DestroyableExporter\n        return new DestroyableExporter<T>(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);\n    }\n    \n    public void register(URL registryUrl, URL registedProviderUrl) {\n        Registry registry = registryFactory.getRegistry(registryUrl);\n        registry.register(registedProviderUrl);\n    }\n}\n\n```\n\n`RegistryProtocol`主要做的几件事情：\n\n* `doLocalExport()`暴露本地服务，一般是调用的`DubboProtocol`的`export`方法，`DubboProtocol`默认通过`Netty`开启端口。这里不做详细展开。\n* `register()`方法向注册中心注册服务。一般我们使用zookeepr注册中心。\n* `registry.subscribe`向注册中心进行订阅 override 数据，这个以后再分析。\n\n我们重点看`ZookeeperRegistry`的`register`方法。\n\n```java\npublic class ZookeeperRegistry extends FailbackRegistry {\n    public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) {\n        super(url);\n        \n        ...\n        \n        zkClient = zookeeperTransporter.connect(url);\n        zkClient.addStateListener(new StateListener() {\n            @Override\n            public void stateChanged(int state) {\n                //如果注册中心重连，所有已注册服务重新注册\n                if (state == RECONNECTED) {\n                    try {\n                        recover();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n    }\n\n    @Override\n    protected void doRegister(URL url) {\n        try {\n            //第二个参数默认为true，表示创建临时节点\n            zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to register \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n        }\n    }\n}\n\n```\n\n```java\npublic abstract class FailbackRegistry extends AbstractRegistry {\n    public FailbackRegistry(URL url) {\n        super(url);\n        this.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);\n        this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() {\n            @Override\n            public void run() {\n                // Check and connect to the registry\n                try {\n                    retry();\n                } catch (Throwable t) { // Defensive fault tolerance\n                    logger.error(\"Unexpected error occur at failed retry, cause: \" + t.getMessage(), t);\n                }\n            }\n        }, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public void register(URL url) {\n        super.register(url);\n        failedRegistered.remove(url);\n        failedUnregistered.remove(url);\n        try {\n            // Sending a registration request to the server side\n            doRegister(url);\n        } catch (Exception e) {\n            Throwable t = e;\n\n            // If the startup detection is opened, the Exception is thrown directly.\n            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)\n                    && url.getParameter(Constants.CHECK_KEY, true)\n                    && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());\n            boolean skipFailback = t instanceof SkipFailbackWrapperException;\n            if (check || skipFailback) {\n                if (skipFailback) {\n                    t = t.getCause();\n                }\n                throw new IllegalStateException(\"Failed to register \" + url + \" to registry \" + getUrl().getAddress() + \", cause: \" + t.getMessage(), t);\n            } else {\n                logger.error(\"Failed to register \" + url + \", waiting for retry, cause: \" + t.getMessage(), t);\n            }\n\n            // Record a failed registration request to a failed list, retry regularly\n            failedRegistered.add(url);\n        }\n    }\n}\n```\n\n`ZookeeperRegistry`继承了`FailbackRegistry`，`FailbackRegistry`顾名思义，实现了failback策略，当请求失败时，会进行重试。构造函数里初始化了一个`ScheduledExecutorService`，定时的调用`retry()`。最后调用子类的`doRegister()`来实现注册。\n\n`ZookeeperRegistry`通过`zookeeperTransporter.connect()`初始化了`ZookeeperClient`对象，在`doRegister()`方法中调用`zkClient.create()`来创建节点，默认创建临时节点。\n\n```java\npublic class CuratorZookeeperTransporter implements ZookeeperTransporter {\n\n    @Override\n    public ZookeeperClient connect(URL url) {\n        return new CuratorZookeeperClient(url);\n    }\n\n}\n\n\n```\n\n```java\npublic class CuratorZookeeperClient extends AbstractZookeeperClient<CuratorWatcher> {\n    private final CuratorFramework client;\n    public CuratorZookeeperClient(URL url) {\n        super(url);\n        try {\n            CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n                    .connectString(url.getBackupAddress())\n                    .retryPolicy(new RetryNTimes(1, 1000))\n                    .connectionTimeoutMs(5000);\n            String authority = url.getAuthority();\n            if (authority != null && authority.length() > 0) {\n                builder = builder.authorization(\"digest\", authority.getBytes());\n            }\n            client = builder.build();\n            client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n                @Override\n                public void stateChanged(CuratorFramework client, ConnectionState state) {\n                    if (state == ConnectionState.LOST) {\n                        CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);\n                    } else if (state == ConnectionState.CONNECTED) {\n                        CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);\n                    } else if (state == ConnectionState.RECONNECTED) {\n                        CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);\n                    }\n                }\n            });\n            client.start();\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n    @Override\n    public void createPersistent(String path) {\n        try {\n            client.create().forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n\n    @Override\n    public void createEphemeral(String path) {\n        try {\n            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n}\n```\n\n\n```java\npublic abstract class AbstractZookeeperClient<TargetChildListener> implements ZookeeperClient {\n    @Override\n    public void create(String path, boolean ephemeral) {\n        if (!ephemeral) {\n            if (checkExists(path)) {\n                return;\n            }\n        }\n        int i = path.lastIndexOf('/');\n        if (i > 0) {\n            create(path.substring(0, i), false);\n        }\n        if (ephemeral) {\n            createEphemeral(path);\n        } else {\n            createPersistent(path);\n        }\n    }\n}\n```\n可以看到最终是通过`CuratorFramework`和zookeeper进行通信的。\n\n## 总结\n\n最后整个服务暴露流程可以总结如下：\n\n```\nServiceBean#export\n    ->ServiceConfig#export\n        ->RegistryProtocol#export\n            ->DubboProtocol#export   //暴露Dubbo服务\n            ->CuratorZookeeperClient#doRegister   //注册中心\n                ->ZookeeperClient#create\n                    ->CuratorFramework#create\n```\n","slug":"2019-08-06-Dubbo系列-服务暴露","published":1,"updated":"2019-08-06T06:39:11.169Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a400051fytblvw44pi","content":"<h1 id=\"Dubbo服务暴露\"><a href=\"#Dubbo服务暴露\" class=\"headerlink\" title=\"Dubbo服务暴露\"></a>Dubbo服务暴露</h1><p>Dubbo服务暴露的入口是<code>ServiceBean</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceBean</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ServiceConfig</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span>, <span class=\"title\">DisposableBean</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ApplicationContextAware</span>, <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ContextRefreshedEvent</span>&gt;, <span class=\"title\">BeanNameAware</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ApplicationEventPublisherAware</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isDelay()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否延迟暴露</span></span><br><span class=\"line\">            export();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">                logger.info(<span class=\"string\">\"The service ready on spring started. service: \"</span> + getInterface());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            export();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">export</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.export();</span><br><span class=\"line\">        <span class=\"comment\">// Publish ServiceBeanExportedEvent</span></span><br><span class=\"line\">        publishExportEvent();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ServiceBean</code>的启动入口有2个，最终都是调用父类<code>ServiceConfig</code>的<code>export</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceConfig</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractServiceConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">export</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//延迟暴露或者立即暴露</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delay != <span class=\"keyword\">null</span> &amp;&amp; delay &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            delayExportExecutor.schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    doExport();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, delay, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            doExport();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doExport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        doExportUrls();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doExportUrls</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;URL&gt; registryURLs = loadRegistries(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//循环处理多个协议</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ProtocolConfig protocolConfig : protocols) &#123;</span><br><span class=\"line\">            doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doExportUrlsFor1Protocol</span><span class=\"params\">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//doExportUrlsFor1Protocol里的代码很多，这里只展示关键的几行代码</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class=\"line\">                        DelegateProviderMetaDataInvoker wrapperInvoker = <span class=\"keyword\">new</span> DelegateProviderMetaDataInvoker(invoker, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class=\"line\">        exporters.add(exporter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里主要做了2件事情：</p>\n<ul>\n<li><code>proxyFactory.getInvoker</code>，传入<code>ref</code>、<code>interfaceClass</code>、<code>url</code>对象，返回<code>Invoker</code>，其中<code>ref</code>即具体的Service实例。<code>Invoker</code>对下层分装了具体调用服务的细节。</li>\n<li><code>protocol.export</code>，这里根据url实际调用的是<code>RegistryProtocol</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegistryProtocol</span> <span class=\"keyword\">implements</span> <span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(<span class=\"keyword\">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 导出服务</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取注册中心 URL，以 zookeeper 注册中心为例，得到的示例 URL 如下：</span></span><br><span class=\"line\">        <span class=\"comment\">// zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.2&amp;export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider</span></span><br><span class=\"line\">        URL registryUrl = getRegistryUrl(originInvoker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据 URL 加载 Registry 实现类，比如 ZookeeperRegistry</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Registry registry = getRegistry(originInvoker);</span><br><span class=\"line\">        <span class=\"comment\">// 获取已注册的服务提供者 URL，比如：</span></span><br><span class=\"line\">    <span class=\"comment\">// dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//to judge to delay publish whether or not</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> register = registeredProviderUrl.getParameter(<span class=\"string\">\"register\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (register) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 向注册中心注册服务</span></span><br><span class=\"line\">            register(registryUrl, registeredProviderUrl);</span><br><span class=\"line\">            ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> OverrideListener overrideSubscribeListener = <span class=\"keyword\">new</span> OverrideListener(overrideSubscribeUrl, originInvoker);</span><br><span class=\"line\">        overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class=\"line\">        <span class=\"comment\">// 向注册中心进行订阅 override 数据</span></span><br><span class=\"line\">        registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class=\"line\">        <span class=\"comment\">// 创建并返回 DestroyableExporter</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DestroyableExporter&lt;T&gt;(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(URL registryUrl, URL registedProviderUrl)</span> </span>&#123;</span><br><span class=\"line\">        Registry registry = registryFactory.getRegistry(registryUrl);</span><br><span class=\"line\">        registry.register(registedProviderUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RegistryProtocol</code>主要做的几件事情：</p>\n<ul>\n<li><code>doLocalExport()</code>暴露本地服务，一般是调用的<code>DubboProtocol</code>的<code>export</code>方法，<code>DubboProtocol</code>默认通过<code>Netty</code>开启端口。这里不做详细展开。</li>\n<li><code>register()</code>方法向注册中心注册服务。一般我们使用zookeepr注册中心。</li>\n<li><code>registry.subscribe</code>向注册中心进行订阅 override 数据，这个以后再分析。</li>\n</ul>\n<p>我们重点看<code>ZookeeperRegistry</code>的<code>register</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZookeeperRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">FailbackRegistry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZookeeperRegistry</span><span class=\"params\">(URL url, ZookeeperTransporter zookeeperTransporter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(url);</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        zkClient = zookeeperTransporter.connect(url);</span><br><span class=\"line\">        zkClient.addStateListener(<span class=\"keyword\">new</span> StateListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果注册中心重连，所有已注册服务重新注册</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (state == RECONNECTED) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        recover();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        logger.error(e.getMessage(), e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRegister</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//第二个参数默认为true，表示创建临时节点</span></span><br><span class=\"line\">            zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RpcException(<span class=\"string\">\"Failed to register \"</span> + url + <span class=\"string\">\" to zookeeper \"</span> + getUrl() + <span class=\"string\">\", cause: \"</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FailbackRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRegistry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FailbackRegistry</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(url);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.retryFuture = retryExecutor.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Check and connect to the registry</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    retry();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123; <span class=\"comment\">// Defensive fault tolerance</span></span><br><span class=\"line\">                    logger.error(<span class=\"string\">\"Unexpected error occur at failed retry, cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.register(url);</span><br><span class=\"line\">        failedRegistered.remove(url);</span><br><span class=\"line\">        failedUnregistered.remove(url);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Sending a registration request to the server side</span></span><br><span class=\"line\">            doRegister(url);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            Throwable t = e;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// If the startup detection is opened, the Exception is thrown directly.</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> check = getUrl().getParameter(Constants.CHECK_KEY, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    &amp;&amp; url.getParameter(Constants.CHECK_KEY, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    &amp;&amp; !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> skipFailback = t <span class=\"keyword\">instanceof</span> SkipFailbackWrapperException;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check || skipFailback) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (skipFailback) &#123;</span><br><span class=\"line\">                    t = t.getCause();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Failed to register \"</span> + url + <span class=\"string\">\" to registry \"</span> + getUrl().getAddress() + <span class=\"string\">\", cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"Failed to register \"</span> + url + <span class=\"string\">\", waiting for retry, cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Record a failed registration request to a failed list, retry regularly</span></span><br><span class=\"line\">            failedRegistered.add(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ZookeeperRegistry</code>继承了<code>FailbackRegistry</code>，<code>FailbackRegistry</code>顾名思义，实现了failback策略，当请求失败时，会进行重试。构造函数里初始化了一个<code>ScheduledExecutorService</code>，定时的调用<code>retry()</code>。最后调用子类的<code>doRegister()</code>来实现注册。</p>\n<p><code>ZookeeperRegistry</code>通过<code>zookeeperTransporter.connect()</code>初始化了<code>ZookeeperClient</code>对象，在<code>doRegister()</code>方法中调用<code>zkClient.create()</code>来创建节点，默认创建临时节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CuratorZookeeperTransporter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ZookeeperTransporter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ZookeeperClient <span class=\"title\">connect</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CuratorZookeeperClient(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CuratorZookeeperClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractZookeeperClient</span>&lt;<span class=\"title\">CuratorWatcher</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CuratorFramework client;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CuratorZookeeperClient</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(url);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()</span><br><span class=\"line\">                    .connectString(url.getBackupAddress())</span><br><span class=\"line\">                    .retryPolicy(<span class=\"keyword\">new</span> RetryNTimes(<span class=\"number\">1</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">                    .connectionTimeoutMs(<span class=\"number\">5000</span>);</span><br><span class=\"line\">            String authority = url.getAuthority();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (authority != <span class=\"keyword\">null</span> &amp;&amp; authority.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                builder = builder.authorization(<span class=\"string\">\"digest\"</span>, authority.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            client = builder.build();</span><br><span class=\"line\">            client.getConnectionStateListenable().addListener(<span class=\"keyword\">new</span> ConnectionStateListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(CuratorFramework client, ConnectionState state)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (state == ConnectionState.LOST) &#123;</span><br><span class=\"line\">                        CuratorZookeeperClient.<span class=\"keyword\">this</span>.stateChanged(StateListener.DISCONNECTED);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state == ConnectionState.CONNECTED) &#123;</span><br><span class=\"line\">                        CuratorZookeeperClient.<span class=\"keyword\">this</span>.stateChanged(StateListener.CONNECTED);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state == ConnectionState.RECONNECTED) &#123;</span><br><span class=\"line\">                        CuratorZookeeperClient.<span class=\"keyword\">this</span>.stateChanged(StateListener.RECONNECTED);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            client.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createPersistent</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            client.create().forPath(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NodeExistsException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createEphemeral</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NodeExistsException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractZookeeperClient</span>&lt;<span class=\"title\">TargetChildListener</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ZookeeperClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(String path, <span class=\"keyword\">boolean</span> ephemeral)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ephemeral) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (checkExists(path)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = path.lastIndexOf(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            create(path.substring(<span class=\"number\">0</span>, i), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ephemeral) &#123;</span><br><span class=\"line\">            createEphemeral(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            createPersistent(path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到最终是通过<code>CuratorFramework</code>和zookeeper进行通信的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后整个服务暴露流程可以总结如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceBean#export</span><br><span class=\"line\">    -&gt;ServiceConfig#export</span><br><span class=\"line\">        -&gt;RegistryProtocol#export</span><br><span class=\"line\">            -&gt;DubboProtocol#export   &#x2F;&#x2F;暴露Dubbo服务</span><br><span class=\"line\">            -&gt;CuratorZookeeperClient#doRegister   &#x2F;&#x2F;注册中心</span><br><span class=\"line\">                -&gt;ZookeeperClient#create</span><br><span class=\"line\">                    -&gt;CuratorFramework#create</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dubbo服务暴露\"><a href=\"#Dubbo服务暴露\" class=\"headerlink\" title=\"Dubbo服务暴露\"></a>Dubbo服务暴露</h1><p>Dubbo服务暴露的入口是<code>ServiceBean</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceBean</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ServiceConfig</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span>, <span class=\"title\">DisposableBean</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ApplicationContextAware</span>, <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ContextRefreshedEvent</span>&gt;, <span class=\"title\">BeanNameAware</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ApplicationEventPublisherAware</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isDelay()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否延迟暴露</span></span><br><span class=\"line\">            export();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">                logger.info(<span class=\"string\">\"The service ready on spring started. service: \"</span> + getInterface());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            export();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">export</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.export();</span><br><span class=\"line\">        <span class=\"comment\">// Publish ServiceBeanExportedEvent</span></span><br><span class=\"line\">        publishExportEvent();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ServiceBean</code>的启动入口有2个，最终都是调用父类<code>ServiceConfig</code>的<code>export</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceConfig</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractServiceConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">export</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//延迟暴露或者立即暴露</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delay != <span class=\"keyword\">null</span> &amp;&amp; delay &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            delayExportExecutor.schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    doExport();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, delay, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            doExport();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doExport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        doExportUrls();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doExportUrls</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;URL&gt; registryURLs = loadRegistries(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//循环处理多个协议</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ProtocolConfig protocolConfig : protocols) &#123;</span><br><span class=\"line\">            doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doExportUrlsFor1Protocol</span><span class=\"params\">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//doExportUrlsFor1Protocol里的代码很多，这里只展示关键的几行代码</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class=\"line\">                        DelegateProviderMetaDataInvoker wrapperInvoker = <span class=\"keyword\">new</span> DelegateProviderMetaDataInvoker(invoker, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class=\"line\">        exporters.add(exporter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里主要做了2件事情：</p>\n<ul>\n<li><code>proxyFactory.getInvoker</code>，传入<code>ref</code>、<code>interfaceClass</code>、<code>url</code>对象，返回<code>Invoker</code>，其中<code>ref</code>即具体的Service实例。<code>Invoker</code>对下层分装了具体调用服务的细节。</li>\n<li><code>protocol.export</code>，这里根据url实际调用的是<code>RegistryProtocol</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegistryProtocol</span> <span class=\"keyword\">implements</span> <span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(<span class=\"keyword\">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class=\"keyword\">throws</span> RpcException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 导出服务</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取注册中心 URL，以 zookeeper 注册中心为例，得到的示例 URL 如下：</span></span><br><span class=\"line\">        <span class=\"comment\">// zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.2&amp;export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider</span></span><br><span class=\"line\">        URL registryUrl = getRegistryUrl(originInvoker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据 URL 加载 Registry 实现类，比如 ZookeeperRegistry</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Registry registry = getRegistry(originInvoker);</span><br><span class=\"line\">        <span class=\"comment\">// 获取已注册的服务提供者 URL，比如：</span></span><br><span class=\"line\">    <span class=\"comment\">// dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//to judge to delay publish whether or not</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> register = registeredProviderUrl.getParameter(<span class=\"string\">\"register\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (register) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 向注册中心注册服务</span></span><br><span class=\"line\">            register(registryUrl, registeredProviderUrl);</span><br><span class=\"line\">            ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> OverrideListener overrideSubscribeListener = <span class=\"keyword\">new</span> OverrideListener(overrideSubscribeUrl, originInvoker);</span><br><span class=\"line\">        overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class=\"line\">        <span class=\"comment\">// 向注册中心进行订阅 override 数据</span></span><br><span class=\"line\">        registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class=\"line\">        <span class=\"comment\">// 创建并返回 DestroyableExporter</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DestroyableExporter&lt;T&gt;(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(URL registryUrl, URL registedProviderUrl)</span> </span>&#123;</span><br><span class=\"line\">        Registry registry = registryFactory.getRegistry(registryUrl);</span><br><span class=\"line\">        registry.register(registedProviderUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RegistryProtocol</code>主要做的几件事情：</p>\n<ul>\n<li><code>doLocalExport()</code>暴露本地服务，一般是调用的<code>DubboProtocol</code>的<code>export</code>方法，<code>DubboProtocol</code>默认通过<code>Netty</code>开启端口。这里不做详细展开。</li>\n<li><code>register()</code>方法向注册中心注册服务。一般我们使用zookeepr注册中心。</li>\n<li><code>registry.subscribe</code>向注册中心进行订阅 override 数据，这个以后再分析。</li>\n</ul>\n<p>我们重点看<code>ZookeeperRegistry</code>的<code>register</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZookeeperRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">FailbackRegistry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZookeeperRegistry</span><span class=\"params\">(URL url, ZookeeperTransporter zookeeperTransporter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(url);</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">        zkClient = zookeeperTransporter.connect(url);</span><br><span class=\"line\">        zkClient.addStateListener(<span class=\"keyword\">new</span> StateListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果注册中心重连，所有已注册服务重新注册</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (state == RECONNECTED) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        recover();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        logger.error(e.getMessage(), e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRegister</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//第二个参数默认为true，表示创建临时节点</span></span><br><span class=\"line\">            zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RpcException(<span class=\"string\">\"Failed to register \"</span> + url + <span class=\"string\">\" to zookeeper \"</span> + getUrl() + <span class=\"string\">\", cause: \"</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FailbackRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRegistry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FailbackRegistry</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(url);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.retryFuture = retryExecutor.scheduleWithFixedDelay(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Check and connect to the registry</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    retry();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123; <span class=\"comment\">// Defensive fault tolerance</span></span><br><span class=\"line\">                    logger.error(<span class=\"string\">\"Unexpected error occur at failed retry, cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.register(url);</span><br><span class=\"line\">        failedRegistered.remove(url);</span><br><span class=\"line\">        failedUnregistered.remove(url);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Sending a registration request to the server side</span></span><br><span class=\"line\">            doRegister(url);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            Throwable t = e;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// If the startup detection is opened, the Exception is thrown directly.</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> check = getUrl().getParameter(Constants.CHECK_KEY, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    &amp;&amp; url.getParameter(Constants.CHECK_KEY, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    &amp;&amp; !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> skipFailback = t <span class=\"keyword\">instanceof</span> SkipFailbackWrapperException;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check || skipFailback) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (skipFailback) &#123;</span><br><span class=\"line\">                    t = t.getCause();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Failed to register \"</span> + url + <span class=\"string\">\" to registry \"</span> + getUrl().getAddress() + <span class=\"string\">\", cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"Failed to register \"</span> + url + <span class=\"string\">\", waiting for retry, cause: \"</span> + t.getMessage(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Record a failed registration request to a failed list, retry regularly</span></span><br><span class=\"line\">            failedRegistered.add(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ZookeeperRegistry</code>继承了<code>FailbackRegistry</code>，<code>FailbackRegistry</code>顾名思义，实现了failback策略，当请求失败时，会进行重试。构造函数里初始化了一个<code>ScheduledExecutorService</code>，定时的调用<code>retry()</code>。最后调用子类的<code>doRegister()</code>来实现注册。</p>\n<p><code>ZookeeperRegistry</code>通过<code>zookeeperTransporter.connect()</code>初始化了<code>ZookeeperClient</code>对象，在<code>doRegister()</code>方法中调用<code>zkClient.create()</code>来创建节点，默认创建临时节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CuratorZookeeperTransporter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ZookeeperTransporter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ZookeeperClient <span class=\"title\">connect</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CuratorZookeeperClient(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CuratorZookeeperClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractZookeeperClient</span>&lt;<span class=\"title\">CuratorWatcher</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CuratorFramework client;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CuratorZookeeperClient</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(url);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()</span><br><span class=\"line\">                    .connectString(url.getBackupAddress())</span><br><span class=\"line\">                    .retryPolicy(<span class=\"keyword\">new</span> RetryNTimes(<span class=\"number\">1</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">                    .connectionTimeoutMs(<span class=\"number\">5000</span>);</span><br><span class=\"line\">            String authority = url.getAuthority();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (authority != <span class=\"keyword\">null</span> &amp;&amp; authority.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                builder = builder.authorization(<span class=\"string\">\"digest\"</span>, authority.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            client = builder.build();</span><br><span class=\"line\">            client.getConnectionStateListenable().addListener(<span class=\"keyword\">new</span> ConnectionStateListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stateChanged</span><span class=\"params\">(CuratorFramework client, ConnectionState state)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (state == ConnectionState.LOST) &#123;</span><br><span class=\"line\">                        CuratorZookeeperClient.<span class=\"keyword\">this</span>.stateChanged(StateListener.DISCONNECTED);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state == ConnectionState.CONNECTED) &#123;</span><br><span class=\"line\">                        CuratorZookeeperClient.<span class=\"keyword\">this</span>.stateChanged(StateListener.CONNECTED);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state == ConnectionState.RECONNECTED) &#123;</span><br><span class=\"line\">                        CuratorZookeeperClient.<span class=\"keyword\">this</span>.stateChanged(StateListener.RECONNECTED);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            client.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createPersistent</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            client.create().forPath(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NodeExistsException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createEphemeral</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NodeExistsException e) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractZookeeperClient</span>&lt;<span class=\"title\">TargetChildListener</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ZookeeperClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(String path, <span class=\"keyword\">boolean</span> ephemeral)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ephemeral) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (checkExists(path)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = path.lastIndexOf(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            create(path.substring(<span class=\"number\">0</span>, i), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ephemeral) &#123;</span><br><span class=\"line\">            createEphemeral(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            createPersistent(path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到最终是通过<code>CuratorFramework</code>和zookeeper进行通信的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后整个服务暴露流程可以总结如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceBean#export</span><br><span class=\"line\">    -&gt;ServiceConfig#export</span><br><span class=\"line\">        -&gt;RegistryProtocol#export</span><br><span class=\"line\">            -&gt;DubboProtocol#export   &#x2F;&#x2F;暴露Dubbo服务</span><br><span class=\"line\">            -&gt;CuratorZookeeperClient#doRegister   &#x2F;&#x2F;注册中心</span><br><span class=\"line\">                -&gt;ZookeeperClient#create</span><br><span class=\"line\">                    -&gt;CuratorFramework#create</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Dubbo系列 - telnet","date":"2019-07-12T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# dubbo系列 - telnet\n\n`Dubbo`服务器判断如果接受到的请求时候`String`类型时，会调到`TelnetHandlerAdapter#telnet`。\n\n```java\npublic class TelnetHandlerAdapter extends ChannelHandlerAdapter implements TelnetHandler {\n\n    private final ExtensionLoader<TelnetHandler> extensionLoader = ExtensionLoader.getExtensionLoader(TelnetHandler.class);\n\n    @Override\n    public String telnet(Channel channel, String message) throws RemotingException {\n        //获取prompt，默认为dubbo>\n        String prompt = channel.getUrl().getParameterAndDecoded(Constants.PROMPT_KEY, Constants.DEFAULT_PROMPT);\n        boolean noprompt = message.contains(\"--no-prompt\");\n        message = message.replace(\"--no-prompt\", \"\");\n        StringBuilder buf = new StringBuilder();\n        message = message.trim();\n        String command;\n        //如果有空格的话，第一个空格前的为command，后面为message\n        if (message.length() > 0) {\n            int i = message.indexOf(' ');\n            if (i > 0) {\n                command = message.substring(0, i).trim();\n                message = message.substring(i + 1).trim();\n            } else {\n                command = message;\n                message = \"\";\n            }\n        } else {\n            command = \"\";\n        }\n        if (command.length() > 0) {\n            if (extensionLoader.hasExtension(command)) {\n                if (commandEnabled(channel.getUrl(), command)) {\n                    try {\n                        //通过SPI调用对应command的telnetHandler.telnet\n                        String result = extensionLoader.getExtension(command).telnet(channel, message);\n                        if (result == null) {\n                            return null;\n                        }\n                        buf.append(result);\n                    } catch (Throwable t) {\n                        buf.append(t.getMessage());\n                    }\n                } else {\n                    buf.append(\"Command: \");\n                    buf.append(command);\n                    buf.append(\" disabled\");\n                }\n            } else {\n                buf.append(\"Unsupported command: \");\n                buf.append(command);\n            }\n        }\n        if (buf.length() > 0) {\n            buf.append(\"\\r\\n\");\n        }\n        //如果入参有带--no-prompt的话，不打印prompt\n        if (prompt != null && prompt.length() > 0 && !noprompt) {\n            buf.append(prompt);\n        }\n        return buf.toString();\n    }\n\n    private boolean commandEnabled(URL url, String command) {\n        boolean commandEnable = false;\n        String supportCommands = url.getParameter(Constants.TELNET);\n        if (StringUtils.isEmpty(supportCommands)) {\n            commandEnable = true;\n        } else {\n            String[] commands = Constants.COMMA_SPLIT_PATTERN.split(supportCommands);\n            for (String c : commands) {\n                if (command.equals(c)) {\n                    commandEnable = true;\n                    break;\n                }\n            }\n        }\n        return commandEnable;\n    }\n\n}\n```\n\n`TelnetHandlerAdapter`解析命令，然后通过SPI来调到具体的`TelnetHandler`实现类。\n\n通过SPI的配置文件可以知道`Dubbo`一共有12个`TelnetHandler`扩展：\n\n\n> clear=com.alibaba.dubbo.remoting.telnet.support.command.ClearTelnetHandler\n> exit=com.alibaba.dubbo.remoting.telnet.support.command.ExitTelnetHandler\n> help=com.alibaba.dubbo.remoting.telnet.support.command.HelpTelnetHandler\n> status=com.alibaba.dubbo.remoting.telnet.support.command.StatusTelnetHandler\n> log=com.alibaba.dubbo.remoting.telnet.support.command.LogTelnetHandler\n> ls=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandler\n> ps=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.PortTelnetHandler\n> cd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandler\n> pwd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CurrentTelnetHandler\n> invoke=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler\n> trace=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.TraceTelnetHandler\n> count=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler\n\n看一下`ListTelnetHandler`的实现：\n\n```java\n@Activate\n@Help(parameter = \"[-l] [service]\", summary = \"List services and methods.\", detail = \"List services and methods.\")\npublic class ListTelnetHandler implements TelnetHandler {\n\n    @Override\n    public String telnet(Channel channel, String message) {\n        StringBuilder buf = new StringBuilder();\n        String service = null;\n        boolean detail = false;\n        //判断是否是指定具体的service\n        if (message.length() > 0) {\n            String[] parts = message.split(\"\\\\s+\");\n            for (String part : parts) {\n                if (\"-l\".equals(part)) {\n                    detail = true;\n                } else {\n                    if (service != null && service.length() > 0) {\n                        return \"Invaild parameter \" + part;\n                    }\n                    service = part;\n                }\n            }\n        } else {\n            //判断是否之前有执行过cd的命令\n            service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n            if (service != null && service.length() > 0) {\n                buf.append(\"Use default service \" + service + \".\\r\\n\");\n            }\n        }\n        //如果没有指定service，则获取DubboProtocol的Exporters\n        if (service == null || service.length() == 0) {\n            for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n                if (buf.length() > 0) {\n                    buf.append(\"\\r\\n\");\n                }\n                buf.append(exporter.getInvoker().getInterface().getName());\n                if (detail) {\n                    buf.append(\" -> \");\n                    buf.append(exporter.getInvoker().getUrl());\n                }\n            }\n        } else {\n        //如果指定具体的service，则通过exporter找到具体的class对象，然后通过反射的方式获取method。\n            Invoker<?> invoker = null;\n            for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n                if (service.equals(exporter.getInvoker().getInterface().getSimpleName())\n                        || service.equals(exporter.getInvoker().getInterface().getName())\n                        || service.equals(exporter.getInvoker().getUrl().getPath())) {\n                    invoker = exporter.getInvoker();\n                    break;\n                }\n            }\n            if (invoker != null) {\n                Method[] methods = invoker.getInterface().getMethods();\n                for (Method method : methods) {\n                    if (buf.length() > 0) {\n                        buf.append(\"\\r\\n\");\n                    }\n                    if (detail) {\n                        buf.append(ReflectUtils.getName(method));\n                    } else {\n                        buf.append(method.getName());\n                    }\n                }\n            } else {\n                buf.append(\"No such service \" + service);\n            }\n        }\n        return buf.toString();\n    }\n\n}\n\n```\n","source":"_posts/2019-07-13-dubbo系列telnet.md","raw":"---\nlayout:     post\ntitle:      \"Dubbo系列 - telnet\"\ndate:       2019-07-13\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# dubbo系列 - telnet\n\n`Dubbo`服务器判断如果接受到的请求时候`String`类型时，会调到`TelnetHandlerAdapter#telnet`。\n\n```java\npublic class TelnetHandlerAdapter extends ChannelHandlerAdapter implements TelnetHandler {\n\n    private final ExtensionLoader<TelnetHandler> extensionLoader = ExtensionLoader.getExtensionLoader(TelnetHandler.class);\n\n    @Override\n    public String telnet(Channel channel, String message) throws RemotingException {\n        //获取prompt，默认为dubbo>\n        String prompt = channel.getUrl().getParameterAndDecoded(Constants.PROMPT_KEY, Constants.DEFAULT_PROMPT);\n        boolean noprompt = message.contains(\"--no-prompt\");\n        message = message.replace(\"--no-prompt\", \"\");\n        StringBuilder buf = new StringBuilder();\n        message = message.trim();\n        String command;\n        //如果有空格的话，第一个空格前的为command，后面为message\n        if (message.length() > 0) {\n            int i = message.indexOf(' ');\n            if (i > 0) {\n                command = message.substring(0, i).trim();\n                message = message.substring(i + 1).trim();\n            } else {\n                command = message;\n                message = \"\";\n            }\n        } else {\n            command = \"\";\n        }\n        if (command.length() > 0) {\n            if (extensionLoader.hasExtension(command)) {\n                if (commandEnabled(channel.getUrl(), command)) {\n                    try {\n                        //通过SPI调用对应command的telnetHandler.telnet\n                        String result = extensionLoader.getExtension(command).telnet(channel, message);\n                        if (result == null) {\n                            return null;\n                        }\n                        buf.append(result);\n                    } catch (Throwable t) {\n                        buf.append(t.getMessage());\n                    }\n                } else {\n                    buf.append(\"Command: \");\n                    buf.append(command);\n                    buf.append(\" disabled\");\n                }\n            } else {\n                buf.append(\"Unsupported command: \");\n                buf.append(command);\n            }\n        }\n        if (buf.length() > 0) {\n            buf.append(\"\\r\\n\");\n        }\n        //如果入参有带--no-prompt的话，不打印prompt\n        if (prompt != null && prompt.length() > 0 && !noprompt) {\n            buf.append(prompt);\n        }\n        return buf.toString();\n    }\n\n    private boolean commandEnabled(URL url, String command) {\n        boolean commandEnable = false;\n        String supportCommands = url.getParameter(Constants.TELNET);\n        if (StringUtils.isEmpty(supportCommands)) {\n            commandEnable = true;\n        } else {\n            String[] commands = Constants.COMMA_SPLIT_PATTERN.split(supportCommands);\n            for (String c : commands) {\n                if (command.equals(c)) {\n                    commandEnable = true;\n                    break;\n                }\n            }\n        }\n        return commandEnable;\n    }\n\n}\n```\n\n`TelnetHandlerAdapter`解析命令，然后通过SPI来调到具体的`TelnetHandler`实现类。\n\n通过SPI的配置文件可以知道`Dubbo`一共有12个`TelnetHandler`扩展：\n\n\n> clear=com.alibaba.dubbo.remoting.telnet.support.command.ClearTelnetHandler\n> exit=com.alibaba.dubbo.remoting.telnet.support.command.ExitTelnetHandler\n> help=com.alibaba.dubbo.remoting.telnet.support.command.HelpTelnetHandler\n> status=com.alibaba.dubbo.remoting.telnet.support.command.StatusTelnetHandler\n> log=com.alibaba.dubbo.remoting.telnet.support.command.LogTelnetHandler\n> ls=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandler\n> ps=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.PortTelnetHandler\n> cd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandler\n> pwd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CurrentTelnetHandler\n> invoke=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler\n> trace=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.TraceTelnetHandler\n> count=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler\n\n看一下`ListTelnetHandler`的实现：\n\n```java\n@Activate\n@Help(parameter = \"[-l] [service]\", summary = \"List services and methods.\", detail = \"List services and methods.\")\npublic class ListTelnetHandler implements TelnetHandler {\n\n    @Override\n    public String telnet(Channel channel, String message) {\n        StringBuilder buf = new StringBuilder();\n        String service = null;\n        boolean detail = false;\n        //判断是否是指定具体的service\n        if (message.length() > 0) {\n            String[] parts = message.split(\"\\\\s+\");\n            for (String part : parts) {\n                if (\"-l\".equals(part)) {\n                    detail = true;\n                } else {\n                    if (service != null && service.length() > 0) {\n                        return \"Invaild parameter \" + part;\n                    }\n                    service = part;\n                }\n            }\n        } else {\n            //判断是否之前有执行过cd的命令\n            service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n            if (service != null && service.length() > 0) {\n                buf.append(\"Use default service \" + service + \".\\r\\n\");\n            }\n        }\n        //如果没有指定service，则获取DubboProtocol的Exporters\n        if (service == null || service.length() == 0) {\n            for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n                if (buf.length() > 0) {\n                    buf.append(\"\\r\\n\");\n                }\n                buf.append(exporter.getInvoker().getInterface().getName());\n                if (detail) {\n                    buf.append(\" -> \");\n                    buf.append(exporter.getInvoker().getUrl());\n                }\n            }\n        } else {\n        //如果指定具体的service，则通过exporter找到具体的class对象，然后通过反射的方式获取method。\n            Invoker<?> invoker = null;\n            for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n                if (service.equals(exporter.getInvoker().getInterface().getSimpleName())\n                        || service.equals(exporter.getInvoker().getInterface().getName())\n                        || service.equals(exporter.getInvoker().getUrl().getPath())) {\n                    invoker = exporter.getInvoker();\n                    break;\n                }\n            }\n            if (invoker != null) {\n                Method[] methods = invoker.getInterface().getMethods();\n                for (Method method : methods) {\n                    if (buf.length() > 0) {\n                        buf.append(\"\\r\\n\");\n                    }\n                    if (detail) {\n                        buf.append(ReflectUtils.getName(method));\n                    } else {\n                        buf.append(method.getName());\n                    }\n                }\n            } else {\n                buf.append(\"No such service \" + service);\n            }\n        }\n        return buf.toString();\n    }\n\n}\n\n```\n","slug":"2019-07-13-dubbo系列telnet","published":1,"updated":"2019-07-15T01:45:19.326Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a500061fyt724l4qul","content":"<h1 id=\"dubbo系列-telnet\"><a href=\"#dubbo系列-telnet\" class=\"headerlink\" title=\"dubbo系列 - telnet\"></a>dubbo系列 - telnet</h1><p><code>Dubbo</code>服务器判断如果接受到的请求时候<code>String</code>类型时，会调到<code>TelnetHandlerAdapter#telnet</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TelnetHandlerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelHandlerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TelnetHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExtensionLoader&lt;TelnetHandler&gt; extensionLoader = ExtensionLoader.getExtensionLoader(TelnetHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">telnet</span><span class=\"params\">(Channel channel, String message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取prompt，默认为dubbo&gt;</span></span><br><span class=\"line\">        String prompt = channel.getUrl().getParameterAndDecoded(Constants.PROMPT_KEY, Constants.DEFAULT_PROMPT);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> noprompt = message.contains(<span class=\"string\">\"--no-prompt\"</span>);</span><br><span class=\"line\">        message = message.replace(<span class=\"string\">\"--no-prompt\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        message = message.trim();</span><br><span class=\"line\">        String command;</span><br><span class=\"line\">        <span class=\"comment\">//如果有空格的话，第一个空格前的为command，后面为message</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = message.indexOf(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                command = message.substring(<span class=\"number\">0</span>, i).trim();</span><br><span class=\"line\">                message = message.substring(i + <span class=\"number\">1</span>).trim();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                command = message;</span><br><span class=\"line\">                message = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            command = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (extensionLoader.hasExtension(command)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (commandEnabled(channel.getUrl(), command)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//通过SPI调用对应command的telnetHandler.telnet</span></span><br><span class=\"line\">                        String result = extensionLoader.getExtension(command).telnet(channel, message);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        buf.append(result);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                        buf.append(t.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\"Command: \"</span>);</span><br><span class=\"line\">                    buf.append(command);</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\" disabled\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                buf.append(<span class=\"string\">\"Unsupported command: \"</span>);</span><br><span class=\"line\">                buf.append(command);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            buf.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果入参有带--no-prompt的话，不打印prompt</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prompt != <span class=\"keyword\">null</span> &amp;&amp; prompt.length() &gt; <span class=\"number\">0</span> &amp;&amp; !noprompt) &#123;</span><br><span class=\"line\">            buf.append(prompt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">commandEnabled</span><span class=\"params\">(URL url, String command)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> commandEnable = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        String supportCommands = url.getParameter(Constants.TELNET);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(supportCommands)) &#123;</span><br><span class=\"line\">            commandEnable = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String[] commands = Constants.COMMA_SPLIT_PATTERN.split(supportCommands);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String c : commands) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (command.equals(c)) &#123;</span><br><span class=\"line\">                    commandEnable = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> commandEnable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TelnetHandlerAdapter</code>解析命令，然后通过SPI来调到具体的<code>TelnetHandler</code>实现类。</p>\n<p>通过SPI的配置文件可以知道<code>Dubbo</code>一共有12个<code>TelnetHandler</code>扩展：</p>\n<blockquote>\n<p>clear=com.alibaba.dubbo.remoting.telnet.support.command.ClearTelnetHandler<br>exit=com.alibaba.dubbo.remoting.telnet.support.command.ExitTelnetHandler<br>help=com.alibaba.dubbo.remoting.telnet.support.command.HelpTelnetHandler<br>status=com.alibaba.dubbo.remoting.telnet.support.command.StatusTelnetHandler<br>log=com.alibaba.dubbo.remoting.telnet.support.command.LogTelnetHandler<br>ls=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandler<br>ps=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.PortTelnetHandler<br>cd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandler<br>pwd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CurrentTelnetHandler<br>invoke=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler<br>trace=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.TraceTelnetHandler<br>count=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler</p>\n</blockquote>\n<p>看一下<code>ListTelnetHandler</code>的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Activate</span></span><br><span class=\"line\"><span class=\"meta\">@Help</span>(parameter = <span class=\"string\">\"[-l] [service]\"</span>, summary = <span class=\"string\">\"List services and methods.\"</span>, detail = <span class=\"string\">\"List services and methods.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTelnetHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">TelnetHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">telnet</span><span class=\"params\">(Channel channel, String message)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        String service = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> detail = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是指定具体的service</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            String[] parts = message.split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"-l\"</span>.equals(part)) &#123;</span><br><span class=\"line\">                    detail = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span> &amp;&amp; service.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"string\">\"Invaild parameter \"</span> + part;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    service = part;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否之前有执行过cd的命令</span></span><br><span class=\"line\">            service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span> &amp;&amp; service.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                buf.append(<span class=\"string\">\"Use default service \"</span> + service + <span class=\"string\">\".\\r\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有指定service，则获取DubboProtocol的Exporters</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (service == <span class=\"keyword\">null</span> || service.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Exporter&lt;?&gt; exporter : DubboProtocol.getDubboProtocol().getExporters()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buf.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                buf.append(exporter.getInvoker().getInterface().getName());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (detail) &#123;</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\" -&gt; \"</span>);</span><br><span class=\"line\">                    buf.append(exporter.getInvoker().getUrl());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果指定具体的service，则通过exporter找到具体的class对象，然后通过反射的方式获取method。</span></span><br><span class=\"line\">            Invoker&lt;?&gt; invoker = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Exporter&lt;?&gt; exporter : DubboProtocol.getDubboProtocol().getExporters()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (service.equals(exporter.getInvoker().getInterface().getSimpleName())</span><br><span class=\"line\">                        || service.equals(exporter.getInvoker().getInterface().getName())</span><br><span class=\"line\">                        || service.equals(exporter.getInvoker().getUrl().getPath())) &#123;</span><br><span class=\"line\">                    invoker = exporter.getInvoker();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (invoker != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Method[] methods = invoker.getInterface().getMethods();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (buf.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        buf.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (detail) &#123;</span><br><span class=\"line\">                        buf.append(ReflectUtils.getName(method));</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        buf.append(method.getName());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                buf.append(<span class=\"string\">\"No such service \"</span> + service);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dubbo系列-telnet\"><a href=\"#dubbo系列-telnet\" class=\"headerlink\" title=\"dubbo系列 - telnet\"></a>dubbo系列 - telnet</h1><p><code>Dubbo</code>服务器判断如果接受到的请求时候<code>String</code>类型时，会调到<code>TelnetHandlerAdapter#telnet</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TelnetHandlerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelHandlerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TelnetHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExtensionLoader&lt;TelnetHandler&gt; extensionLoader = ExtensionLoader.getExtensionLoader(TelnetHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">telnet</span><span class=\"params\">(Channel channel, String message)</span> <span class=\"keyword\">throws</span> RemotingException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取prompt，默认为dubbo&gt;</span></span><br><span class=\"line\">        String prompt = channel.getUrl().getParameterAndDecoded(Constants.PROMPT_KEY, Constants.DEFAULT_PROMPT);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> noprompt = message.contains(<span class=\"string\">\"--no-prompt\"</span>);</span><br><span class=\"line\">        message = message.replace(<span class=\"string\">\"--no-prompt\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        message = message.trim();</span><br><span class=\"line\">        String command;</span><br><span class=\"line\">        <span class=\"comment\">//如果有空格的话，第一个空格前的为command，后面为message</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = message.indexOf(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                command = message.substring(<span class=\"number\">0</span>, i).trim();</span><br><span class=\"line\">                message = message.substring(i + <span class=\"number\">1</span>).trim();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                command = message;</span><br><span class=\"line\">                message = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            command = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (extensionLoader.hasExtension(command)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (commandEnabled(channel.getUrl(), command)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//通过SPI调用对应command的telnetHandler.telnet</span></span><br><span class=\"line\">                        String result = extensionLoader.getExtension(command).telnet(channel, message);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        buf.append(result);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                        buf.append(t.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\"Command: \"</span>);</span><br><span class=\"line\">                    buf.append(command);</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\" disabled\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                buf.append(<span class=\"string\">\"Unsupported command: \"</span>);</span><br><span class=\"line\">                buf.append(command);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            buf.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果入参有带--no-prompt的话，不打印prompt</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prompt != <span class=\"keyword\">null</span> &amp;&amp; prompt.length() &gt; <span class=\"number\">0</span> &amp;&amp; !noprompt) &#123;</span><br><span class=\"line\">            buf.append(prompt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">commandEnabled</span><span class=\"params\">(URL url, String command)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> commandEnable = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        String supportCommands = url.getParameter(Constants.TELNET);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(supportCommands)) &#123;</span><br><span class=\"line\">            commandEnable = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String[] commands = Constants.COMMA_SPLIT_PATTERN.split(supportCommands);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String c : commands) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (command.equals(c)) &#123;</span><br><span class=\"line\">                    commandEnable = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> commandEnable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TelnetHandlerAdapter</code>解析命令，然后通过SPI来调到具体的<code>TelnetHandler</code>实现类。</p>\n<p>通过SPI的配置文件可以知道<code>Dubbo</code>一共有12个<code>TelnetHandler</code>扩展：</p>\n<blockquote>\n<p>clear=com.alibaba.dubbo.remoting.telnet.support.command.ClearTelnetHandler<br>exit=com.alibaba.dubbo.remoting.telnet.support.command.ExitTelnetHandler<br>help=com.alibaba.dubbo.remoting.telnet.support.command.HelpTelnetHandler<br>status=com.alibaba.dubbo.remoting.telnet.support.command.StatusTelnetHandler<br>log=com.alibaba.dubbo.remoting.telnet.support.command.LogTelnetHandler<br>ls=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ListTelnetHandler<br>ps=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.PortTelnetHandler<br>cd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandler<br>pwd=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CurrentTelnetHandler<br>invoke=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler<br>trace=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.TraceTelnetHandler<br>count=com.alibaba.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler</p>\n</blockquote>\n<p>看一下<code>ListTelnetHandler</code>的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Activate</span></span><br><span class=\"line\"><span class=\"meta\">@Help</span>(parameter = <span class=\"string\">\"[-l] [service]\"</span>, summary = <span class=\"string\">\"List services and methods.\"</span>, detail = <span class=\"string\">\"List services and methods.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTelnetHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">TelnetHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">telnet</span><span class=\"params\">(Channel channel, String message)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        String service = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> detail = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是指定具体的service</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            String[] parts = message.split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"-l\"</span>.equals(part)) &#123;</span><br><span class=\"line\">                    detail = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span> &amp;&amp; service.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"string\">\"Invaild parameter \"</span> + part;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    service = part;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否之前有执行过cd的命令</span></span><br><span class=\"line\">            service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span> &amp;&amp; service.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                buf.append(<span class=\"string\">\"Use default service \"</span> + service + <span class=\"string\">\".\\r\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有指定service，则获取DubboProtocol的Exporters</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (service == <span class=\"keyword\">null</span> || service.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Exporter&lt;?&gt; exporter : DubboProtocol.getDubboProtocol().getExporters()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buf.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                buf.append(exporter.getInvoker().getInterface().getName());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (detail) &#123;</span><br><span class=\"line\">                    buf.append(<span class=\"string\">\" -&gt; \"</span>);</span><br><span class=\"line\">                    buf.append(exporter.getInvoker().getUrl());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果指定具体的service，则通过exporter找到具体的class对象，然后通过反射的方式获取method。</span></span><br><span class=\"line\">            Invoker&lt;?&gt; invoker = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Exporter&lt;?&gt; exporter : DubboProtocol.getDubboProtocol().getExporters()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (service.equals(exporter.getInvoker().getInterface().getSimpleName())</span><br><span class=\"line\">                        || service.equals(exporter.getInvoker().getInterface().getName())</span><br><span class=\"line\">                        || service.equals(exporter.getInvoker().getUrl().getPath())) &#123;</span><br><span class=\"line\">                    invoker = exporter.getInvoker();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (invoker != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Method[] methods = invoker.getInterface().getMethods();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (buf.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        buf.append(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (detail) &#123;</span><br><span class=\"line\">                        buf.append(ReflectUtils.getName(method));</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        buf.append(method.getName());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                buf.append(<span class=\"string\">\"No such service \"</span> + service);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"zookeeper-LeaderZooKeeperServer3.5.5","date":"2019-08-19T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"[toc]\n# LeaderZooKeeperServer\n\n```java\n    CommitProcessor commitProcessor;\n    PrepRequestProcessor prepRequestProcessor;\n    protected void setupRequestProcessors() {\n        RequestProcessor finalProcessor = new FinalRequestProcessor(this);\n        RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());\n        commitProcessor = new CommitProcessor(toBeAppliedProcessor,\n                Long.toString(getServerId()), false,\n                getZooKeeperServerListener());\n        commitProcessor.start();\n        ProposalRequestProcessor proposalProcessor = new ProposalRequestProcessor(this,\n                commitProcessor);\n        proposalProcessor.initialize();\n        prepRequestProcessor = new PrepRequestProcessor(this, proposalProcessor);\n        prepRequestProcessor.start();\n        firstProcessor = new LeaderRequestProcessor(this, prepRequestProcessor);\n\n        setupContainerManager();\n    }\n```\n可以看到有3个处理链:\n1. `firstProcessor`处理链`LeaderRequestProcessor->PrepRequestProcessor->ProposalRequestProcessor->CommitProcessor->Leader.ToBeAppliedRequestProcessor ->FinalRequestProcessor`\n2. `CommitProcessor->Leader.ToBeAppliedRequestProcessor ->FinalRequestProcessor`\n3. `PrepRequestProcessor->ProposalRequestProcessor->CommitProcessor->Leader.ToBeAppliedRequestProcessor ->FinalRequestProcessor`\n\n当外部请求来时，使用的是`firstProcessor`。\n\n## 1 LeaderRequestProcessor\n\n```java\n    @Override\n    public void processRequest(Request request)\n            throws RequestProcessorException {\n        // Check if this is a local session and we are trying to create\n        // an ephemeral node, in which case we upgrade the session\n        Request upgradeRequest = null;\n        try {\n            upgradeRequest = lzks.checkUpgradeSession(request);\n        } catch (KeeperException ke) {\n            if (request.getHdr() != null) {\n                LOG.debug(\"Updating header\");\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(ke.code().intValue()));\n            }\n            request.setException(ke);\n            LOG.info(\"Error creating upgrade request \" + ke.getMessage());\n        } catch (IOException ie) {\n            LOG.error(\"Unexpected error in upgrade\", ie);\n        }\n        if (upgradeRequest != null) {\n            nextProcessor.processRequest(upgradeRequest);\n        }\n\n        nextProcessor.processRequest(request);\n    }\n```\n\n看英文注释，`LeaderRequestProcessor`只是更新了下session，然后交给下个来处理。\n\n`PrepRequestProcessor`之前分析过，这里不写了。\n\n## 2 ProposalRequestProcessor\n\n```java\n    public ProposalRequestProcessor(LeaderZooKeeperServer zks,\n            RequestProcessor nextProcessor) {\n        this.zks = zks;\n        this.nextProcessor = nextProcessor;\n        AckRequestProcessor ackProcessor = new AckRequestProcessor(zks.getLeader());\n        syncProcessor = new SyncRequestProcessor(zks, ackProcessor);\n    }\n\n    public void processRequest(Request request) throws RequestProcessorException {\n        //如果是LearnerSyncRequest，调用leader的processSync方法，应该跟follow同步有关\n        if (request instanceof LearnerSyncRequest){\n            zks.getLeader().processSync((LearnerSyncRequest)request);\n        } else {\n            //交给下一个处理器处理，如果是事务操作的话（也就是写操作，个人理解），调用leader.propose和syncProcessor\n            nextProcessor.processRequest(request);\n            if (request.getHdr() != null) {\n                // We need to sync and get consensus on any transactions\n                try {\n                    zks.getLeader().propose(request);\n                } catch (XidRolloverException e) {\n                    throw new RequestProcessorException(e.getMessage(), e);\n                }\n                //如果是事物消息的话，调用syncProcessor\n                syncProcessor.processRequest(request);\n            }\n        }\n    }\n```\n\n`ProposalRequestProcessor`的功能总结：\n1. 如果是sync请求，调用leader.processSync。\n2. 非sync请求，调用\n\n所以请求的调用链可以调整为：\n```\nPrepRequestProcessor->ProposalRequestProcessor->\n                                          CommitProcessor->ToBeAppliedRequestProcessor->FinalRequestProcessor\n                                          SyncRequestProcessor->AckRequestProcessor\n```\n\n\n\n## 3. CommitProcessor\n\n```java\n\n    /**\n     * Requests that we are holding until the commit comes in.\n     */\n    protected final LinkedBlockingQueue<Request> queuedRequests =\n        new LinkedBlockingQueue<Request>();\n    /**\n     * Requests that have been committed.\n     */\n    protected final LinkedBlockingQueue<Request> committedRequests =\n        new LinkedBlockingQueue<Request>();\n    /** Request for which we are currently awaiting a commit */\n    protected final AtomicReference<Request> nextPending =\n        new AtomicReference<Request>();\n    /** Request currently being committed (ie, sent off to next processor) */\n    private final AtomicReference<Request> currentlyCommitting =\n        new AtomicReference<Request>();\n    @Override\n    public void processRequest(Request request) {\n        if (stopped) {\n            return;\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        //把request放入queuedRequests，等待处理\n        queuedRequests.add(request);\n        if (!isWaitingForCommit()) {\n            wakeup();\n        }\n    }\n    private boolean isWaitingForCommit() {\n        return nextPending.get() != null;\n    }\n\n    private boolean isProcessingCommit() {\n        return currentlyCommitting.get() != null;\n    }\n    @Override\n    public void run() {\n        Request request;\n        try {\n            while (!stopped) {\n                //如果queuedRequests和committedRequests都是空 && 有正在处理的请求，一直等待\n                synchronized(this) {\n                    while (\n                        !stopped &&\n                        ((queuedRequests.isEmpty() || isWaitingForCommit() || isProcessingCommit()) &&\n                         (committedRequests.isEmpty() || isProcessingRequest()))) {\n                        wait();\n                    }\n                }\n\n                /*\n                 * Processing queuedRequests: Process the next requests until we\n                 * find one for which we need to wait for a commit. We cannot\n                 * process a read request while we are processing write request.\n                 */\n                 //nextPending和currentlyCommitting没数据，且queuedRequests有数据。\n                while (!stopped && !isWaitingForCommit() &&\n                       !isProcessingCommit() &&\n                       (request = queuedRequests.poll()) != null) {\n                    //如果是写请求，写入nextPending，WaitingForCommit\n                    if (needCommit(request)) {\n                        nextPending.set(request);\n                    } else {\n                        //交给下面处理器处理\n                        sendToNextProcessor(request);\n                    }\n                }\n\n                /*\n                 * Processing committedRequests: check and see if the commit\n                 * came in for the pending request. We can only commit a\n                 * request when there is no other request being processed.\n                 */\n                processCommitted();\n            }\n        } catch (Throwable e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"CommitProcessor exited loop!\");\n    }\n    \n    //commit方法，由leader调用，将commit请求放入队列committedRequests\n    public void commit(Request request) {\n        if (stopped || request == null) {\n            return;\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Committing request:: \" + request);\n        }\n        committedRequests.add(request);\n        if (!isProcessingCommit()) {\n            wakeup();\n        }\n    }\n    \n    protected void processCommitted() {\n        Request request;\n\n        if (!stopped && !isProcessingRequest() &&\n                (committedRequests.peek() != null)) {\n\n            /*\n             * ZOOKEEPER-1863: continue only if there is no new request\n             * waiting in queuedRequests or it is waiting for a\n             * commit. \n             */\n            if ( !isWaitingForCommit() && !queuedRequests.isEmpty()) {\n                return;\n            }\n            //从committedRequests中取出请求\n            request = committedRequests.poll();\n\n            /*\n             * We match with nextPending so that we can move to the\n             * next request when it is committed. We also want to\n             * use nextPending because it has the cnxn member set\n             * properly.\n             */\n             //commitRequest和pendingRequest进行比对。但是最后都是交给下面的处理，好像并没有什么区别。\n            Request pending = nextPending.get();\n            if (pending != null &&\n                pending.sessionId == request.sessionId &&\n                pending.cxid == request.cxid) {\n                // we want to send our version of the request.\n                // the pointer to the connection in the request\n                pending.setHdr(request.getHdr());\n                pending.setTxn(request.getTxn());\n                pending.zxid = request.zxid;\n                // Set currentlyCommitting so we will block until this\n                // completes. Cleared by CommitWorkRequest after\n                // nextProcessor returns.\n                currentlyCommitting.set(pending);\n                nextPending.set(null);\n                sendToNextProcessor(pending);\n            } else {\n                // this request came from someone else so just\n                // send the commit packet\n                currentlyCommitting.set(request);\n                sendToNextProcessor(request);\n            }\n        }      \n    }\n```\n\n## 4 ToBeAppliedRequestProcessor\n\n`ToBeAppliedRequestProcessor`是`Leader`的内部类。\n\n```java\n    static class ToBeAppliedRequestProcessor implements RequestProcessor {\n        private final RequestProcessor next;\n\n        private final Leader leader;\n\n        /**\n         * This request processor simply maintains the toBeApplied list. For\n         * this to work next must be a FinalRequestProcessor and\n         * FinalRequestProcessor.processRequest MUST process the request\n         * synchronously!\n         *\n         * @param next\n         *                a reference to the FinalRequestProcessor\n         */\n        ToBeAppliedRequestProcessor(RequestProcessor next, Leader leader) {\n            if (!(next instanceof FinalRequestProcessor)) {\n                throw new RuntimeException(ToBeAppliedRequestProcessor.class\n                        .getName()\n                        + \" must be connected to \"\n                        + FinalRequestProcessor.class.getName()\n                        + \" not \"\n                        + next.getClass().getName());\n            }\n            this.leader = leader;\n            this.next = next;\n        }\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see org.apache.zookeeper.server.RequestProcessor#processRequest(org.apache.zookeeper.server.Request)\n         */\n        public void processRequest(Request request) throws RequestProcessorException {\n            next.processRequest(request);\n\n            // The only requests that should be on toBeApplied are write\n            // requests, for which we will have a hdr. We can't simply use\n            // request.zxid here because that is set on read requests to equal\n            // the zxid of the last write op.\n            if (request.getHdr() != null) {\n                long zxid = request.getHdr().getZxid();\n                Iterator<Proposal> iter = leader.toBeApplied.iterator();\n                if (iter.hasNext()) {\n                    Proposal p = iter.next();\n                    if (p.request != null && p.request.zxid == zxid) {\n                        iter.remove();\n                        return;\n                    }\n                }\n                LOG.error(\"Committed request not found on toBeApplied: \"\n                          + request);\n            }\n        }\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see org.apache.zookeeper.server.RequestProcessor#shutdown()\n         */\n        public void shutdown() {\n            LOG.info(\"Shutting down\");\n            next.shutdown();\n        }\n    }\n\n```\n\n`ToBeAppliedRequestProcessor`的作用就是用下个处理器处理，然后把`request`从`toBeApplied`队列里删掉。\n\n## 5.AckRequestProcessor\n\n```java\nclass AckRequestProcessor implements RequestProcessor {\n    private static final Logger LOG = LoggerFactory.getLogger(AckRequestProcessor.class);\n    Leader leader;\n\n    AckRequestProcessor(Leader leader) {\n        this.leader = leader;\n    }\n\n    /**\n     * Forward the request as an ACK to the leader\n     */\n    public void processRequest(Request request) {\n        QuorumPeer self = leader.self;\n        if(self != null)\n            leader.processAck(self.getId(), request.zxid, null);\n        else\n            LOG.error(\"Null QuorumPeer\");\n    }\n\n    public void shutdown() {\n        // XXX No need to do anything\n    }\n}\n```\n\n`AckRequestProcessor`的作用就是调`leader.processAck`来处理请求。\n\n## 6.leader\n\n`leader`代码有点多，主要看下跟投票相关的核心代码吧。\n先从`LearnerHandler`开始，`leader`启动时会对每个`Quorum`节点建立socket连接，`LearnerHandler`就是用来处理这个连接的。\n\n```java\nswitch (qp.getType()) {\n                case Leader.ACK:\n                    if (this.learnerType == LearnerType.OBSERVER) {\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Received ACK from Observer  \" + this.sid);\n                        }\n                    }\n                    syncLimitCheck.updateAck(qp.getZxid());\n                    leader.processAck(this.sid, qp.getZxid(), sock.getLocalSocketAddress());\n                    break;\n                case Leader.PING:\n                    // Process the touches\n                    ByteArrayInputStream bis = new ByteArrayInputStream(qp\n                            .getData());\n                    DataInputStream dis = new DataInputStream(bis);\n                    while (dis.available() > 0) {\n                        long sess = dis.readLong();\n                        int to = dis.readInt();\n                        leader.zk.touch(sess, to);\n                    }\n                    break;\n                case Leader.REVALIDATE:\n                    bis = new ByteArrayInputStream(qp.getData());\n                    dis = new DataInputStream(bis);\n                    long id = dis.readLong();\n                    int to = dis.readInt();\n                    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                    DataOutputStream dos = new DataOutputStream(bos);\n                    dos.writeLong(id);\n                    boolean valid = leader.zk.checkIfValidGlobalSession(id, to);\n                    if (valid) {\n                        try {\n                            //set the session owner\n                            // as the follower that\n                            // owns the session\n                            leader.zk.setOwner(id, this);\n                        } catch (SessionExpiredException e) {\n                            LOG.error(\"Somehow session \" + Long.toHexString(id) +\n                                    \" expired right after being renewed! (impossible)\", e);\n                        }\n                    }\n                    if (LOG.isTraceEnabled()) {\n                        ZooTrace.logTraceMessage(LOG,\n                                                 ZooTrace.SESSION_TRACE_MASK,\n                                                 \"Session 0x\" + Long.toHexString(id)\n                                                 + \" is valid: \"+ valid);\n                    }\n                    dos.writeBoolean(valid);\n                    qp.setData(bos.toByteArray());\n                    queuedPackets.add(qp);\n                    break;\n                case Leader.REQUEST:\n                    bb = ByteBuffer.wrap(qp.getData());\n                    sessionId = bb.getLong();\n                    cxid = bb.getInt();\n                    type = bb.getInt();\n                    bb = bb.slice();\n                    Request si;\n                    if(type == OpCode.sync){\n                        si = new LearnerSyncRequest(this, sessionId, cxid, type, bb, qp.getAuthinfo());\n                    } else {\n                        si = new Request(null, sessionId, cxid, type, bb, qp.getAuthinfo());\n                    }\n                    si.setOwner(this);\n                    leader.zk.submitLearnerRequest(si);\n                    break;\n                default:\n                    LOG.warn(\"unexpected quorum packet, type: {}\", packetToString(qp));\n                    break;\n                }\n```\n\n可以看到分别对请求类型做了不同的处理：\n\n* Leader.ACK -> `leader.processAck`\n* Leader.PING -> `leader.zk.touch`\n* Leader.REVALIDATE -> `leader.zk.checkIfValidGlobalSession`和`leader.zk.setOwner`\n* Leader.REQUEST -> `leader.zk.submitLearnerRequest`\n\n`Leader.ACK`应该是follower对请求的反馈。\n`Leader.REQUEST`应该是follower转发的请求，而`leader.zk.submitLearnerRequest`内部实现其实是调用链。上面分析得知`ProposalRequestProcessor`在处理Proposal时会调用`leader.propose`方法，所以我们重点关注两个方法:\n\n * `leader.propose`处理proposal\n * `leader.processAck`处理proposal ack\n\n```java\n    public Proposal propose(Request request) throws XidRolloverException {\n        /**\n         * Address the rollover issue. All lower 32bits set indicate a new leader\n         * election. Force a re-election instead. See ZOOKEEPER-1277\n         */\n         //ZXID的后32位如果是0xffffffff，关闭\n        if ((request.zxid & 0xffffffffL) == 0xffffffffL) {\n            String msg =\n                    \"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start\";\n            shutdown(msg);\n            throw new XidRolloverException(msg);\n        }\n\n        byte[] data = SerializeUtils.serializeRequest(request);\n        proposalStats.setLastBufferSize(data.length);\n        //构建QuorumPacket和Proposal\n        QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid, data, null);\n\n        Proposal p = new Proposal();\n        p.packet = pp;\n        p.request = request;                \n        \n        synchronized(this) {\n           p.addQuorumVerifier(self.getQuorumVerifier());\n                   \n           if (request.getHdr().getType() == OpCode.reconfig){\n               self.setLastSeenQuorumVerifier(request.qv, true);                       \n           }\n           \n           if (self.getQuorumVerifier().getVersion()<self.getLastSeenQuorumVerifier().getVersion()) {\n               p.addQuorumVerifier(self.getLastSeenQuorumVerifier());\n           }\n                   \n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Proposing:: \" + request);\n            }\n\n            lastProposed = p.packet.getZxid();\n            //写入outstandingProposals队列然后发送\n            outstandingProposals.put(lastProposed, p);\n            sendPacket(pp);\n        }\n        return p;\n    }\n```\n\n```java\n    void sendPacket(QuorumPacket qp) {\n        //往所有的follower发送数据\n        synchronized (forwardingFollowers) {\n            for (LearnerHandler f : forwardingFollowers) {\n                //LearnerHandler其实也是将数据放入队列中。\n                f.queuePacket(qp);\n            }\n        }\n    }\n```\n\n`propose`方法很简单，构建`QuorumPacket`，放入HashMap `outstandingProposals`，然后广播。后面看ack。\n\n```java\n    /**\n     * Keep a count of acks that are received by the leader for a particular\n     * proposal\n     *\n     * @param zxid, the zxid of the proposal sent out\n     * @param sid, the id of the server that sent the ack\n     * @param followerAddr\n     */\n    synchronized public void processAck(long sid, long zxid, SocketAddress followerAddr) {        \n        if (!allowedToCommit) return; // last op committed was a leader change - from now on \n                                     // the new leader should commit        \n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Ack zxid: 0x{}\", Long.toHexString(zxid));\n            for (Proposal p : outstandingProposals.values()) {\n                long packetZxid = p.packet.getZxid();\n                LOG.trace(\"outstanding proposal: 0x{}\",\n                        Long.toHexString(packetZxid));\n            }\n            LOG.trace(\"outstanding proposals all\");\n        }\n        \n        if ((zxid & 0xffffffffL) == 0) {\n            /*\n             * We no longer process NEWLEADER ack with this method. However,\n             * the learner sends an ack back to the leader after it gets\n             * UPTODATE, so we just ignore the message.\n             */\n            return;\n        }\n            \n        //如果没有在外的proposal，直接返回\n        if (outstandingProposals.size() == 0) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"outstanding is 0\");\n            }\n            return;\n        }\n        //如果请求的zxid小于最后一次提交的zxid，表示这个proposal已经提交过了，忽略这个请求。\n        if (lastCommitted >= zxid) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"proposal has already been committed, pzxid: 0x{} zxid: 0x{}\",\n                        Long.toHexString(lastCommitted), Long.toHexString(zxid));\n            }\n            // The proposal has already been committed\n            return;\n        }\n        //从outstandingProposals获取具体的proposal对象\n        Proposal p = outstandingProposals.get(zxid);\n        if (p == null) {\n            LOG.warn(\"Trying to commit future proposal: zxid 0x{} from {}\",\n                    Long.toHexString(zxid), followerAddr);\n            return;\n        }\n        //记录ack\n        p.addAck(sid);        \n        /*if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Count for zxid: 0x{} is {}\",\n                    Long.toHexString(zxid), p.ackSet.size());\n        }*/\n        //尝试提交\n        boolean hasCommitted = tryToCommit(p, zxid, followerAddr);\n\n        // If p is a reconfiguration, multiple other operations may be ready to be committed,\n        // since operations wait for different sets of acks.\n       // Currently we only permit one outstanding reconfiguration at a time\n       // such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is\n       // pending all wait for a quorum of old and new config, so its not possible to get enough acks\n       // for an operation without getting enough acks for preceding ops. But in the future if multiple\n       // concurrent reconfigs are allowed, this can happen and then we need to check whether some pending\n        // ops may already have enough acks and can be committed, which is what this code does.\n\n        if (hasCommitted && p.request!=null && p.request.getHdr().getType() == OpCode.reconfig){\n               long curZxid = zxid;\n           while (allowedToCommit && hasCommitted && p!=null){\n               curZxid++;\n               p = outstandingProposals.get(curZxid);\n               if (p !=null) hasCommitted = tryToCommit(p, curZxid, null);             \n           }\n        }\n    }\n```\n\n`processAck` 先是对zxid进行校验，然后记录，最后调用`tryToCommit`尝试提交。\n\n\n\n```java\n    synchronized public boolean tryToCommit(Proposal p, long zxid, SocketAddress followerAddr) {       \n       // make sure that ops are committed in order. With reconfigurations it is now possible\n       // that different operations wait for different sets of acks, and we still want to enforce\n       // that they are committed in order. Currently we only permit one outstanding reconfiguration\n       // such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is\n       // pending all wait for a quorum of old and new config, so it's not possible to get enough acks\n       // for an operation without getting enough acks for preceding ops. But in the future if multiple\n       // concurrent reconfigs are allowed, this can happen.\n       //保证顺序\n       if (outstandingProposals.containsKey(zxid - 1)) return false;\n       \n       // in order to be committed, a proposal must be accepted by a quorum.\n       //\n       // getting a quorum from all necessary configurations.\n       //过半提交\n        if (!p.hasAllQuorums()) {\n           return false;                 \n        }\n        \n        // commit proposals in order\n        if (zxid != lastCommitted+1) {    \n           LOG.warn(\"Commiting zxid 0x\" + Long.toHexString(zxid)\n                    + \" from \" + followerAddr + \" not first!\");\n            LOG.warn(\"First is \"\n                    + (lastCommitted+1));\n        }     \n        //从outstandingProposals中移除\n        outstandingProposals.remove(zxid);\n        //toBeApplied队列加入\n        if (p.request != null) {\n             toBeApplied.add(p);\n        }\n\n        if (p.request == null) {\n            LOG.warn(\"Going to commmit null: \" + p);\n        } else if (p.request.getHdr().getType() == OpCode.reconfig) {                                   \n            LOG.debug(\"Committing a reconfiguration! \" + outstandingProposals.size()); \n                 \n            //if this server is voter in new config with the same quorum address, \n            //then it will remain the leader\n            //otherwise an up-to-date follower will be designated as leader. This saves\n            //leader election time, unless the designated leader fails                             \n            Long designatedLeader = getDesignatedLeader(p, zxid);\n            //LOG.warn(\"designated leader is: \" + designatedLeader);\n\n            QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size()-1).getQuorumVerifier();\n       \n            self.processReconfig(newQV, designatedLeader, zk.getZxid(), true);\n\n            if (designatedLeader != self.getId()) {\n                allowedToCommit = false;\n            }\n                   \n            // we're sending the designated leader, and if the leader is changing the followers are \n            // responsible for closing the connection - this way we are sure that at least a majority of them \n            // receive the commit message.\n            commitAndActivate(zxid, designatedLeader);\n            informAndActivate(p, designatedLeader);\n            //turnOffFollowers();\n        } else {\n            //向所有follower发送commit请求。\n            commit(zxid);\n            //向所有Observer广播\n            inform(p);\n        }\n        //commitProcessor处理commit请求。\n        zk.commitProcessor.commit(p.request);\n        if(pendingSyncs.containsKey(zxid)){\n            for(LearnerSyncRequest r: pendingSyncs.remove(zxid)) {\n                sendSync(r);\n            }               \n        } \n        \n        return  true;   \n    }\n    public void commit(long zxid) {\n        synchronized(this){\n            lastCommitted = zxid;\n        }\n        QuorumPacket qp = new QuorumPacket(Leader.COMMIT, zxid, null, null);\n        sendPacket(qp);\n    }\n    public void inform(Proposal proposal) {\n        QuorumPacket qp = new QuorumPacket(Leader.INFORM, proposal.request.zxid,\n                                            proposal.packet.getData(), null);\n        sendObserverPacket(qp);\n    }\n```\n\n## 7. leader propose流程总结\n\n* 1. 请求处理入口有2个，一个是`org.apache.zookeeper.server.ZooKeeperServer#submitRequest`，另外一个是`LearnerHandler`的follower转发请求，都是调用处理链来处理。\n* 2. 处理链总结为:PrepRequestProcessor->ProposalRequestProcessor->\n                                          CommitProcessor->ToBeAppliedRequestProcessor->FinalRequestProcessor\n                                          SyncRequestProcessor->AckRequestProcessor\n* 3. ProposalRequestProcessor调用leader的propose方法广播proposal，同时调用2个处理链。\n* 4. 处理链`SyncRequestProcessor->AckRequestProcessor`可以理解为本地的proposal处理，SyncRequestProcessor将proposal存入磁盘，AckRequestProcessor会调用leader.processAck来返回ack。\n* 5. 处理链`CommitProcessor->ToBeAppliedRequestProcessor->FinalRequestProcessor`，CommitProcessor会阻塞住一个请求，直到被调用commit方法，然后交由FinalRequestProcessor修改内存数据。\n* 6. leader和follower处理完后，会调用`org.apache.zookeeper.server.quorum.Leader#processAck`，leader判断获得半数以上的反馈后，会调用CommitProcessor的commit方法，跳转到5。\n\n\n## 8. FollowerZooKeeperServer\n\n理解了LeaderZooKeeperServer之后再来看FollowerZooKeeperServer，发现其实很好理解。\n\n```java\n    @Override\n    protected void setupRequestProcessors() {\n        RequestProcessor finalProcessor = new FinalRequestProcessor(this);\n        commitProcessor = new CommitProcessor(finalProcessor,\n                Long.toString(getServerId()), true, getZooKeeperServerListener());\n        commitProcessor.start();\n        firstProcessor = new FollowerRequestProcessor(this, commitProcessor);\n        ((FollowerRequestProcessor) firstProcessor).start();\n        syncProcessor = new SyncRequestProcessor(this,\n                new SendAckRequestProcessor((Learner)getFollower()));\n        syncProcessor.start();\n    }\n\n    LinkedBlockingQueue<Request> pendingTxns = new LinkedBlockingQueue<Request>();\n\n    //处理proposal\n    public void logRequest(TxnHeader hdr, Record txn) {\n        Request request = new Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());\n        if ((request.zxid & 0xffffffffL) != 0) {\n            pendingTxns.add(request);\n        }\n        syncProcessor.processRequest(request);\n    }\n\n    /**\n     * When a COMMIT message is received, eventually this method is called,\n     * which matches up the zxid from the COMMIT with (hopefully) the head of\n     * the pendingTxns queue and hands it to the commitProcessor to commit.\n     * @param zxid - must correspond to the head of pendingTxns if it exists\n     */\n     //处理commit请求\n    public void commit(long zxid) {\n        if (pendingTxns.size() == 0) {\n            LOG.warn(\"Committing \" + Long.toHexString(zxid)\n                    + \" without seeing txn\");\n            return;\n        }\n        long firstElementZxid = pendingTxns.element().zxid;\n        if (firstElementZxid != zxid) {\n            LOG.error(\"Committing zxid 0x\" + Long.toHexString(zxid)\n                    + \" but next pending txn 0x\"\n                    + Long.toHexString(firstElementZxid));\n            System.exit(12);\n        }\n        Request request = pendingTxns.remove();\n        commitProcessor.commit(request);\n    }\n```\n\n\n两个处理链：\n\n* 1.FollowerRequestProcessor->CommitProcessor->FinalRequestProcessor\n* 2.SyncRequestProcessor->SendAckRequestProcessor\n\nproposal请求时，调用处理链`SyncRequestProcessor->SendAckRequestProcessor`，写入磁盘并返回ack。\ncommit时，调用处理链`CommitProcessor->FinalRequestProcessor`，写入内存。\n\n","source":"_posts/2019-08-20-zookeeper-LeaderZooKeeperServer3.5.5.md","raw":"---\nlayout:     post\ntitle:      \"zookeeper-LeaderZooKeeperServer3.5.5\"\ndate:       2019-08-20\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n[toc]\n# LeaderZooKeeperServer\n\n```java\n    CommitProcessor commitProcessor;\n    PrepRequestProcessor prepRequestProcessor;\n    protected void setupRequestProcessors() {\n        RequestProcessor finalProcessor = new FinalRequestProcessor(this);\n        RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());\n        commitProcessor = new CommitProcessor(toBeAppliedProcessor,\n                Long.toString(getServerId()), false,\n                getZooKeeperServerListener());\n        commitProcessor.start();\n        ProposalRequestProcessor proposalProcessor = new ProposalRequestProcessor(this,\n                commitProcessor);\n        proposalProcessor.initialize();\n        prepRequestProcessor = new PrepRequestProcessor(this, proposalProcessor);\n        prepRequestProcessor.start();\n        firstProcessor = new LeaderRequestProcessor(this, prepRequestProcessor);\n\n        setupContainerManager();\n    }\n```\n可以看到有3个处理链:\n1. `firstProcessor`处理链`LeaderRequestProcessor->PrepRequestProcessor->ProposalRequestProcessor->CommitProcessor->Leader.ToBeAppliedRequestProcessor ->FinalRequestProcessor`\n2. `CommitProcessor->Leader.ToBeAppliedRequestProcessor ->FinalRequestProcessor`\n3. `PrepRequestProcessor->ProposalRequestProcessor->CommitProcessor->Leader.ToBeAppliedRequestProcessor ->FinalRequestProcessor`\n\n当外部请求来时，使用的是`firstProcessor`。\n\n## 1 LeaderRequestProcessor\n\n```java\n    @Override\n    public void processRequest(Request request)\n            throws RequestProcessorException {\n        // Check if this is a local session and we are trying to create\n        // an ephemeral node, in which case we upgrade the session\n        Request upgradeRequest = null;\n        try {\n            upgradeRequest = lzks.checkUpgradeSession(request);\n        } catch (KeeperException ke) {\n            if (request.getHdr() != null) {\n                LOG.debug(\"Updating header\");\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(ke.code().intValue()));\n            }\n            request.setException(ke);\n            LOG.info(\"Error creating upgrade request \" + ke.getMessage());\n        } catch (IOException ie) {\n            LOG.error(\"Unexpected error in upgrade\", ie);\n        }\n        if (upgradeRequest != null) {\n            nextProcessor.processRequest(upgradeRequest);\n        }\n\n        nextProcessor.processRequest(request);\n    }\n```\n\n看英文注释，`LeaderRequestProcessor`只是更新了下session，然后交给下个来处理。\n\n`PrepRequestProcessor`之前分析过，这里不写了。\n\n## 2 ProposalRequestProcessor\n\n```java\n    public ProposalRequestProcessor(LeaderZooKeeperServer zks,\n            RequestProcessor nextProcessor) {\n        this.zks = zks;\n        this.nextProcessor = nextProcessor;\n        AckRequestProcessor ackProcessor = new AckRequestProcessor(zks.getLeader());\n        syncProcessor = new SyncRequestProcessor(zks, ackProcessor);\n    }\n\n    public void processRequest(Request request) throws RequestProcessorException {\n        //如果是LearnerSyncRequest，调用leader的processSync方法，应该跟follow同步有关\n        if (request instanceof LearnerSyncRequest){\n            zks.getLeader().processSync((LearnerSyncRequest)request);\n        } else {\n            //交给下一个处理器处理，如果是事务操作的话（也就是写操作，个人理解），调用leader.propose和syncProcessor\n            nextProcessor.processRequest(request);\n            if (request.getHdr() != null) {\n                // We need to sync and get consensus on any transactions\n                try {\n                    zks.getLeader().propose(request);\n                } catch (XidRolloverException e) {\n                    throw new RequestProcessorException(e.getMessage(), e);\n                }\n                //如果是事物消息的话，调用syncProcessor\n                syncProcessor.processRequest(request);\n            }\n        }\n    }\n```\n\n`ProposalRequestProcessor`的功能总结：\n1. 如果是sync请求，调用leader.processSync。\n2. 非sync请求，调用\n\n所以请求的调用链可以调整为：\n```\nPrepRequestProcessor->ProposalRequestProcessor->\n                                          CommitProcessor->ToBeAppliedRequestProcessor->FinalRequestProcessor\n                                          SyncRequestProcessor->AckRequestProcessor\n```\n\n\n\n## 3. CommitProcessor\n\n```java\n\n    /**\n     * Requests that we are holding until the commit comes in.\n     */\n    protected final LinkedBlockingQueue<Request> queuedRequests =\n        new LinkedBlockingQueue<Request>();\n    /**\n     * Requests that have been committed.\n     */\n    protected final LinkedBlockingQueue<Request> committedRequests =\n        new LinkedBlockingQueue<Request>();\n    /** Request for which we are currently awaiting a commit */\n    protected final AtomicReference<Request> nextPending =\n        new AtomicReference<Request>();\n    /** Request currently being committed (ie, sent off to next processor) */\n    private final AtomicReference<Request> currentlyCommitting =\n        new AtomicReference<Request>();\n    @Override\n    public void processRequest(Request request) {\n        if (stopped) {\n            return;\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        //把request放入queuedRequests，等待处理\n        queuedRequests.add(request);\n        if (!isWaitingForCommit()) {\n            wakeup();\n        }\n    }\n    private boolean isWaitingForCommit() {\n        return nextPending.get() != null;\n    }\n\n    private boolean isProcessingCommit() {\n        return currentlyCommitting.get() != null;\n    }\n    @Override\n    public void run() {\n        Request request;\n        try {\n            while (!stopped) {\n                //如果queuedRequests和committedRequests都是空 && 有正在处理的请求，一直等待\n                synchronized(this) {\n                    while (\n                        !stopped &&\n                        ((queuedRequests.isEmpty() || isWaitingForCommit() || isProcessingCommit()) &&\n                         (committedRequests.isEmpty() || isProcessingRequest()))) {\n                        wait();\n                    }\n                }\n\n                /*\n                 * Processing queuedRequests: Process the next requests until we\n                 * find one for which we need to wait for a commit. We cannot\n                 * process a read request while we are processing write request.\n                 */\n                 //nextPending和currentlyCommitting没数据，且queuedRequests有数据。\n                while (!stopped && !isWaitingForCommit() &&\n                       !isProcessingCommit() &&\n                       (request = queuedRequests.poll()) != null) {\n                    //如果是写请求，写入nextPending，WaitingForCommit\n                    if (needCommit(request)) {\n                        nextPending.set(request);\n                    } else {\n                        //交给下面处理器处理\n                        sendToNextProcessor(request);\n                    }\n                }\n\n                /*\n                 * Processing committedRequests: check and see if the commit\n                 * came in for the pending request. We can only commit a\n                 * request when there is no other request being processed.\n                 */\n                processCommitted();\n            }\n        } catch (Throwable e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"CommitProcessor exited loop!\");\n    }\n    \n    //commit方法，由leader调用，将commit请求放入队列committedRequests\n    public void commit(Request request) {\n        if (stopped || request == null) {\n            return;\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Committing request:: \" + request);\n        }\n        committedRequests.add(request);\n        if (!isProcessingCommit()) {\n            wakeup();\n        }\n    }\n    \n    protected void processCommitted() {\n        Request request;\n\n        if (!stopped && !isProcessingRequest() &&\n                (committedRequests.peek() != null)) {\n\n            /*\n             * ZOOKEEPER-1863: continue only if there is no new request\n             * waiting in queuedRequests or it is waiting for a\n             * commit. \n             */\n            if ( !isWaitingForCommit() && !queuedRequests.isEmpty()) {\n                return;\n            }\n            //从committedRequests中取出请求\n            request = committedRequests.poll();\n\n            /*\n             * We match with nextPending so that we can move to the\n             * next request when it is committed. We also want to\n             * use nextPending because it has the cnxn member set\n             * properly.\n             */\n             //commitRequest和pendingRequest进行比对。但是最后都是交给下面的处理，好像并没有什么区别。\n            Request pending = nextPending.get();\n            if (pending != null &&\n                pending.sessionId == request.sessionId &&\n                pending.cxid == request.cxid) {\n                // we want to send our version of the request.\n                // the pointer to the connection in the request\n                pending.setHdr(request.getHdr());\n                pending.setTxn(request.getTxn());\n                pending.zxid = request.zxid;\n                // Set currentlyCommitting so we will block until this\n                // completes. Cleared by CommitWorkRequest after\n                // nextProcessor returns.\n                currentlyCommitting.set(pending);\n                nextPending.set(null);\n                sendToNextProcessor(pending);\n            } else {\n                // this request came from someone else so just\n                // send the commit packet\n                currentlyCommitting.set(request);\n                sendToNextProcessor(request);\n            }\n        }      \n    }\n```\n\n## 4 ToBeAppliedRequestProcessor\n\n`ToBeAppliedRequestProcessor`是`Leader`的内部类。\n\n```java\n    static class ToBeAppliedRequestProcessor implements RequestProcessor {\n        private final RequestProcessor next;\n\n        private final Leader leader;\n\n        /**\n         * This request processor simply maintains the toBeApplied list. For\n         * this to work next must be a FinalRequestProcessor and\n         * FinalRequestProcessor.processRequest MUST process the request\n         * synchronously!\n         *\n         * @param next\n         *                a reference to the FinalRequestProcessor\n         */\n        ToBeAppliedRequestProcessor(RequestProcessor next, Leader leader) {\n            if (!(next instanceof FinalRequestProcessor)) {\n                throw new RuntimeException(ToBeAppliedRequestProcessor.class\n                        .getName()\n                        + \" must be connected to \"\n                        + FinalRequestProcessor.class.getName()\n                        + \" not \"\n                        + next.getClass().getName());\n            }\n            this.leader = leader;\n            this.next = next;\n        }\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see org.apache.zookeeper.server.RequestProcessor#processRequest(org.apache.zookeeper.server.Request)\n         */\n        public void processRequest(Request request) throws RequestProcessorException {\n            next.processRequest(request);\n\n            // The only requests that should be on toBeApplied are write\n            // requests, for which we will have a hdr. We can't simply use\n            // request.zxid here because that is set on read requests to equal\n            // the zxid of the last write op.\n            if (request.getHdr() != null) {\n                long zxid = request.getHdr().getZxid();\n                Iterator<Proposal> iter = leader.toBeApplied.iterator();\n                if (iter.hasNext()) {\n                    Proposal p = iter.next();\n                    if (p.request != null && p.request.zxid == zxid) {\n                        iter.remove();\n                        return;\n                    }\n                }\n                LOG.error(\"Committed request not found on toBeApplied: \"\n                          + request);\n            }\n        }\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see org.apache.zookeeper.server.RequestProcessor#shutdown()\n         */\n        public void shutdown() {\n            LOG.info(\"Shutting down\");\n            next.shutdown();\n        }\n    }\n\n```\n\n`ToBeAppliedRequestProcessor`的作用就是用下个处理器处理，然后把`request`从`toBeApplied`队列里删掉。\n\n## 5.AckRequestProcessor\n\n```java\nclass AckRequestProcessor implements RequestProcessor {\n    private static final Logger LOG = LoggerFactory.getLogger(AckRequestProcessor.class);\n    Leader leader;\n\n    AckRequestProcessor(Leader leader) {\n        this.leader = leader;\n    }\n\n    /**\n     * Forward the request as an ACK to the leader\n     */\n    public void processRequest(Request request) {\n        QuorumPeer self = leader.self;\n        if(self != null)\n            leader.processAck(self.getId(), request.zxid, null);\n        else\n            LOG.error(\"Null QuorumPeer\");\n    }\n\n    public void shutdown() {\n        // XXX No need to do anything\n    }\n}\n```\n\n`AckRequestProcessor`的作用就是调`leader.processAck`来处理请求。\n\n## 6.leader\n\n`leader`代码有点多，主要看下跟投票相关的核心代码吧。\n先从`LearnerHandler`开始，`leader`启动时会对每个`Quorum`节点建立socket连接，`LearnerHandler`就是用来处理这个连接的。\n\n```java\nswitch (qp.getType()) {\n                case Leader.ACK:\n                    if (this.learnerType == LearnerType.OBSERVER) {\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Received ACK from Observer  \" + this.sid);\n                        }\n                    }\n                    syncLimitCheck.updateAck(qp.getZxid());\n                    leader.processAck(this.sid, qp.getZxid(), sock.getLocalSocketAddress());\n                    break;\n                case Leader.PING:\n                    // Process the touches\n                    ByteArrayInputStream bis = new ByteArrayInputStream(qp\n                            .getData());\n                    DataInputStream dis = new DataInputStream(bis);\n                    while (dis.available() > 0) {\n                        long sess = dis.readLong();\n                        int to = dis.readInt();\n                        leader.zk.touch(sess, to);\n                    }\n                    break;\n                case Leader.REVALIDATE:\n                    bis = new ByteArrayInputStream(qp.getData());\n                    dis = new DataInputStream(bis);\n                    long id = dis.readLong();\n                    int to = dis.readInt();\n                    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                    DataOutputStream dos = new DataOutputStream(bos);\n                    dos.writeLong(id);\n                    boolean valid = leader.zk.checkIfValidGlobalSession(id, to);\n                    if (valid) {\n                        try {\n                            //set the session owner\n                            // as the follower that\n                            // owns the session\n                            leader.zk.setOwner(id, this);\n                        } catch (SessionExpiredException e) {\n                            LOG.error(\"Somehow session \" + Long.toHexString(id) +\n                                    \" expired right after being renewed! (impossible)\", e);\n                        }\n                    }\n                    if (LOG.isTraceEnabled()) {\n                        ZooTrace.logTraceMessage(LOG,\n                                                 ZooTrace.SESSION_TRACE_MASK,\n                                                 \"Session 0x\" + Long.toHexString(id)\n                                                 + \" is valid: \"+ valid);\n                    }\n                    dos.writeBoolean(valid);\n                    qp.setData(bos.toByteArray());\n                    queuedPackets.add(qp);\n                    break;\n                case Leader.REQUEST:\n                    bb = ByteBuffer.wrap(qp.getData());\n                    sessionId = bb.getLong();\n                    cxid = bb.getInt();\n                    type = bb.getInt();\n                    bb = bb.slice();\n                    Request si;\n                    if(type == OpCode.sync){\n                        si = new LearnerSyncRequest(this, sessionId, cxid, type, bb, qp.getAuthinfo());\n                    } else {\n                        si = new Request(null, sessionId, cxid, type, bb, qp.getAuthinfo());\n                    }\n                    si.setOwner(this);\n                    leader.zk.submitLearnerRequest(si);\n                    break;\n                default:\n                    LOG.warn(\"unexpected quorum packet, type: {}\", packetToString(qp));\n                    break;\n                }\n```\n\n可以看到分别对请求类型做了不同的处理：\n\n* Leader.ACK -> `leader.processAck`\n* Leader.PING -> `leader.zk.touch`\n* Leader.REVALIDATE -> `leader.zk.checkIfValidGlobalSession`和`leader.zk.setOwner`\n* Leader.REQUEST -> `leader.zk.submitLearnerRequest`\n\n`Leader.ACK`应该是follower对请求的反馈。\n`Leader.REQUEST`应该是follower转发的请求，而`leader.zk.submitLearnerRequest`内部实现其实是调用链。上面分析得知`ProposalRequestProcessor`在处理Proposal时会调用`leader.propose`方法，所以我们重点关注两个方法:\n\n * `leader.propose`处理proposal\n * `leader.processAck`处理proposal ack\n\n```java\n    public Proposal propose(Request request) throws XidRolloverException {\n        /**\n         * Address the rollover issue. All lower 32bits set indicate a new leader\n         * election. Force a re-election instead. See ZOOKEEPER-1277\n         */\n         //ZXID的后32位如果是0xffffffff，关闭\n        if ((request.zxid & 0xffffffffL) == 0xffffffffL) {\n            String msg =\n                    \"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start\";\n            shutdown(msg);\n            throw new XidRolloverException(msg);\n        }\n\n        byte[] data = SerializeUtils.serializeRequest(request);\n        proposalStats.setLastBufferSize(data.length);\n        //构建QuorumPacket和Proposal\n        QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid, data, null);\n\n        Proposal p = new Proposal();\n        p.packet = pp;\n        p.request = request;                \n        \n        synchronized(this) {\n           p.addQuorumVerifier(self.getQuorumVerifier());\n                   \n           if (request.getHdr().getType() == OpCode.reconfig){\n               self.setLastSeenQuorumVerifier(request.qv, true);                       \n           }\n           \n           if (self.getQuorumVerifier().getVersion()<self.getLastSeenQuorumVerifier().getVersion()) {\n               p.addQuorumVerifier(self.getLastSeenQuorumVerifier());\n           }\n                   \n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Proposing:: \" + request);\n            }\n\n            lastProposed = p.packet.getZxid();\n            //写入outstandingProposals队列然后发送\n            outstandingProposals.put(lastProposed, p);\n            sendPacket(pp);\n        }\n        return p;\n    }\n```\n\n```java\n    void sendPacket(QuorumPacket qp) {\n        //往所有的follower发送数据\n        synchronized (forwardingFollowers) {\n            for (LearnerHandler f : forwardingFollowers) {\n                //LearnerHandler其实也是将数据放入队列中。\n                f.queuePacket(qp);\n            }\n        }\n    }\n```\n\n`propose`方法很简单，构建`QuorumPacket`，放入HashMap `outstandingProposals`，然后广播。后面看ack。\n\n```java\n    /**\n     * Keep a count of acks that are received by the leader for a particular\n     * proposal\n     *\n     * @param zxid, the zxid of the proposal sent out\n     * @param sid, the id of the server that sent the ack\n     * @param followerAddr\n     */\n    synchronized public void processAck(long sid, long zxid, SocketAddress followerAddr) {        \n        if (!allowedToCommit) return; // last op committed was a leader change - from now on \n                                     // the new leader should commit        \n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Ack zxid: 0x{}\", Long.toHexString(zxid));\n            for (Proposal p : outstandingProposals.values()) {\n                long packetZxid = p.packet.getZxid();\n                LOG.trace(\"outstanding proposal: 0x{}\",\n                        Long.toHexString(packetZxid));\n            }\n            LOG.trace(\"outstanding proposals all\");\n        }\n        \n        if ((zxid & 0xffffffffL) == 0) {\n            /*\n             * We no longer process NEWLEADER ack with this method. However,\n             * the learner sends an ack back to the leader after it gets\n             * UPTODATE, so we just ignore the message.\n             */\n            return;\n        }\n            \n        //如果没有在外的proposal，直接返回\n        if (outstandingProposals.size() == 0) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"outstanding is 0\");\n            }\n            return;\n        }\n        //如果请求的zxid小于最后一次提交的zxid，表示这个proposal已经提交过了，忽略这个请求。\n        if (lastCommitted >= zxid) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"proposal has already been committed, pzxid: 0x{} zxid: 0x{}\",\n                        Long.toHexString(lastCommitted), Long.toHexString(zxid));\n            }\n            // The proposal has already been committed\n            return;\n        }\n        //从outstandingProposals获取具体的proposal对象\n        Proposal p = outstandingProposals.get(zxid);\n        if (p == null) {\n            LOG.warn(\"Trying to commit future proposal: zxid 0x{} from {}\",\n                    Long.toHexString(zxid), followerAddr);\n            return;\n        }\n        //记录ack\n        p.addAck(sid);        \n        /*if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Count for zxid: 0x{} is {}\",\n                    Long.toHexString(zxid), p.ackSet.size());\n        }*/\n        //尝试提交\n        boolean hasCommitted = tryToCommit(p, zxid, followerAddr);\n\n        // If p is a reconfiguration, multiple other operations may be ready to be committed,\n        // since operations wait for different sets of acks.\n       // Currently we only permit one outstanding reconfiguration at a time\n       // such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is\n       // pending all wait for a quorum of old and new config, so its not possible to get enough acks\n       // for an operation without getting enough acks for preceding ops. But in the future if multiple\n       // concurrent reconfigs are allowed, this can happen and then we need to check whether some pending\n        // ops may already have enough acks and can be committed, which is what this code does.\n\n        if (hasCommitted && p.request!=null && p.request.getHdr().getType() == OpCode.reconfig){\n               long curZxid = zxid;\n           while (allowedToCommit && hasCommitted && p!=null){\n               curZxid++;\n               p = outstandingProposals.get(curZxid);\n               if (p !=null) hasCommitted = tryToCommit(p, curZxid, null);             \n           }\n        }\n    }\n```\n\n`processAck` 先是对zxid进行校验，然后记录，最后调用`tryToCommit`尝试提交。\n\n\n\n```java\n    synchronized public boolean tryToCommit(Proposal p, long zxid, SocketAddress followerAddr) {       \n       // make sure that ops are committed in order. With reconfigurations it is now possible\n       // that different operations wait for different sets of acks, and we still want to enforce\n       // that they are committed in order. Currently we only permit one outstanding reconfiguration\n       // such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is\n       // pending all wait for a quorum of old and new config, so it's not possible to get enough acks\n       // for an operation without getting enough acks for preceding ops. But in the future if multiple\n       // concurrent reconfigs are allowed, this can happen.\n       //保证顺序\n       if (outstandingProposals.containsKey(zxid - 1)) return false;\n       \n       // in order to be committed, a proposal must be accepted by a quorum.\n       //\n       // getting a quorum from all necessary configurations.\n       //过半提交\n        if (!p.hasAllQuorums()) {\n           return false;                 \n        }\n        \n        // commit proposals in order\n        if (zxid != lastCommitted+1) {    \n           LOG.warn(\"Commiting zxid 0x\" + Long.toHexString(zxid)\n                    + \" from \" + followerAddr + \" not first!\");\n            LOG.warn(\"First is \"\n                    + (lastCommitted+1));\n        }     \n        //从outstandingProposals中移除\n        outstandingProposals.remove(zxid);\n        //toBeApplied队列加入\n        if (p.request != null) {\n             toBeApplied.add(p);\n        }\n\n        if (p.request == null) {\n            LOG.warn(\"Going to commmit null: \" + p);\n        } else if (p.request.getHdr().getType() == OpCode.reconfig) {                                   \n            LOG.debug(\"Committing a reconfiguration! \" + outstandingProposals.size()); \n                 \n            //if this server is voter in new config with the same quorum address, \n            //then it will remain the leader\n            //otherwise an up-to-date follower will be designated as leader. This saves\n            //leader election time, unless the designated leader fails                             \n            Long designatedLeader = getDesignatedLeader(p, zxid);\n            //LOG.warn(\"designated leader is: \" + designatedLeader);\n\n            QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size()-1).getQuorumVerifier();\n       \n            self.processReconfig(newQV, designatedLeader, zk.getZxid(), true);\n\n            if (designatedLeader != self.getId()) {\n                allowedToCommit = false;\n            }\n                   \n            // we're sending the designated leader, and if the leader is changing the followers are \n            // responsible for closing the connection - this way we are sure that at least a majority of them \n            // receive the commit message.\n            commitAndActivate(zxid, designatedLeader);\n            informAndActivate(p, designatedLeader);\n            //turnOffFollowers();\n        } else {\n            //向所有follower发送commit请求。\n            commit(zxid);\n            //向所有Observer广播\n            inform(p);\n        }\n        //commitProcessor处理commit请求。\n        zk.commitProcessor.commit(p.request);\n        if(pendingSyncs.containsKey(zxid)){\n            for(LearnerSyncRequest r: pendingSyncs.remove(zxid)) {\n                sendSync(r);\n            }               \n        } \n        \n        return  true;   \n    }\n    public void commit(long zxid) {\n        synchronized(this){\n            lastCommitted = zxid;\n        }\n        QuorumPacket qp = new QuorumPacket(Leader.COMMIT, zxid, null, null);\n        sendPacket(qp);\n    }\n    public void inform(Proposal proposal) {\n        QuorumPacket qp = new QuorumPacket(Leader.INFORM, proposal.request.zxid,\n                                            proposal.packet.getData(), null);\n        sendObserverPacket(qp);\n    }\n```\n\n## 7. leader propose流程总结\n\n* 1. 请求处理入口有2个，一个是`org.apache.zookeeper.server.ZooKeeperServer#submitRequest`，另外一个是`LearnerHandler`的follower转发请求，都是调用处理链来处理。\n* 2. 处理链总结为:PrepRequestProcessor->ProposalRequestProcessor->\n                                          CommitProcessor->ToBeAppliedRequestProcessor->FinalRequestProcessor\n                                          SyncRequestProcessor->AckRequestProcessor\n* 3. ProposalRequestProcessor调用leader的propose方法广播proposal，同时调用2个处理链。\n* 4. 处理链`SyncRequestProcessor->AckRequestProcessor`可以理解为本地的proposal处理，SyncRequestProcessor将proposal存入磁盘，AckRequestProcessor会调用leader.processAck来返回ack。\n* 5. 处理链`CommitProcessor->ToBeAppliedRequestProcessor->FinalRequestProcessor`，CommitProcessor会阻塞住一个请求，直到被调用commit方法，然后交由FinalRequestProcessor修改内存数据。\n* 6. leader和follower处理完后，会调用`org.apache.zookeeper.server.quorum.Leader#processAck`，leader判断获得半数以上的反馈后，会调用CommitProcessor的commit方法，跳转到5。\n\n\n## 8. FollowerZooKeeperServer\n\n理解了LeaderZooKeeperServer之后再来看FollowerZooKeeperServer，发现其实很好理解。\n\n```java\n    @Override\n    protected void setupRequestProcessors() {\n        RequestProcessor finalProcessor = new FinalRequestProcessor(this);\n        commitProcessor = new CommitProcessor(finalProcessor,\n                Long.toString(getServerId()), true, getZooKeeperServerListener());\n        commitProcessor.start();\n        firstProcessor = new FollowerRequestProcessor(this, commitProcessor);\n        ((FollowerRequestProcessor) firstProcessor).start();\n        syncProcessor = new SyncRequestProcessor(this,\n                new SendAckRequestProcessor((Learner)getFollower()));\n        syncProcessor.start();\n    }\n\n    LinkedBlockingQueue<Request> pendingTxns = new LinkedBlockingQueue<Request>();\n\n    //处理proposal\n    public void logRequest(TxnHeader hdr, Record txn) {\n        Request request = new Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());\n        if ((request.zxid & 0xffffffffL) != 0) {\n            pendingTxns.add(request);\n        }\n        syncProcessor.processRequest(request);\n    }\n\n    /**\n     * When a COMMIT message is received, eventually this method is called,\n     * which matches up the zxid from the COMMIT with (hopefully) the head of\n     * the pendingTxns queue and hands it to the commitProcessor to commit.\n     * @param zxid - must correspond to the head of pendingTxns if it exists\n     */\n     //处理commit请求\n    public void commit(long zxid) {\n        if (pendingTxns.size() == 0) {\n            LOG.warn(\"Committing \" + Long.toHexString(zxid)\n                    + \" without seeing txn\");\n            return;\n        }\n        long firstElementZxid = pendingTxns.element().zxid;\n        if (firstElementZxid != zxid) {\n            LOG.error(\"Committing zxid 0x\" + Long.toHexString(zxid)\n                    + \" but next pending txn 0x\"\n                    + Long.toHexString(firstElementZxid));\n            System.exit(12);\n        }\n        Request request = pendingTxns.remove();\n        commitProcessor.commit(request);\n    }\n```\n\n\n两个处理链：\n\n* 1.FollowerRequestProcessor->CommitProcessor->FinalRequestProcessor\n* 2.SyncRequestProcessor->SendAckRequestProcessor\n\nproposal请求时，调用处理链`SyncRequestProcessor->SendAckRequestProcessor`，写入磁盘并返回ack。\ncommit时，调用处理链`CommitProcessor->FinalRequestProcessor`，写入内存。\n\n","slug":"2019-08-20-zookeeper-LeaderZooKeeperServer3.5.5","published":1,"updated":"2019-08-20T13:16:25.131Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a600071fytgjtgftts","content":"<p>[toc]</p>\n<h1 id=\"LeaderZooKeeperServer\"><a href=\"#LeaderZooKeeperServer\" class=\"headerlink\" title=\"LeaderZooKeeperServer\"></a>LeaderZooKeeperServer</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommitProcessor commitProcessor;</span><br><span class=\"line\">PrepRequestProcessor prepRequestProcessor;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setupRequestProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RequestProcessor finalProcessor = <span class=\"keyword\">new</span> FinalRequestProcessor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    RequestProcessor toBeAppliedProcessor = <span class=\"keyword\">new</span> Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());</span><br><span class=\"line\">    commitProcessor = <span class=\"keyword\">new</span> CommitProcessor(toBeAppliedProcessor,</span><br><span class=\"line\">            Long.toString(getServerId()), <span class=\"keyword\">false</span>,</span><br><span class=\"line\">            getZooKeeperServerListener());</span><br><span class=\"line\">    commitProcessor.start();</span><br><span class=\"line\">    ProposalRequestProcessor proposalProcessor = <span class=\"keyword\">new</span> ProposalRequestProcessor(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">            commitProcessor);</span><br><span class=\"line\">    proposalProcessor.initialize();</span><br><span class=\"line\">    prepRequestProcessor = <span class=\"keyword\">new</span> PrepRequestProcessor(<span class=\"keyword\">this</span>, proposalProcessor);</span><br><span class=\"line\">    prepRequestProcessor.start();</span><br><span class=\"line\">    firstProcessor = <span class=\"keyword\">new</span> LeaderRequestProcessor(<span class=\"keyword\">this</span>, prepRequestProcessor);</span><br><span class=\"line\"></span><br><span class=\"line\">    setupContainerManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到有3个处理链:</p>\n<ol>\n<li><code>firstProcessor</code>处理链<code>LeaderRequestProcessor-&gt;PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;CommitProcessor-&gt;Leader.ToBeAppliedRequestProcessor -&gt;FinalRequestProcessor</code></li>\n<li><code>CommitProcessor-&gt;Leader.ToBeAppliedRequestProcessor -&gt;FinalRequestProcessor</code></li>\n<li><code>PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;CommitProcessor-&gt;Leader.ToBeAppliedRequestProcessor -&gt;FinalRequestProcessor</code></li>\n</ol>\n<p>当外部请求来时，使用的是<code>firstProcessor</code>。</p>\n<h2 id=\"1-LeaderRequestProcessor\"><a href=\"#1-LeaderRequestProcessor\" class=\"headerlink\" title=\"1 LeaderRequestProcessor\"></a>1 LeaderRequestProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check if this is a local session and we are trying to create</span></span><br><span class=\"line\">    <span class=\"comment\">// an ephemeral node, in which case we upgrade the session</span></span><br><span class=\"line\">    Request upgradeRequest = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        upgradeRequest = lzks.checkUpgradeSession(request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (KeeperException ke) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Updating header\"</span>);</span><br><span class=\"line\">            request.getHdr().setType(OpCode.error);</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> ErrorTxn(ke.code().intValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.setException(ke);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"Error creating upgrade request \"</span> + ke.getMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException ie) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unexpected error in upgrade\"</span>, ie);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (upgradeRequest != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        nextProcessor.processRequest(upgradeRequest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nextProcessor.processRequest(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看英文注释，<code>LeaderRequestProcessor</code>只是更新了下session，然后交给下个来处理。</p>\n<p><code>PrepRequestProcessor</code>之前分析过，这里不写了。</p>\n<h2 id=\"2-ProposalRequestProcessor\"><a href=\"#2-ProposalRequestProcessor\" class=\"headerlink\" title=\"2 ProposalRequestProcessor\"></a>2 ProposalRequestProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProposalRequestProcessor</span><span class=\"params\">(LeaderZooKeeperServer zks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        RequestProcessor nextProcessor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.zks = zks;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nextProcessor = nextProcessor;</span><br><span class=\"line\">    AckRequestProcessor ackProcessor = <span class=\"keyword\">new</span> AckRequestProcessor(zks.getLeader());</span><br><span class=\"line\">    syncProcessor = <span class=\"keyword\">new</span> SyncRequestProcessor(zks, ackProcessor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是LearnerSyncRequest，调用leader的processSync方法，应该跟follow同步有关</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request <span class=\"keyword\">instanceof</span> LearnerSyncRequest)&#123;</span><br><span class=\"line\">        zks.getLeader().processSync((LearnerSyncRequest)request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//交给下一个处理器处理，如果是事务操作的话（也就是写操作，个人理解），调用leader.propose和syncProcessor</span></span><br><span class=\"line\">        nextProcessor.processRequest(request);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We need to sync and get consensus on any transactions</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                zks.getLeader().propose(request);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XidRolloverException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RequestProcessorException(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果是事物消息的话，调用syncProcessor</span></span><br><span class=\"line\">            syncProcessor.processRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ProposalRequestProcessor</code>的功能总结：</p>\n<ol>\n<li>如果是sync请求，调用leader.processSync。</li>\n<li>非sync请求，调用</li>\n</ol>\n<p>所以请求的调用链可以调整为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;</span><br><span class=\"line\">                                          CommitProcessor-&gt;ToBeAppliedRequestProcessor-&gt;FinalRequestProcessor</span><br><span class=\"line\">                                          SyncRequestProcessor-&gt;AckRequestProcessor</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-CommitProcessor\"><a href=\"#3-CommitProcessor\" class=\"headerlink\" title=\"3. CommitProcessor\"></a>3. CommitProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Requests that we are holding until the commit comes in.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> LinkedBlockingQueue&lt;Request&gt; queuedRequests =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Requests that have been committed.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> LinkedBlockingQueue&lt;Request&gt; committedRequests =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"comment\">/** Request for which we are currently awaiting a commit */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> AtomicReference&lt;Request&gt; nextPending =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> AtomicReference&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"comment\">/** Request currently being committed (ie, sent off to next processor) */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicReference&lt;Request&gt; currentlyCommitting =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> AtomicReference&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Processing request:: \"</span> + request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//把request放入queuedRequests，等待处理</span></span><br><span class=\"line\">    queuedRequests.add(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isWaitingForCommit()) &#123;</span><br><span class=\"line\">        wakeup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isWaitingForCommit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextPending.get() != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isProcessingCommit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentlyCommitting.get() != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Request request;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stopped) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果queuedRequests和committedRequests都是空 &amp;&amp; 有正在处理的请求，一直等待</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (</span><br><span class=\"line\">                    !stopped &amp;&amp;</span><br><span class=\"line\">                    ((queuedRequests.isEmpty() || isWaitingForCommit() || isProcessingCommit()) &amp;&amp;</span><br><span class=\"line\">                     (committedRequests.isEmpty() || isProcessingRequest()))) &#123;</span><br><span class=\"line\">                    wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Processing queuedRequests: Process the next requests until we</span></span><br><span class=\"line\"><span class=\"comment\">             * find one for which we need to wait for a commit. We cannot</span></span><br><span class=\"line\"><span class=\"comment\">             * process a read request while we are processing write request.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">             <span class=\"comment\">//nextPending和currentlyCommitting没数据，且queuedRequests有数据。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopped &amp;&amp; !isWaitingForCommit() &amp;&amp;</span><br><span class=\"line\">                   !isProcessingCommit() &amp;&amp;</span><br><span class=\"line\">                   (request = queuedRequests.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是写请求，写入nextPending，WaitingForCommit</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needCommit(request)) &#123;</span><br><span class=\"line\">                    nextPending.set(request);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//交给下面处理器处理</span></span><br><span class=\"line\">                    sendToNextProcessor(request);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Processing committedRequests: check and see if the commit</span></span><br><span class=\"line\"><span class=\"comment\">             * came in for the pending request. We can only commit a</span></span><br><span class=\"line\"><span class=\"comment\">             * request when there is no other request being processed.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            processCommitted();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"CommitProcessor exited loop!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//commit方法，由leader调用，将commit请求放入队列committedRequests</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stopped || request == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Committing request:: \"</span> + request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    committedRequests.add(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isProcessingCommit()) &#123;</span><br><span class=\"line\">        wakeup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processCommitted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Request request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!stopped &amp;&amp; !isProcessingRequest() &amp;&amp;</span><br><span class=\"line\">            (committedRequests.peek() != <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * ZOOKEEPER-1863: continue only if there is no new request</span></span><br><span class=\"line\"><span class=\"comment\">         * waiting in queuedRequests or it is waiting for a</span></span><br><span class=\"line\"><span class=\"comment\">         * commit. </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !isWaitingForCommit() &amp;&amp; !queuedRequests.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//从committedRequests中取出请求</span></span><br><span class=\"line\">        request = committedRequests.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * We match with nextPending so that we can move to the</span></span><br><span class=\"line\"><span class=\"comment\">         * next request when it is committed. We also want to</span></span><br><span class=\"line\"><span class=\"comment\">         * use nextPending because it has the cnxn member set</span></span><br><span class=\"line\"><span class=\"comment\">         * properly.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"comment\">//commitRequest和pendingRequest进行比对。但是最后都是交给下面的处理，好像并没有什么区别。</span></span><br><span class=\"line\">        Request pending = nextPending.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pending != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">            pending.sessionId == request.sessionId &amp;&amp;</span><br><span class=\"line\">            pending.cxid == request.cxid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we want to send our version of the request.</span></span><br><span class=\"line\">            <span class=\"comment\">// the pointer to the connection in the request</span></span><br><span class=\"line\">            pending.setHdr(request.getHdr());</span><br><span class=\"line\">            pending.setTxn(request.getTxn());</span><br><span class=\"line\">            pending.zxid = request.zxid;</span><br><span class=\"line\">            <span class=\"comment\">// Set currentlyCommitting so we will block until this</span></span><br><span class=\"line\">            <span class=\"comment\">// completes. Cleared by CommitWorkRequest after</span></span><br><span class=\"line\">            <span class=\"comment\">// nextProcessor returns.</span></span><br><span class=\"line\">            currentlyCommitting.set(pending);</span><br><span class=\"line\">            nextPending.set(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            sendToNextProcessor(pending);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// this request came from someone else so just</span></span><br><span class=\"line\">            <span class=\"comment\">// send the commit packet</span></span><br><span class=\"line\">            currentlyCommitting.set(request);</span><br><span class=\"line\">            sendToNextProcessor(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ToBeAppliedRequestProcessor\"><a href=\"#4-ToBeAppliedRequestProcessor\" class=\"headerlink\" title=\"4 ToBeAppliedRequestProcessor\"></a>4 ToBeAppliedRequestProcessor</h2><p><code>ToBeAppliedRequestProcessor</code>是<code>Leader</code>的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToBeAppliedRequestProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RequestProcessor next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Leader leader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This request processor simply maintains the toBeApplied list. For</span></span><br><span class=\"line\"><span class=\"comment\">     * this to work next must be a FinalRequestProcessor and</span></span><br><span class=\"line\"><span class=\"comment\">     * FinalRequestProcessor.processRequest MUST process the request</span></span><br><span class=\"line\"><span class=\"comment\">     * synchronously!</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> next</span></span><br><span class=\"line\"><span class=\"comment\">     *                a reference to the FinalRequestProcessor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ToBeAppliedRequestProcessor(RequestProcessor next, Leader leader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(next <span class=\"keyword\">instanceof</span> FinalRequestProcessor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(ToBeAppliedRequestProcessor<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                    .<span class=\"title\">getName</span>()</span></span><br><span class=\"line\">                    + \" must be connected to \"</span><br><span class=\"line\">                    + FinalRequestProcessor<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()</span></span><br><span class=\"line\">                    + \" not \"</span><br><span class=\"line\">                    + next.getClass().getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leader = leader;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * (non-Javadoc)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @see org.apache.zookeeper.server.RequestProcessor#processRequest(org.apache.zookeeper.server.Request)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">        next.processRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The only requests that should be on toBeApplied are write</span></span><br><span class=\"line\">        <span class=\"comment\">// requests, for which we will have a hdr. We can't simply use</span></span><br><span class=\"line\">        <span class=\"comment\">// request.zxid here because that is set on read requests to equal</span></span><br><span class=\"line\">        <span class=\"comment\">// the zxid of the last write op.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> zxid = request.getHdr().getZxid();</span><br><span class=\"line\">            Iterator&lt;Proposal&gt; iter = leader.toBeApplied.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (iter.hasNext()) &#123;</span><br><span class=\"line\">                Proposal p = iter.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p.request != <span class=\"keyword\">null</span> &amp;&amp; p.request.zxid == zxid) &#123;</span><br><span class=\"line\">                    iter.remove();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"Committed request not found on toBeApplied: \"</span></span><br><span class=\"line\">                      + request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * (non-Javadoc)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @see org.apache.zookeeper.server.RequestProcessor#shutdown()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"Shutting down\"</span>);</span><br><span class=\"line\">        next.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ToBeAppliedRequestProcessor</code>的作用就是用下个处理器处理，然后把<code>request</code>从<code>toBeApplied</code>队列里删掉。</p>\n<h2 id=\"5-AckRequestProcessor\"><a href=\"#5-AckRequestProcessor\" class=\"headerlink\" title=\"5.AckRequestProcessor\"></a>5.AckRequestProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AckRequestProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory.getLogger(AckRequestProcessor<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    Leader leader;</span><br><span class=\"line\"></span><br><span class=\"line\">    AckRequestProcessor(Leader leader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leader = leader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Forward the request as an ACK to the leader</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        QuorumPeer self = leader.self;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            leader.processAck(self.getId(), request.zxid, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"Null QuorumPeer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// XXX No need to do anything</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AckRequestProcessor</code>的作用就是调<code>leader.processAck</code>来处理请求。</p>\n<h2 id=\"6-leader\"><a href=\"#6-leader\" class=\"headerlink\" title=\"6.leader\"></a>6.leader</h2><p><code>leader</code>代码有点多，主要看下跟投票相关的核心代码吧。<br>先从<code>LearnerHandler</code>开始，<code>leader</code>启动时会对每个<code>Quorum</code>节点建立socket连接，<code>LearnerHandler</code>就是用来处理这个连接的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (qp.getType()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.ACK:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.learnerType == LearnerType.OBSERVER) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">                            LOG.debug(<span class=\"string\">\"Received ACK from Observer  \"</span> + <span class=\"keyword\">this</span>.sid);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    syncLimitCheck.updateAck(qp.getZxid());</span><br><span class=\"line\">                    leader.processAck(<span class=\"keyword\">this</span>.sid, qp.getZxid(), sock.getLocalSocketAddress());</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.PING:</span><br><span class=\"line\">                    <span class=\"comment\">// Process the touches</span></span><br><span class=\"line\">                    ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(qp</span><br><span class=\"line\">                            .getData());</span><br><span class=\"line\">                    DataInputStream dis = <span class=\"keyword\">new</span> DataInputStream(bis);</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (dis.available() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">long</span> sess = dis.readLong();</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> to = dis.readInt();</span><br><span class=\"line\">                        leader.zk.touch(sess, to);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.REVALIDATE:</span><br><span class=\"line\">                    bis = <span class=\"keyword\">new</span> ByteArrayInputStream(qp.getData());</span><br><span class=\"line\">                    dis = <span class=\"keyword\">new</span> DataInputStream(bis);</span><br><span class=\"line\">                    <span class=\"keyword\">long</span> id = dis.readLong();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> to = dis.readInt();</span><br><span class=\"line\">                    ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                    DataOutputStream dos = <span class=\"keyword\">new</span> DataOutputStream(bos);</span><br><span class=\"line\">                    dos.writeLong(id);</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> valid = leader.zk.checkIfValidGlobalSession(id, to);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//set the session owner</span></span><br><span class=\"line\">                            <span class=\"comment\">// as the follower that</span></span><br><span class=\"line\">                            <span class=\"comment\">// owns the session</span></span><br><span class=\"line\">                            leader.zk.setOwner(id, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SessionExpiredException e) &#123;</span><br><span class=\"line\">                            LOG.error(<span class=\"string\">\"Somehow session \"</span> + Long.toHexString(id) +</span><br><span class=\"line\">                                    <span class=\"string\">\" expired right after being renewed! (impossible)\"</span>, e);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">                        ZooTrace.logTraceMessage(LOG,</span><br><span class=\"line\">                                                 ZooTrace.SESSION_TRACE_MASK,</span><br><span class=\"line\">                                                 <span class=\"string\">\"Session 0x\"</span> + Long.toHexString(id)</span><br><span class=\"line\">                                                 + <span class=\"string\">\" is valid: \"</span>+ valid);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dos.writeBoolean(valid);</span><br><span class=\"line\">                    qp.setData(bos.toByteArray());</span><br><span class=\"line\">                    queuedPackets.add(qp);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.REQUEST:</span><br><span class=\"line\">                    bb = ByteBuffer.wrap(qp.getData());</span><br><span class=\"line\">                    sessionId = bb.getLong();</span><br><span class=\"line\">                    cxid = bb.getInt();</span><br><span class=\"line\">                    type = bb.getInt();</span><br><span class=\"line\">                    bb = bb.slice();</span><br><span class=\"line\">                    Request si;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(type == OpCode.sync)&#123;</span><br><span class=\"line\">                        si = <span class=\"keyword\">new</span> LearnerSyncRequest(<span class=\"keyword\">this</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        si = <span class=\"keyword\">new</span> Request(<span class=\"keyword\">null</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    si.setOwner(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                    leader.zk.submitLearnerRequest(si);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"unexpected quorum packet, type: &#123;&#125;\"</span>, packetToString(qp));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到分别对请求类型做了不同的处理：</p>\n<ul>\n<li>Leader.ACK -&gt; <code>leader.processAck</code></li>\n<li>Leader.PING -&gt; <code>leader.zk.touch</code></li>\n<li>Leader.REVALIDATE -&gt; <code>leader.zk.checkIfValidGlobalSession</code>和<code>leader.zk.setOwner</code></li>\n<li>Leader.REQUEST -&gt; <code>leader.zk.submitLearnerRequest</code></li>\n</ul>\n<p><code>Leader.ACK</code>应该是follower对请求的反馈。<br><code>Leader.REQUEST</code>应该是follower转发的请求，而<code>leader.zk.submitLearnerRequest</code>内部实现其实是调用链。上面分析得知<code>ProposalRequestProcessor</code>在处理Proposal时会调用<code>leader.propose</code>方法，所以我们重点关注两个方法:</p>\n<ul>\n<li><code>leader.propose</code>处理proposal</li>\n<li><code>leader.processAck</code>处理proposal ack</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Proposal <span class=\"title\">propose</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> XidRolloverException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Address the rollover issue. All lower 32bits set indicate a new leader</span></span><br><span class=\"line\"><span class=\"comment\">     * election. Force a re-election instead. See ZOOKEEPER-1277</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"comment\">//ZXID的后32位如果是0xffffffff，关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((request.zxid &amp; <span class=\"number\">0xffffffffL</span>) == <span class=\"number\">0xffffffffL</span>) &#123;</span><br><span class=\"line\">        String msg =</span><br><span class=\"line\">                <span class=\"string\">\"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start\"</span>;</span><br><span class=\"line\">        shutdown(msg);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XidRolloverException(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] data = SerializeUtils.serializeRequest(request);</span><br><span class=\"line\">    proposalStats.setLastBufferSize(data.length);</span><br><span class=\"line\">    <span class=\"comment\">//构建QuorumPacket和Proposal</span></span><br><span class=\"line\">    QuorumPacket pp = <span class=\"keyword\">new</span> QuorumPacket(Leader.PROPOSAL, request.zxid, data, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Proposal p = <span class=\"keyword\">new</span> Proposal();</span><br><span class=\"line\">    p.packet = pp;</span><br><span class=\"line\">    p.request = request;                </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">       p.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class=\"line\">               </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class=\"line\">           self.setLastSeenQuorumVerifier(request.qv, <span class=\"keyword\">true</span>);                       </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (self.getQuorumVerifier().getVersion()&lt;self.getLastSeenQuorumVerifier().getVersion()) &#123;</span><br><span class=\"line\">           p.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Proposing:: \"</span> + request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lastProposed = p.packet.getZxid();</span><br><span class=\"line\">        <span class=\"comment\">//写入outstandingProposals队列然后发送</span></span><br><span class=\"line\">        outstandingProposals.put(lastProposed, p);</span><br><span class=\"line\">        sendPacket(pp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendPacket</span><span class=\"params\">(QuorumPacket qp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//往所有的follower发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (forwardingFollowers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LearnerHandler f : forwardingFollowers) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//LearnerHandler其实也是将数据放入队列中。</span></span><br><span class=\"line\">            f.queuePacket(qp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>propose</code>方法很简单，构建<code>QuorumPacket</code>，放入HashMap <code>outstandingProposals</code>，然后广播。后面看ack。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Keep a count of acks that are received by the leader for a particular</span></span><br><span class=\"line\"><span class=\"comment\"> * proposal</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> zxid, the zxid of the proposal sent out</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> sid, the id of the server that sent the ack</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> followerAddr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processAck</span><span class=\"params\">(<span class=\"keyword\">long</span> sid, <span class=\"keyword\">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123;        </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!allowedToCommit) <span class=\"keyword\">return</span>; <span class=\"comment\">// last op committed was a leader change - from now on </span></span><br><span class=\"line\">                                 <span class=\"comment\">// the new leader should commit        </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">        LOG.trace(<span class=\"string\">\"Ack zxid: 0x&#123;&#125;\"</span>, Long.toHexString(zxid));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Proposal p : outstandingProposals.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> packetZxid = p.packet.getZxid();</span><br><span class=\"line\">            LOG.trace(<span class=\"string\">\"outstanding proposal: 0x&#123;&#125;\"</span>,</span><br><span class=\"line\">                    Long.toHexString(packetZxid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LOG.trace(<span class=\"string\">\"outstanding proposals all\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((zxid &amp; <span class=\"number\">0xffffffffL</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * We no longer process NEWLEADER ack with this method. However,</span></span><br><span class=\"line\"><span class=\"comment\">         * the learner sends an ack back to the leader after it gets</span></span><br><span class=\"line\"><span class=\"comment\">         * UPTODATE, so we just ignore the message.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//如果没有在外的proposal，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outstandingProposals.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"outstanding is 0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果请求的zxid小于最后一次提交的zxid，表示这个proposal已经提交过了，忽略这个请求。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastCommitted &gt;= zxid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"proposal has already been committed, pzxid: 0x&#123;&#125; zxid: 0x&#123;&#125;\"</span>,</span><br><span class=\"line\">                    Long.toHexString(lastCommitted), Long.toHexString(zxid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// The proposal has already been committed</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从outstandingProposals获取具体的proposal对象</span></span><br><span class=\"line\">    Proposal p = outstandingProposals.get(zxid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Trying to commit future proposal: zxid 0x&#123;&#125; from &#123;&#125;\"</span>,</span><br><span class=\"line\">                Long.toHexString(zxid), followerAddr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//记录ack</span></span><br><span class=\"line\">    p.addAck(sid);        </span><br><span class=\"line\">    <span class=\"comment\">/*if (LOG.isDebugEnabled()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        LOG.debug(\"Count for zxid: 0x&#123;&#125; is &#123;&#125;\",</span></span><br><span class=\"line\"><span class=\"comment\">                Long.toHexString(zxid), p.ackSet.size());</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"comment\">//尝试提交</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasCommitted = tryToCommit(p, zxid, followerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If p is a reconfiguration, multiple other operations may be ready to be committed,</span></span><br><span class=\"line\">    <span class=\"comment\">// since operations wait for different sets of acks.</span></span><br><span class=\"line\">   <span class=\"comment\">// Currently we only permit one outstanding reconfiguration at a time</span></span><br><span class=\"line\">   <span class=\"comment\">// such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is</span></span><br><span class=\"line\">   <span class=\"comment\">// pending all wait for a quorum of old and new config, so its not possible to get enough acks</span></span><br><span class=\"line\">   <span class=\"comment\">// for an operation without getting enough acks for preceding ops. But in the future if multiple</span></span><br><span class=\"line\">   <span class=\"comment\">// concurrent reconfigs are allowed, this can happen and then we need to check whether some pending</span></span><br><span class=\"line\">    <span class=\"comment\">// ops may already have enough acks and can be committed, which is what this code does.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasCommitted &amp;&amp; p.request!=<span class=\"keyword\">null</span> &amp;&amp; p.request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">long</span> curZxid = zxid;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (allowedToCommit &amp;&amp; hasCommitted &amp;&amp; p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           curZxid++;</span><br><span class=\"line\">           p = outstandingProposals.get(curZxid);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (p !=<span class=\"keyword\">null</span>) hasCommitted = tryToCommit(p, curZxid, <span class=\"keyword\">null</span>);             </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>processAck</code> 先是对zxid进行校验，然后记录，最后调用<code>tryToCommit</code>尝试提交。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryToCommit</span><span class=\"params\">(Proposal p, <span class=\"keyword\">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123;       </span><br><span class=\"line\">   <span class=\"comment\">// make sure that ops are committed in order. With reconfigurations it is now possible</span></span><br><span class=\"line\">   <span class=\"comment\">// that different operations wait for different sets of acks, and we still want to enforce</span></span><br><span class=\"line\">   <span class=\"comment\">// that they are committed in order. Currently we only permit one outstanding reconfiguration</span></span><br><span class=\"line\">   <span class=\"comment\">// such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is</span></span><br><span class=\"line\">   <span class=\"comment\">// pending all wait for a quorum of old and new config, so it's not possible to get enough acks</span></span><br><span class=\"line\">   <span class=\"comment\">// for an operation without getting enough acks for preceding ops. But in the future if multiple</span></span><br><span class=\"line\">   <span class=\"comment\">// concurrent reconfigs are allowed, this can happen.</span></span><br><span class=\"line\">   <span class=\"comment\">//保证顺序</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (outstandingProposals.containsKey(zxid - <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// in order to be committed, a proposal must be accepted by a quorum.</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">// getting a quorum from all necessary configurations.</span></span><br><span class=\"line\">   <span class=\"comment\">//过半提交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p.hasAllQuorums()) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;                 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// commit proposals in order</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (zxid != lastCommitted+<span class=\"number\">1</span>) &#123;    </span><br><span class=\"line\">       LOG.warn(<span class=\"string\">\"Commiting zxid 0x\"</span> + Long.toHexString(zxid)</span><br><span class=\"line\">                + <span class=\"string\">\" from \"</span> + followerAddr + <span class=\"string\">\" not first!\"</span>);</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"First is \"</span></span><br><span class=\"line\">                + (lastCommitted+<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"comment\">//从outstandingProposals中移除</span></span><br><span class=\"line\">    outstandingProposals.remove(zxid);</span><br><span class=\"line\">    <span class=\"comment\">//toBeApplied队列加入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.request != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         toBeApplied.add(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.request == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Going to commmit null: \"</span> + p);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p.request.getHdr().getType() == OpCode.reconfig) &#123;                                   </span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Committing a reconfiguration! \"</span> + outstandingProposals.size()); </span><br><span class=\"line\">             </span><br><span class=\"line\">        <span class=\"comment\">//if this server is voter in new config with the same quorum address, </span></span><br><span class=\"line\">        <span class=\"comment\">//then it will remain the leader</span></span><br><span class=\"line\">        <span class=\"comment\">//otherwise an up-to-date follower will be designated as leader. This saves</span></span><br><span class=\"line\">        <span class=\"comment\">//leader election time, unless the designated leader fails                             </span></span><br><span class=\"line\">        Long designatedLeader = getDesignatedLeader(p, zxid);</span><br><span class=\"line\">        <span class=\"comment\">//LOG.warn(\"designated leader is: \" + designatedLeader);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size()-<span class=\"number\">1</span>).getQuorumVerifier();</span><br><span class=\"line\">   </span><br><span class=\"line\">        self.processReconfig(newQV, designatedLeader, zk.getZxid(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (designatedLeader != self.getId()) &#123;</span><br><span class=\"line\">            allowedToCommit = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">        <span class=\"comment\">// we're sending the designated leader, and if the leader is changing the followers are </span></span><br><span class=\"line\">        <span class=\"comment\">// responsible for closing the connection - this way we are sure that at least a majority of them </span></span><br><span class=\"line\">        <span class=\"comment\">// receive the commit message.</span></span><br><span class=\"line\">        commitAndActivate(zxid, designatedLeader);</span><br><span class=\"line\">        informAndActivate(p, designatedLeader);</span><br><span class=\"line\">        <span class=\"comment\">//turnOffFollowers();</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//向所有follower发送commit请求。</span></span><br><span class=\"line\">        commit(zxid);</span><br><span class=\"line\">        <span class=\"comment\">//向所有Observer广播</span></span><br><span class=\"line\">        inform(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//commitProcessor处理commit请求。</span></span><br><span class=\"line\">    zk.commitProcessor.commit(p.request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendingSyncs.containsKey(zxid))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(LearnerSyncRequest r: pendingSyncs.remove(zxid)) &#123;</span><br><span class=\"line\">            sendSync(r);</span><br><span class=\"line\">        &#125;               </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">true</span>;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(<span class=\"keyword\">long</span> zxid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        lastCommitted = zxid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    QuorumPacket qp = <span class=\"keyword\">new</span> QuorumPacket(Leader.COMMIT, zxid, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    sendPacket(qp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inform</span><span class=\"params\">(Proposal proposal)</span> </span>&#123;</span><br><span class=\"line\">    QuorumPacket qp = <span class=\"keyword\">new</span> QuorumPacket(Leader.INFORM, proposal.request.zxid,</span><br><span class=\"line\">                                        proposal.packet.getData(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    sendObserverPacket(qp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-leader-propose流程总结\"><a href=\"#7-leader-propose流程总结\" class=\"headerlink\" title=\"7. leader propose流程总结\"></a>7. leader propose流程总结</h2><ul>\n<li><ol>\n<li>请求处理入口有2个，一个是<code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest</code>，另外一个是<code>LearnerHandler</code>的follower转发请求，都是调用处理链来处理。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>处理链总结为:PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;<pre><code>CommitProcessor-&gt;ToBeAppliedRequestProcessor-&gt;FinalRequestProcessor\nSyncRequestProcessor-&gt;AckRequestProcessor</code></pre></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>ProposalRequestProcessor调用leader的propose方法广播proposal，同时调用2个处理链。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>处理链<code>SyncRequestProcessor-&gt;AckRequestProcessor</code>可以理解为本地的proposal处理，SyncRequestProcessor将proposal存入磁盘，AckRequestProcessor会调用leader.processAck来返回ack。</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>处理链<code>CommitProcessor-&gt;ToBeAppliedRequestProcessor-&gt;FinalRequestProcessor</code>，CommitProcessor会阻塞住一个请求，直到被调用commit方法，然后交由FinalRequestProcessor修改内存数据。</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>leader和follower处理完后，会调用<code>org.apache.zookeeper.server.quorum.Leader#processAck</code>，leader判断获得半数以上的反馈后，会调用CommitProcessor的commit方法，跳转到5。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"8-FollowerZooKeeperServer\"><a href=\"#8-FollowerZooKeeperServer\" class=\"headerlink\" title=\"8. FollowerZooKeeperServer\"></a>8. FollowerZooKeeperServer</h2><p>理解了LeaderZooKeeperServer之后再来看FollowerZooKeeperServer，发现其实很好理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setupRequestProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RequestProcessor finalProcessor = <span class=\"keyword\">new</span> FinalRequestProcessor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    commitProcessor = <span class=\"keyword\">new</span> CommitProcessor(finalProcessor,</span><br><span class=\"line\">            Long.toString(getServerId()), <span class=\"keyword\">true</span>, getZooKeeperServerListener());</span><br><span class=\"line\">    commitProcessor.start();</span><br><span class=\"line\">    firstProcessor = <span class=\"keyword\">new</span> FollowerRequestProcessor(<span class=\"keyword\">this</span>, commitProcessor);</span><br><span class=\"line\">    ((FollowerRequestProcessor) firstProcessor).start();</span><br><span class=\"line\">    syncProcessor = <span class=\"keyword\">new</span> SyncRequestProcessor(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> SendAckRequestProcessor((Learner)getFollower()));</span><br><span class=\"line\">    syncProcessor.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkedBlockingQueue&lt;Request&gt; pendingTxns = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理proposal</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logRequest</span><span class=\"params\">(TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((request.zxid &amp; <span class=\"number\">0xffffffffL</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pendingTxns.add(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    syncProcessor.processRequest(request);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * When a COMMIT message is received, eventually this method is called,</span></span><br><span class=\"line\"><span class=\"comment\"> * which matches up the zxid from the COMMIT with (hopefully) the head of</span></span><br><span class=\"line\"><span class=\"comment\"> * the pendingTxns queue and hands it to the commitProcessor to commit.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> zxid - must correspond to the head of pendingTxns if it exists</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//处理commit请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(<span class=\"keyword\">long</span> zxid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingTxns.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Committing \"</span> + Long.toHexString(zxid)</span><br><span class=\"line\">                + <span class=\"string\">\" without seeing txn\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> firstElementZxid = pendingTxns.element().zxid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstElementZxid != zxid) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Committing zxid 0x\"</span> + Long.toHexString(zxid)</span><br><span class=\"line\">                + <span class=\"string\">\" but next pending txn 0x\"</span></span><br><span class=\"line\">                + Long.toHexString(firstElementZxid));</span><br><span class=\"line\">        System.exit(<span class=\"number\">12</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Request request = pendingTxns.remove();</span><br><span class=\"line\">    commitProcessor.commit(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>两个处理链：</p>\n<ul>\n<li>1.FollowerRequestProcessor-&gt;CommitProcessor-&gt;FinalRequestProcessor</li>\n<li>2.SyncRequestProcessor-&gt;SendAckRequestProcessor</li>\n</ul>\n<p>proposal请求时，调用处理链<code>SyncRequestProcessor-&gt;SendAckRequestProcessor</code>，写入磁盘并返回ack。<br>commit时，调用处理链<code>CommitProcessor-&gt;FinalRequestProcessor</code>，写入内存。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"LeaderZooKeeperServer\"><a href=\"#LeaderZooKeeperServer\" class=\"headerlink\" title=\"LeaderZooKeeperServer\"></a>LeaderZooKeeperServer</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommitProcessor commitProcessor;</span><br><span class=\"line\">PrepRequestProcessor prepRequestProcessor;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setupRequestProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RequestProcessor finalProcessor = <span class=\"keyword\">new</span> FinalRequestProcessor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    RequestProcessor toBeAppliedProcessor = <span class=\"keyword\">new</span> Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());</span><br><span class=\"line\">    commitProcessor = <span class=\"keyword\">new</span> CommitProcessor(toBeAppliedProcessor,</span><br><span class=\"line\">            Long.toString(getServerId()), <span class=\"keyword\">false</span>,</span><br><span class=\"line\">            getZooKeeperServerListener());</span><br><span class=\"line\">    commitProcessor.start();</span><br><span class=\"line\">    ProposalRequestProcessor proposalProcessor = <span class=\"keyword\">new</span> ProposalRequestProcessor(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">            commitProcessor);</span><br><span class=\"line\">    proposalProcessor.initialize();</span><br><span class=\"line\">    prepRequestProcessor = <span class=\"keyword\">new</span> PrepRequestProcessor(<span class=\"keyword\">this</span>, proposalProcessor);</span><br><span class=\"line\">    prepRequestProcessor.start();</span><br><span class=\"line\">    firstProcessor = <span class=\"keyword\">new</span> LeaderRequestProcessor(<span class=\"keyword\">this</span>, prepRequestProcessor);</span><br><span class=\"line\"></span><br><span class=\"line\">    setupContainerManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到有3个处理链:</p>\n<ol>\n<li><code>firstProcessor</code>处理链<code>LeaderRequestProcessor-&gt;PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;CommitProcessor-&gt;Leader.ToBeAppliedRequestProcessor -&gt;FinalRequestProcessor</code></li>\n<li><code>CommitProcessor-&gt;Leader.ToBeAppliedRequestProcessor -&gt;FinalRequestProcessor</code></li>\n<li><code>PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;CommitProcessor-&gt;Leader.ToBeAppliedRequestProcessor -&gt;FinalRequestProcessor</code></li>\n</ol>\n<p>当外部请求来时，使用的是<code>firstProcessor</code>。</p>\n<h2 id=\"1-LeaderRequestProcessor\"><a href=\"#1-LeaderRequestProcessor\" class=\"headerlink\" title=\"1 LeaderRequestProcessor\"></a>1 LeaderRequestProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check if this is a local session and we are trying to create</span></span><br><span class=\"line\">    <span class=\"comment\">// an ephemeral node, in which case we upgrade the session</span></span><br><span class=\"line\">    Request upgradeRequest = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        upgradeRequest = lzks.checkUpgradeSession(request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (KeeperException ke) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Updating header\"</span>);</span><br><span class=\"line\">            request.getHdr().setType(OpCode.error);</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> ErrorTxn(ke.code().intValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.setException(ke);</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"Error creating upgrade request \"</span> + ke.getMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException ie) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unexpected error in upgrade\"</span>, ie);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (upgradeRequest != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        nextProcessor.processRequest(upgradeRequest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nextProcessor.processRequest(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看英文注释，<code>LeaderRequestProcessor</code>只是更新了下session，然后交给下个来处理。</p>\n<p><code>PrepRequestProcessor</code>之前分析过，这里不写了。</p>\n<h2 id=\"2-ProposalRequestProcessor\"><a href=\"#2-ProposalRequestProcessor\" class=\"headerlink\" title=\"2 ProposalRequestProcessor\"></a>2 ProposalRequestProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProposalRequestProcessor</span><span class=\"params\">(LeaderZooKeeperServer zks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        RequestProcessor nextProcessor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.zks = zks;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nextProcessor = nextProcessor;</span><br><span class=\"line\">    AckRequestProcessor ackProcessor = <span class=\"keyword\">new</span> AckRequestProcessor(zks.getLeader());</span><br><span class=\"line\">    syncProcessor = <span class=\"keyword\">new</span> SyncRequestProcessor(zks, ackProcessor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是LearnerSyncRequest，调用leader的processSync方法，应该跟follow同步有关</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request <span class=\"keyword\">instanceof</span> LearnerSyncRequest)&#123;</span><br><span class=\"line\">        zks.getLeader().processSync((LearnerSyncRequest)request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//交给下一个处理器处理，如果是事务操作的话（也就是写操作，个人理解），调用leader.propose和syncProcessor</span></span><br><span class=\"line\">        nextProcessor.processRequest(request);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We need to sync and get consensus on any transactions</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                zks.getLeader().propose(request);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (XidRolloverException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RequestProcessorException(e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果是事物消息的话，调用syncProcessor</span></span><br><span class=\"line\">            syncProcessor.processRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ProposalRequestProcessor</code>的功能总结：</p>\n<ol>\n<li>如果是sync请求，调用leader.processSync。</li>\n<li>非sync请求，调用</li>\n</ol>\n<p>所以请求的调用链可以调整为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;</span><br><span class=\"line\">                                          CommitProcessor-&gt;ToBeAppliedRequestProcessor-&gt;FinalRequestProcessor</span><br><span class=\"line\">                                          SyncRequestProcessor-&gt;AckRequestProcessor</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-CommitProcessor\"><a href=\"#3-CommitProcessor\" class=\"headerlink\" title=\"3. CommitProcessor\"></a>3. CommitProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Requests that we are holding until the commit comes in.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> LinkedBlockingQueue&lt;Request&gt; queuedRequests =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Requests that have been committed.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> LinkedBlockingQueue&lt;Request&gt; committedRequests =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"comment\">/** Request for which we are currently awaiting a commit */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> AtomicReference&lt;Request&gt; nextPending =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> AtomicReference&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"comment\">/** Request currently being committed (ie, sent off to next processor) */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicReference&lt;Request&gt; currentlyCommitting =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> AtomicReference&lt;Request&gt;();</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Processing request:: \"</span> + request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//把request放入queuedRequests，等待处理</span></span><br><span class=\"line\">    queuedRequests.add(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isWaitingForCommit()) &#123;</span><br><span class=\"line\">        wakeup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isWaitingForCommit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextPending.get() != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isProcessingCommit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentlyCommitting.get() != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Request request;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stopped) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果queuedRequests和committedRequests都是空 &amp;&amp; 有正在处理的请求，一直等待</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (</span><br><span class=\"line\">                    !stopped &amp;&amp;</span><br><span class=\"line\">                    ((queuedRequests.isEmpty() || isWaitingForCommit() || isProcessingCommit()) &amp;&amp;</span><br><span class=\"line\">                     (committedRequests.isEmpty() || isProcessingRequest()))) &#123;</span><br><span class=\"line\">                    wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Processing queuedRequests: Process the next requests until we</span></span><br><span class=\"line\"><span class=\"comment\">             * find one for which we need to wait for a commit. We cannot</span></span><br><span class=\"line\"><span class=\"comment\">             * process a read request while we are processing write request.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">             <span class=\"comment\">//nextPending和currentlyCommitting没数据，且queuedRequests有数据。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopped &amp;&amp; !isWaitingForCommit() &amp;&amp;</span><br><span class=\"line\">                   !isProcessingCommit() &amp;&amp;</span><br><span class=\"line\">                   (request = queuedRequests.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是写请求，写入nextPending，WaitingForCommit</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needCommit(request)) &#123;</span><br><span class=\"line\">                    nextPending.set(request);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//交给下面处理器处理</span></span><br><span class=\"line\">                    sendToNextProcessor(request);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Processing committedRequests: check and see if the commit</span></span><br><span class=\"line\"><span class=\"comment\">             * came in for the pending request. We can only commit a</span></span><br><span class=\"line\"><span class=\"comment\">             * request when there is no other request being processed.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            processCommitted();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"CommitProcessor exited loop!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//commit方法，由leader调用，将commit请求放入队列committedRequests</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stopped || request == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Committing request:: \"</span> + request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    committedRequests.add(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isProcessingCommit()) &#123;</span><br><span class=\"line\">        wakeup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processCommitted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Request request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!stopped &amp;&amp; !isProcessingRequest() &amp;&amp;</span><br><span class=\"line\">            (committedRequests.peek() != <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * ZOOKEEPER-1863: continue only if there is no new request</span></span><br><span class=\"line\"><span class=\"comment\">         * waiting in queuedRequests or it is waiting for a</span></span><br><span class=\"line\"><span class=\"comment\">         * commit. </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !isWaitingForCommit() &amp;&amp; !queuedRequests.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//从committedRequests中取出请求</span></span><br><span class=\"line\">        request = committedRequests.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * We match with nextPending so that we can move to the</span></span><br><span class=\"line\"><span class=\"comment\">         * next request when it is committed. We also want to</span></span><br><span class=\"line\"><span class=\"comment\">         * use nextPending because it has the cnxn member set</span></span><br><span class=\"line\"><span class=\"comment\">         * properly.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"comment\">//commitRequest和pendingRequest进行比对。但是最后都是交给下面的处理，好像并没有什么区别。</span></span><br><span class=\"line\">        Request pending = nextPending.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pending != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">            pending.sessionId == request.sessionId &amp;&amp;</span><br><span class=\"line\">            pending.cxid == request.cxid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we want to send our version of the request.</span></span><br><span class=\"line\">            <span class=\"comment\">// the pointer to the connection in the request</span></span><br><span class=\"line\">            pending.setHdr(request.getHdr());</span><br><span class=\"line\">            pending.setTxn(request.getTxn());</span><br><span class=\"line\">            pending.zxid = request.zxid;</span><br><span class=\"line\">            <span class=\"comment\">// Set currentlyCommitting so we will block until this</span></span><br><span class=\"line\">            <span class=\"comment\">// completes. Cleared by CommitWorkRequest after</span></span><br><span class=\"line\">            <span class=\"comment\">// nextProcessor returns.</span></span><br><span class=\"line\">            currentlyCommitting.set(pending);</span><br><span class=\"line\">            nextPending.set(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            sendToNextProcessor(pending);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// this request came from someone else so just</span></span><br><span class=\"line\">            <span class=\"comment\">// send the commit packet</span></span><br><span class=\"line\">            currentlyCommitting.set(request);</span><br><span class=\"line\">            sendToNextProcessor(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ToBeAppliedRequestProcessor\"><a href=\"#4-ToBeAppliedRequestProcessor\" class=\"headerlink\" title=\"4 ToBeAppliedRequestProcessor\"></a>4 ToBeAppliedRequestProcessor</h2><p><code>ToBeAppliedRequestProcessor</code>是<code>Leader</code>的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToBeAppliedRequestProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RequestProcessor next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Leader leader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This request processor simply maintains the toBeApplied list. For</span></span><br><span class=\"line\"><span class=\"comment\">     * this to work next must be a FinalRequestProcessor and</span></span><br><span class=\"line\"><span class=\"comment\">     * FinalRequestProcessor.processRequest MUST process the request</span></span><br><span class=\"line\"><span class=\"comment\">     * synchronously!</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> next</span></span><br><span class=\"line\"><span class=\"comment\">     *                a reference to the FinalRequestProcessor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ToBeAppliedRequestProcessor(RequestProcessor next, Leader leader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(next <span class=\"keyword\">instanceof</span> FinalRequestProcessor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(ToBeAppliedRequestProcessor<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\">                    .<span class=\"title\">getName</span>()</span></span><br><span class=\"line\">                    + \" must be connected to \"</span><br><span class=\"line\">                    + FinalRequestProcessor<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()</span></span><br><span class=\"line\">                    + \" not \"</span><br><span class=\"line\">                    + next.getClass().getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leader = leader;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * (non-Javadoc)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @see org.apache.zookeeper.server.RequestProcessor#processRequest(org.apache.zookeeper.server.Request)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">        next.processRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The only requests that should be on toBeApplied are write</span></span><br><span class=\"line\">        <span class=\"comment\">// requests, for which we will have a hdr. We can't simply use</span></span><br><span class=\"line\">        <span class=\"comment\">// request.zxid here because that is set on read requests to equal</span></span><br><span class=\"line\">        <span class=\"comment\">// the zxid of the last write op.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> zxid = request.getHdr().getZxid();</span><br><span class=\"line\">            Iterator&lt;Proposal&gt; iter = leader.toBeApplied.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (iter.hasNext()) &#123;</span><br><span class=\"line\">                Proposal p = iter.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p.request != <span class=\"keyword\">null</span> &amp;&amp; p.request.zxid == zxid) &#123;</span><br><span class=\"line\">                    iter.remove();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"Committed request not found on toBeApplied: \"</span></span><br><span class=\"line\">                      + request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * (non-Javadoc)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @see org.apache.zookeeper.server.RequestProcessor#shutdown()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"Shutting down\"</span>);</span><br><span class=\"line\">        next.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ToBeAppliedRequestProcessor</code>的作用就是用下个处理器处理，然后把<code>request</code>从<code>toBeApplied</code>队列里删掉。</p>\n<h2 id=\"5-AckRequestProcessor\"><a href=\"#5-AckRequestProcessor\" class=\"headerlink\" title=\"5.AckRequestProcessor\"></a>5.AckRequestProcessor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AckRequestProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory.getLogger(AckRequestProcessor<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    Leader leader;</span><br><span class=\"line\"></span><br><span class=\"line\">    AckRequestProcessor(Leader leader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leader = leader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Forward the request as an ACK to the leader</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        QuorumPeer self = leader.self;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            leader.processAck(self.getId(), request.zxid, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"Null QuorumPeer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// XXX No need to do anything</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AckRequestProcessor</code>的作用就是调<code>leader.processAck</code>来处理请求。</p>\n<h2 id=\"6-leader\"><a href=\"#6-leader\" class=\"headerlink\" title=\"6.leader\"></a>6.leader</h2><p><code>leader</code>代码有点多，主要看下跟投票相关的核心代码吧。<br>先从<code>LearnerHandler</code>开始，<code>leader</code>启动时会对每个<code>Quorum</code>节点建立socket连接，<code>LearnerHandler</code>就是用来处理这个连接的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (qp.getType()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.ACK:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.learnerType == LearnerType.OBSERVER) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">                            LOG.debug(<span class=\"string\">\"Received ACK from Observer  \"</span> + <span class=\"keyword\">this</span>.sid);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    syncLimitCheck.updateAck(qp.getZxid());</span><br><span class=\"line\">                    leader.processAck(<span class=\"keyword\">this</span>.sid, qp.getZxid(), sock.getLocalSocketAddress());</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.PING:</span><br><span class=\"line\">                    <span class=\"comment\">// Process the touches</span></span><br><span class=\"line\">                    ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(qp</span><br><span class=\"line\">                            .getData());</span><br><span class=\"line\">                    DataInputStream dis = <span class=\"keyword\">new</span> DataInputStream(bis);</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (dis.available() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">long</span> sess = dis.readLong();</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> to = dis.readInt();</span><br><span class=\"line\">                        leader.zk.touch(sess, to);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.REVALIDATE:</span><br><span class=\"line\">                    bis = <span class=\"keyword\">new</span> ByteArrayInputStream(qp.getData());</span><br><span class=\"line\">                    dis = <span class=\"keyword\">new</span> DataInputStream(bis);</span><br><span class=\"line\">                    <span class=\"keyword\">long</span> id = dis.readLong();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> to = dis.readInt();</span><br><span class=\"line\">                    ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                    DataOutputStream dos = <span class=\"keyword\">new</span> DataOutputStream(bos);</span><br><span class=\"line\">                    dos.writeLong(id);</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> valid = leader.zk.checkIfValidGlobalSession(id, to);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//set the session owner</span></span><br><span class=\"line\">                            <span class=\"comment\">// as the follower that</span></span><br><span class=\"line\">                            <span class=\"comment\">// owns the session</span></span><br><span class=\"line\">                            leader.zk.setOwner(id, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SessionExpiredException e) &#123;</span><br><span class=\"line\">                            LOG.error(<span class=\"string\">\"Somehow session \"</span> + Long.toHexString(id) +</span><br><span class=\"line\">                                    <span class=\"string\">\" expired right after being renewed! (impossible)\"</span>, e);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">                        ZooTrace.logTraceMessage(LOG,</span><br><span class=\"line\">                                                 ZooTrace.SESSION_TRACE_MASK,</span><br><span class=\"line\">                                                 <span class=\"string\">\"Session 0x\"</span> + Long.toHexString(id)</span><br><span class=\"line\">                                                 + <span class=\"string\">\" is valid: \"</span>+ valid);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    dos.writeBoolean(valid);</span><br><span class=\"line\">                    qp.setData(bos.toByteArray());</span><br><span class=\"line\">                    queuedPackets.add(qp);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Leader.REQUEST:</span><br><span class=\"line\">                    bb = ByteBuffer.wrap(qp.getData());</span><br><span class=\"line\">                    sessionId = bb.getLong();</span><br><span class=\"line\">                    cxid = bb.getInt();</span><br><span class=\"line\">                    type = bb.getInt();</span><br><span class=\"line\">                    bb = bb.slice();</span><br><span class=\"line\">                    Request si;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(type == OpCode.sync)&#123;</span><br><span class=\"line\">                        si = <span class=\"keyword\">new</span> LearnerSyncRequest(<span class=\"keyword\">this</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        si = <span class=\"keyword\">new</span> Request(<span class=\"keyword\">null</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    si.setOwner(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                    leader.zk.submitLearnerRequest(si);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"unexpected quorum packet, type: &#123;&#125;\"</span>, packetToString(qp));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到分别对请求类型做了不同的处理：</p>\n<ul>\n<li>Leader.ACK -&gt; <code>leader.processAck</code></li>\n<li>Leader.PING -&gt; <code>leader.zk.touch</code></li>\n<li>Leader.REVALIDATE -&gt; <code>leader.zk.checkIfValidGlobalSession</code>和<code>leader.zk.setOwner</code></li>\n<li>Leader.REQUEST -&gt; <code>leader.zk.submitLearnerRequest</code></li>\n</ul>\n<p><code>Leader.ACK</code>应该是follower对请求的反馈。<br><code>Leader.REQUEST</code>应该是follower转发的请求，而<code>leader.zk.submitLearnerRequest</code>内部实现其实是调用链。上面分析得知<code>ProposalRequestProcessor</code>在处理Proposal时会调用<code>leader.propose</code>方法，所以我们重点关注两个方法:</p>\n<ul>\n<li><code>leader.propose</code>处理proposal</li>\n<li><code>leader.processAck</code>处理proposal ack</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Proposal <span class=\"title\">propose</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> XidRolloverException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Address the rollover issue. All lower 32bits set indicate a new leader</span></span><br><span class=\"line\"><span class=\"comment\">     * election. Force a re-election instead. See ZOOKEEPER-1277</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"comment\">//ZXID的后32位如果是0xffffffff，关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((request.zxid &amp; <span class=\"number\">0xffffffffL</span>) == <span class=\"number\">0xffffffffL</span>) &#123;</span><br><span class=\"line\">        String msg =</span><br><span class=\"line\">                <span class=\"string\">\"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start\"</span>;</span><br><span class=\"line\">        shutdown(msg);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XidRolloverException(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] data = SerializeUtils.serializeRequest(request);</span><br><span class=\"line\">    proposalStats.setLastBufferSize(data.length);</span><br><span class=\"line\">    <span class=\"comment\">//构建QuorumPacket和Proposal</span></span><br><span class=\"line\">    QuorumPacket pp = <span class=\"keyword\">new</span> QuorumPacket(Leader.PROPOSAL, request.zxid, data, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Proposal p = <span class=\"keyword\">new</span> Proposal();</span><br><span class=\"line\">    p.packet = pp;</span><br><span class=\"line\">    p.request = request;                </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">       p.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class=\"line\">               </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class=\"line\">           self.setLastSeenQuorumVerifier(request.qv, <span class=\"keyword\">true</span>);                       </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (self.getQuorumVerifier().getVersion()&lt;self.getLastSeenQuorumVerifier().getVersion()) &#123;</span><br><span class=\"line\">           p.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Proposing:: \"</span> + request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lastProposed = p.packet.getZxid();</span><br><span class=\"line\">        <span class=\"comment\">//写入outstandingProposals队列然后发送</span></span><br><span class=\"line\">        outstandingProposals.put(lastProposed, p);</span><br><span class=\"line\">        sendPacket(pp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendPacket</span><span class=\"params\">(QuorumPacket qp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//往所有的follower发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (forwardingFollowers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LearnerHandler f : forwardingFollowers) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//LearnerHandler其实也是将数据放入队列中。</span></span><br><span class=\"line\">            f.queuePacket(qp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>propose</code>方法很简单，构建<code>QuorumPacket</code>，放入HashMap <code>outstandingProposals</code>，然后广播。后面看ack。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Keep a count of acks that are received by the leader for a particular</span></span><br><span class=\"line\"><span class=\"comment\"> * proposal</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> zxid, the zxid of the proposal sent out</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> sid, the id of the server that sent the ack</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> followerAddr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processAck</span><span class=\"params\">(<span class=\"keyword\">long</span> sid, <span class=\"keyword\">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123;        </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!allowedToCommit) <span class=\"keyword\">return</span>; <span class=\"comment\">// last op committed was a leader change - from now on </span></span><br><span class=\"line\">                                 <span class=\"comment\">// the new leader should commit        </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">        LOG.trace(<span class=\"string\">\"Ack zxid: 0x&#123;&#125;\"</span>, Long.toHexString(zxid));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Proposal p : outstandingProposals.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> packetZxid = p.packet.getZxid();</span><br><span class=\"line\">            LOG.trace(<span class=\"string\">\"outstanding proposal: 0x&#123;&#125;\"</span>,</span><br><span class=\"line\">                    Long.toHexString(packetZxid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LOG.trace(<span class=\"string\">\"outstanding proposals all\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((zxid &amp; <span class=\"number\">0xffffffffL</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * We no longer process NEWLEADER ack with this method. However,</span></span><br><span class=\"line\"><span class=\"comment\">         * the learner sends an ack back to the leader after it gets</span></span><br><span class=\"line\"><span class=\"comment\">         * UPTODATE, so we just ignore the message.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//如果没有在外的proposal，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outstandingProposals.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"outstanding is 0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果请求的zxid小于最后一次提交的zxid，表示这个proposal已经提交过了，忽略这个请求。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastCommitted &gt;= zxid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"proposal has already been committed, pzxid: 0x&#123;&#125; zxid: 0x&#123;&#125;\"</span>,</span><br><span class=\"line\">                    Long.toHexString(lastCommitted), Long.toHexString(zxid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// The proposal has already been committed</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从outstandingProposals获取具体的proposal对象</span></span><br><span class=\"line\">    Proposal p = outstandingProposals.get(zxid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Trying to commit future proposal: zxid 0x&#123;&#125; from &#123;&#125;\"</span>,</span><br><span class=\"line\">                Long.toHexString(zxid), followerAddr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//记录ack</span></span><br><span class=\"line\">    p.addAck(sid);        </span><br><span class=\"line\">    <span class=\"comment\">/*if (LOG.isDebugEnabled()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        LOG.debug(\"Count for zxid: 0x&#123;&#125; is &#123;&#125;\",</span></span><br><span class=\"line\"><span class=\"comment\">                Long.toHexString(zxid), p.ackSet.size());</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"comment\">//尝试提交</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasCommitted = tryToCommit(p, zxid, followerAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If p is a reconfiguration, multiple other operations may be ready to be committed,</span></span><br><span class=\"line\">    <span class=\"comment\">// since operations wait for different sets of acks.</span></span><br><span class=\"line\">   <span class=\"comment\">// Currently we only permit one outstanding reconfiguration at a time</span></span><br><span class=\"line\">   <span class=\"comment\">// such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is</span></span><br><span class=\"line\">   <span class=\"comment\">// pending all wait for a quorum of old and new config, so its not possible to get enough acks</span></span><br><span class=\"line\">   <span class=\"comment\">// for an operation without getting enough acks for preceding ops. But in the future if multiple</span></span><br><span class=\"line\">   <span class=\"comment\">// concurrent reconfigs are allowed, this can happen and then we need to check whether some pending</span></span><br><span class=\"line\">    <span class=\"comment\">// ops may already have enough acks and can be committed, which is what this code does.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasCommitted &amp;&amp; p.request!=<span class=\"keyword\">null</span> &amp;&amp; p.request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">long</span> curZxid = zxid;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (allowedToCommit &amp;&amp; hasCommitted &amp;&amp; p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           curZxid++;</span><br><span class=\"line\">           p = outstandingProposals.get(curZxid);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (p !=<span class=\"keyword\">null</span>) hasCommitted = tryToCommit(p, curZxid, <span class=\"keyword\">null</span>);             </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>processAck</code> 先是对zxid进行校验，然后记录，最后调用<code>tryToCommit</code>尝试提交。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryToCommit</span><span class=\"params\">(Proposal p, <span class=\"keyword\">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123;       </span><br><span class=\"line\">   <span class=\"comment\">// make sure that ops are committed in order. With reconfigurations it is now possible</span></span><br><span class=\"line\">   <span class=\"comment\">// that different operations wait for different sets of acks, and we still want to enforce</span></span><br><span class=\"line\">   <span class=\"comment\">// that they are committed in order. Currently we only permit one outstanding reconfiguration</span></span><br><span class=\"line\">   <span class=\"comment\">// such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is</span></span><br><span class=\"line\">   <span class=\"comment\">// pending all wait for a quorum of old and new config, so it's not possible to get enough acks</span></span><br><span class=\"line\">   <span class=\"comment\">// for an operation without getting enough acks for preceding ops. But in the future if multiple</span></span><br><span class=\"line\">   <span class=\"comment\">// concurrent reconfigs are allowed, this can happen.</span></span><br><span class=\"line\">   <span class=\"comment\">//保证顺序</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (outstandingProposals.containsKey(zxid - <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// in order to be committed, a proposal must be accepted by a quorum.</span></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">// getting a quorum from all necessary configurations.</span></span><br><span class=\"line\">   <span class=\"comment\">//过半提交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p.hasAllQuorums()) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;                 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// commit proposals in order</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (zxid != lastCommitted+<span class=\"number\">1</span>) &#123;    </span><br><span class=\"line\">       LOG.warn(<span class=\"string\">\"Commiting zxid 0x\"</span> + Long.toHexString(zxid)</span><br><span class=\"line\">                + <span class=\"string\">\" from \"</span> + followerAddr + <span class=\"string\">\" not first!\"</span>);</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"First is \"</span></span><br><span class=\"line\">                + (lastCommitted+<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"comment\">//从outstandingProposals中移除</span></span><br><span class=\"line\">    outstandingProposals.remove(zxid);</span><br><span class=\"line\">    <span class=\"comment\">//toBeApplied队列加入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.request != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         toBeApplied.add(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.request == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Going to commmit null: \"</span> + p);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p.request.getHdr().getType() == OpCode.reconfig) &#123;                                   </span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Committing a reconfiguration! \"</span> + outstandingProposals.size()); </span><br><span class=\"line\">             </span><br><span class=\"line\">        <span class=\"comment\">//if this server is voter in new config with the same quorum address, </span></span><br><span class=\"line\">        <span class=\"comment\">//then it will remain the leader</span></span><br><span class=\"line\">        <span class=\"comment\">//otherwise an up-to-date follower will be designated as leader. This saves</span></span><br><span class=\"line\">        <span class=\"comment\">//leader election time, unless the designated leader fails                             </span></span><br><span class=\"line\">        Long designatedLeader = getDesignatedLeader(p, zxid);</span><br><span class=\"line\">        <span class=\"comment\">//LOG.warn(\"designated leader is: \" + designatedLeader);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size()-<span class=\"number\">1</span>).getQuorumVerifier();</span><br><span class=\"line\">   </span><br><span class=\"line\">        self.processReconfig(newQV, designatedLeader, zk.getZxid(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (designatedLeader != self.getId()) &#123;</span><br><span class=\"line\">            allowedToCommit = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">        <span class=\"comment\">// we're sending the designated leader, and if the leader is changing the followers are </span></span><br><span class=\"line\">        <span class=\"comment\">// responsible for closing the connection - this way we are sure that at least a majority of them </span></span><br><span class=\"line\">        <span class=\"comment\">// receive the commit message.</span></span><br><span class=\"line\">        commitAndActivate(zxid, designatedLeader);</span><br><span class=\"line\">        informAndActivate(p, designatedLeader);</span><br><span class=\"line\">        <span class=\"comment\">//turnOffFollowers();</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//向所有follower发送commit请求。</span></span><br><span class=\"line\">        commit(zxid);</span><br><span class=\"line\">        <span class=\"comment\">//向所有Observer广播</span></span><br><span class=\"line\">        inform(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//commitProcessor处理commit请求。</span></span><br><span class=\"line\">    zk.commitProcessor.commit(p.request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendingSyncs.containsKey(zxid))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(LearnerSyncRequest r: pendingSyncs.remove(zxid)) &#123;</span><br><span class=\"line\">            sendSync(r);</span><br><span class=\"line\">        &#125;               </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">true</span>;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(<span class=\"keyword\">long</span> zxid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        lastCommitted = zxid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    QuorumPacket qp = <span class=\"keyword\">new</span> QuorumPacket(Leader.COMMIT, zxid, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    sendPacket(qp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inform</span><span class=\"params\">(Proposal proposal)</span> </span>&#123;</span><br><span class=\"line\">    QuorumPacket qp = <span class=\"keyword\">new</span> QuorumPacket(Leader.INFORM, proposal.request.zxid,</span><br><span class=\"line\">                                        proposal.packet.getData(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    sendObserverPacket(qp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-leader-propose流程总结\"><a href=\"#7-leader-propose流程总结\" class=\"headerlink\" title=\"7. leader propose流程总结\"></a>7. leader propose流程总结</h2><ul>\n<li><ol>\n<li>请求处理入口有2个，一个是<code>org.apache.zookeeper.server.ZooKeeperServer#submitRequest</code>，另外一个是<code>LearnerHandler</code>的follower转发请求，都是调用处理链来处理。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>处理链总结为:PrepRequestProcessor-&gt;ProposalRequestProcessor-&gt;<pre><code>CommitProcessor-&gt;ToBeAppliedRequestProcessor-&gt;FinalRequestProcessor\nSyncRequestProcessor-&gt;AckRequestProcessor</code></pre></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>ProposalRequestProcessor调用leader的propose方法广播proposal，同时调用2个处理链。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>处理链<code>SyncRequestProcessor-&gt;AckRequestProcessor</code>可以理解为本地的proposal处理，SyncRequestProcessor将proposal存入磁盘，AckRequestProcessor会调用leader.processAck来返回ack。</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>处理链<code>CommitProcessor-&gt;ToBeAppliedRequestProcessor-&gt;FinalRequestProcessor</code>，CommitProcessor会阻塞住一个请求，直到被调用commit方法，然后交由FinalRequestProcessor修改内存数据。</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>leader和follower处理完后，会调用<code>org.apache.zookeeper.server.quorum.Leader#processAck</code>，leader判断获得半数以上的反馈后，会调用CommitProcessor的commit方法，跳转到5。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"8-FollowerZooKeeperServer\"><a href=\"#8-FollowerZooKeeperServer\" class=\"headerlink\" title=\"8. FollowerZooKeeperServer\"></a>8. FollowerZooKeeperServer</h2><p>理解了LeaderZooKeeperServer之后再来看FollowerZooKeeperServer，发现其实很好理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setupRequestProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RequestProcessor finalProcessor = <span class=\"keyword\">new</span> FinalRequestProcessor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    commitProcessor = <span class=\"keyword\">new</span> CommitProcessor(finalProcessor,</span><br><span class=\"line\">            Long.toString(getServerId()), <span class=\"keyword\">true</span>, getZooKeeperServerListener());</span><br><span class=\"line\">    commitProcessor.start();</span><br><span class=\"line\">    firstProcessor = <span class=\"keyword\">new</span> FollowerRequestProcessor(<span class=\"keyword\">this</span>, commitProcessor);</span><br><span class=\"line\">    ((FollowerRequestProcessor) firstProcessor).start();</span><br><span class=\"line\">    syncProcessor = <span class=\"keyword\">new</span> SyncRequestProcessor(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> SendAckRequestProcessor((Learner)getFollower()));</span><br><span class=\"line\">    syncProcessor.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkedBlockingQueue&lt;Request&gt; pendingTxns = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理proposal</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logRequest</span><span class=\"params\">(TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((request.zxid &amp; <span class=\"number\">0xffffffffL</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pendingTxns.add(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    syncProcessor.processRequest(request);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * When a COMMIT message is received, eventually this method is called,</span></span><br><span class=\"line\"><span class=\"comment\"> * which matches up the zxid from the COMMIT with (hopefully) the head of</span></span><br><span class=\"line\"><span class=\"comment\"> * the pendingTxns queue and hands it to the commitProcessor to commit.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> zxid - must correspond to the head of pendingTxns if it exists</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//处理commit请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(<span class=\"keyword\">long</span> zxid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingTxns.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Committing \"</span> + Long.toHexString(zxid)</span><br><span class=\"line\">                + <span class=\"string\">\" without seeing txn\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> firstElementZxid = pendingTxns.element().zxid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstElementZxid != zxid) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Committing zxid 0x\"</span> + Long.toHexString(zxid)</span><br><span class=\"line\">                + <span class=\"string\">\" but next pending txn 0x\"</span></span><br><span class=\"line\">                + Long.toHexString(firstElementZxid));</span><br><span class=\"line\">        System.exit(<span class=\"number\">12</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Request request = pendingTxns.remove();</span><br><span class=\"line\">    commitProcessor.commit(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>两个处理链：</p>\n<ul>\n<li>1.FollowerRequestProcessor-&gt;CommitProcessor-&gt;FinalRequestProcessor</li>\n<li>2.SyncRequestProcessor-&gt;SendAckRequestProcessor</li>\n</ul>\n<p>proposal请求时，调用处理链<code>SyncRequestProcessor-&gt;SendAckRequestProcessor</code>，写入磁盘并返回ack。<br>commit时，调用处理链<code>CommitProcessor-&gt;FinalRequestProcessor</code>，写入内存。</p>\n"},{"layout":"post","title":"zookeeper 单机流程3.5.5","date":"2019-08-19T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n\n[toc]\n# zookeeper 单机流程3.5.5\n\n在`ZooKeeperServerMain`的启动中，会启动`NIOServerCnxnFactory`。\n\n```java\n    cnxnFactory = ServerCnxnFactory.createFactory();\n    cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), false);\n    cnxnFactory.startup(zkServer);\n```\n`ServerCnxnFactory.createFactory`默认创建`NIOServerCnxnFactory`，首先调用`configure`方法，然后调用`startup`方法。\n\n## 1.configure\n\n首先看`NIOServerCnxnFactory.configure`。\n\n```java\n    public void configure(InetSocketAddress addr, int maxcc, boolean secure) throws IOException {\n        if (secure) {\n            throw new UnsupportedOperationException(\"SSL isn't supported in NIOServerCnxn\");\n        }\n        //配置sasl，安全相关的，暂时忽略。\n        configureSaslLogin();\n\n        //从名字看是最大客户端连接数，默认60\n        maxClientCnxns = maxcc;\n        //session过期时间，先从System Property获取数值，没有的话默认10000，第一次知道Integer还有这样的方法。\n        sessionlessCnxnTimeout = Integer.getInteger(\n            ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT, 10000);\n        // We also use the sessionlessCnxnTimeout as expiring interval for\n        // cnxnExpiryQueue. These don't need to be the same, but the expiring\n        // interval passed into the ExpiryQueue() constructor below should be\n        // less than or equal to the timeout.\n        //初始化队列和线程，从名字看都是跟过期时间相关的。\n        cnxnExpiryQueue =\n            new ExpiryQueue<NIOServerCnxn>(sessionlessCnxnTimeout);\n        expirerThread = new ConnectionExpirerThread();\n        //获取核数\n        int numCores = Runtime.getRuntime().availableProcessors();\n        // 32 cores sweet spot seems to be 4 selector threads\n        //初始化selector线程，如果32位核数的话是4个线程，不知道为什么要用这么多线程，后面再看。\n        numSelectorThreads = Integer.getInteger(\n            ZOOKEEPER_NIO_NUM_SELECTOR_THREADS,\n            Math.max((int) Math.sqrt((float) numCores/2), 1));\n        if (numSelectorThreads < 1) {\n            throw new IOException(\"numSelectorThreads must be at least 1\");\n        }\n        //worker线程数=核数*2\n        numWorkerThreads = Integer.getInteger(\n            ZOOKEEPER_NIO_NUM_WORKER_THREADS, 2 * numCores);\n        workerShutdownTimeoutMS = Long.getLong(\n            ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT, 5000);\n\n        LOG.info(\"Configuring NIO connection handler with \"\n                 + (sessionlessCnxnTimeout/1000) + \"s sessionless connection\"\n                 + \" timeout, \" + numSelectorThreads + \" selector thread(s), \"\n                 + (numWorkerThreads > 0 ? numWorkerThreads : \"no\")\n                 + \" worker threads, and \"\n                 + (directBufferBytes == 0 ? \"gathered writes.\" :\n                    (\"\" + (directBufferBytes/1024) + \" kB direct buffers.\")));\n        //初始化selectorThreads\n        for(int i=0; i<numSelectorThreads; ++i) {\n            selectorThreads.add(new SelectorThread(i));\n        }\n        //创建2181端口服务\n        this.ss = ServerSocketChannel.open();\n        ss.socket().setReuseAddress(true);\n        LOG.info(\"binding to port \" + addr);\n        ss.socket().bind(addr);\n        ss.configureBlocking(false);\n        //创建一个AcceptThread线程\n        acceptThread = new AcceptThread(ss, addr, selectorThreads);\n    }\n```\n\n`configure`方法主要做的几件事情：\n1. 创建`ExpiryQueue`和`ConnectionExpirerThread`。\n2. 创建`SelectorThread`。\n3. 监听2181端口。\n4. 创建`AcceptThread`。\n\n### 1.1 ExpiryQueue\n\n```java\npublic class ExpiryQueue<E> {\n\n    //NIOServerCnxn和过期时间的map\n    private final ConcurrentHashMap<E, Long> elemMap =\n        new ConcurrentHashMap<E, Long>();\n    /**\n     * The maximum number of buckets is equal to max timeout/expirationInterval,\n     * so the expirationInterval should not be too small compared to the\n     * max timeout that this expiry queue needs to maintain.\n     */\n     \n    //过期时间和Set<NIOServerCnxn>的map\n    private final ConcurrentHashMap<Long, Set<E>> expiryMap =\n        new ConcurrentHashMap<Long, Set<E>>();\n\n    //下次过期时间\n    private final AtomicLong nextExpirationTime = new AtomicLong();\n    //过期间隔\n    private final int expirationInterval;\n\n    public ExpiryQueue(int expirationInterval) {\n        this.expirationInterval = expirationInterval;\n        nextExpirationTime.set(roundToNextInterval(Time.currentElapsedTime()));\n    }\n\n    private long roundToNextInterval(long time) {\n        return (time / expirationInterval + 1) * expirationInterval;\n    }\n    \n    //更新元素的过期时间\n    public Long update(E elem, int timeout) {\n        //获取元素的过期时间\n        Long prevExpiryTime = elemMap.get(elem);\n        long now = Time.currentElapsedTime();\n        //计算新的过期时间，将timeout按过期间隔取整\n        Long newExpiryTime = roundToNextInterval(now + timeout);\n\n        if (newExpiryTime.equals(prevExpiryTime)) {\n            // No change, so nothing to update\n            return null;\n        }\n        \n        //下面是将过期时间和elem存到expiryMap和elemMap中\n\n        // First add the elem to the new expiry time bucket in expiryMap.\n        Set<E> set = expiryMap.get(newExpiryTime);\n        if (set == null) {\n            // Construct a ConcurrentHashSet using a ConcurrentHashMap\n            set = Collections.newSetFromMap(\n                new ConcurrentHashMap<E, Boolean>());\n            // Put the new set in the map, but only if another thread\n            // hasn't beaten us to it\n            Set<E> existingSet = expiryMap.putIfAbsent(newExpiryTime, set);\n            if (existingSet != null) {\n                set = existingSet;\n            }\n        }\n        set.add(elem);\n\n        // Map the elem to the new expiry time. If a different previous\n        // mapping was present, clean up the previous expiry bucket.\n        prevExpiryTime = elemMap.put(elem, newExpiryTime);\n        if (prevExpiryTime != null && !newExpiryTime.equals(prevExpiryTime)) {\n            Set<E> prevSet = expiryMap.get(prevExpiryTime);\n            if (prevSet != null) {\n                prevSet.remove(elem);\n            }\n        }\n        return newExpiryTime;\n    }\n    \n    public Set<E> poll() {\n        //获取当前时间获取过期的元素并remove\n        long now = Time.currentElapsedTime();\n        long expirationTime = nextExpirationTime.get();\n        if (now < expirationTime) {\n            return Collections.emptySet();\n        }\n\n        Set<E> set = null;\n        long newExpirationTime = expirationTime + expirationInterval;\n        if (nextExpirationTime.compareAndSet(\n              expirationTime, newExpirationTime)) {\n            set = expiryMap.remove(expirationTime);\n        }\n        if (set == null) {\n            return Collections.emptySet();\n        }\n        return set;\n    }\n\n```\n\n分析`ExpiryQueue`中最主要的`update`和`poll`函数可以看到`ExpiryQueue`主要作用是向外输出到达过期时间的`NIOServerCnxn`。\n\n### 1.2 ConnectionExpirerThread\n\n```java\n    private class ConnectionExpirerThread extends ZooKeeperThread {\n        ConnectionExpirerThread() {\n            super(\"ConnnectionExpirer\");\n        }\n\n        public void run() {\n            try {\n                while (!stopped) {\n                    long waitTime = cnxnExpiryQueue.getWaitTime();\n                    if (waitTime > 0) {\n                        Thread.sleep(waitTime);\n                        continue;\n                    }\n                    for (NIOServerCnxn conn : cnxnExpiryQueue.poll()) {\n                        conn.close();\n                    }\n                }\n\n            } catch (InterruptedException e) {\n                  LOG.info(\"ConnnectionExpirerThread interrupted\");\n            }\n        }\n    }\n```\n\n```java\npublic class ZooKeeperThread extends Thread {\n\n    private static final Logger LOG = LoggerFactory\n            .getLogger(ZooKeeperThread.class);\n\n    private UncaughtExceptionHandler uncaughtExceptionalHandler = new UncaughtExceptionHandler() {\n\n        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n            handleException(t.getName(), e);\n        }\n    };\n\n    public ZooKeeperThread(String threadName) {\n        super(threadName);\n        setUncaughtExceptionHandler(uncaughtExceptionalHandler);\n    }\n\n    /**\n     * This will be used by the uncaught exception handler and just log a\n     * warning message and return.\n     * \n     * @param thName\n     *            - thread name\n     * @param e\n     *            - exception object\n     */\n    protected void handleException(String thName, Throwable e) {\n        LOG.warn(\"Exception occurred from thread {}\", thName, e);\n    }\n}\n\n```\n\n`ConnectionExpirerThread`是`NIOServerCnxnFactory`的子类，继承自`ZooKeeperThread`。`ZooKeeperThread`主要就是设置了线程名和线程的`UncaughtExceptionHandler`。\n`ConnectionExpirerThread`的功能是从`cnxnExpiryQueue`中获取过期的`NIOServerCnxn`并`close`。\n\n\n### 1.1.3 AcceptThread\n\n```java\nprivate class AcceptThread extends AbstractSelectThread {\n        private final ServerSocketChannel acceptSocket;\n        private final SelectionKey acceptKey;\n        private final RateLogger acceptErrorLogger = new RateLogger(LOG);\n        private final Collection<SelectorThread> selectorThreads;\n        private Iterator<SelectorThread> selectorIterator;\n        private volatile boolean reconfiguring = false;\n        \n        public AcceptThread(ServerSocketChannel ss, InetSocketAddress addr,\n                Set<SelectorThread> selectorThreads) throws IOException {\n            super(\"NIOServerCxnFactory.AcceptThread:\" + addr);\n            this.acceptSocket = ss;\n            // 注册OP_ACCEPT\n            this.acceptKey =\n                acceptSocket.register(selector, SelectionKey.OP_ACCEPT);\n            this.selectorThreads = Collections.unmodifiableList(\n                new ArrayList<SelectorThread>(selectorThreads));\n            selectorIterator = this.selectorThreads.iterator();\n        }\n\n        public void run() {\n            try {\n                while (!stopped && !acceptSocket.socket().isClosed()) {\n                    try {\n                        select();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n            } finally {\n                closeSelector();\n                // This will wake up the selector threads, and tell the\n                // worker thread pool to begin shutdown.\n            \tif (!reconfiguring) {                    \n                    NIOServerCnxnFactory.this.stop();\n                }\n                LOG.info(\"accept thread exitted run method\");\n            }\n        }\n\n        private void select() {\n            try {\n                selector.select();\n\n                Iterator<SelectionKey> selectedKeys =\n                    selector.selectedKeys().iterator();\n                while (!stopped && selectedKeys.hasNext()) {\n                    SelectionKey key = selectedKeys.next();\n                    selectedKeys.remove();\n\n                    if (!key.isValid()) {\n                        continue;\n                    }\n                    if (key.isAcceptable()) {\n                        //如果有accept的连接，调用doAccept方法\n                        if (!doAccept()) {\n                            pauseAccept(10);\n                        }\n                    } else {\n                        LOG.warn(\"Unexpected ops in accept select \"\n                                 + key.readyOps());\n                    }\n                }\n            } catch (IOException e) {\n                LOG.warn(\"Ignoring IOException while selecting\", e);\n            }\n        }\n\n        private boolean doAccept() {\n            boolean accepted = false;\n            SocketChannel sc = null;\n            try {\n                sc = acceptSocket.accept();\n                accepted = true;\n                InetAddress ia = sc.socket().getInetAddress();\n                int cnxncount = getClientCnxnCount(ia);\n                //判断连接上限\n                if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns){\n                    throw new IOException(\"Too many connections from \" + ia\n                                          + \" - max is \" + maxClientCnxns );\n                }\n\n                LOG.debug(\"Accepted socket connection from \"\n                         + sc.socket().getRemoteSocketAddress());\n                sc.configureBlocking(false);\n\n                // Round-robin assign this connection to a selector thread\n                //从迭代器里面获取一个SelectorThread，如果没有的话，重新初始化迭代器然后获取。\n                if (!selectorIterator.hasNext()) {\n                    selectorIterator = selectorThreads.iterator();\n                }\n                SelectorThread selectorThread = selectorIterator.next();\n                if (!selectorThread.addAcceptedConnection(sc)) {\n                    throw new IOException(\n                        \"Unable to add connection to selector queue\"\n                        + (stopped ? \" (shutdown in progress)\" : \"\"));\n                }\n                acceptErrorLogger.flush();\n            } catch (IOException e) {\n                // accept, maxClientCnxns, configureBlocking\n                acceptErrorLogger.rateLimitLog(\n                    \"Error accepting new connection: \" + e.getMessage());\n                fastCloseSock(sc);\n            }\n            return accepted;\n        }\n    }\n```\n\n`AcceptThread`做的主要事情就是accept连接，然后分配给`SelectorThread`。\n\n### 1.1.4 SelectorThread\n\n```java\nclass SelectorThread extends AbstractSelectThread {\n        private final int id;\n        private final Queue<SocketChannel> acceptedQueue;\n        private final Queue<SelectionKey> updateQueue;\n\n        public SelectorThread(int id) throws IOException {\n            super(\"NIOServerCxnFactory.SelectorThread-\" + id);\n            this.id = id;\n            acceptedQueue = new LinkedBlockingQueue<SocketChannel>();\n            updateQueue = new LinkedBlockingQueue<SelectionKey>();\n        }\n\n        public boolean addAcceptedConnection(SocketChannel accepted) {\n            if (stopped || !acceptedQueue.offer(accepted)) {\n                return false;\n            }\n            wakeupSelector();\n            return true;\n        }\n\n        public boolean addInterestOpsUpdateRequest(SelectionKey sk) {\n            if (stopped || !updateQueue.offer(sk)) {\n                return false;\n            }\n            wakeupSelector();\n            return true;\n        }\n        \n        ...\n}\n\n```\n\n`SelectorThread`同样继承`AbstractSelectThread`，有两个队列`acceptedQueue`和`updateQueue`，提供两个方法往队列里塞数据。\n\n```java\n        public void run() {\n            try {\n                //运行状况下死循环执行这3个方法\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n                //如果跳出循环，关闭所有连接。\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close();\n                    }\n                    cleanupSelectionKey(key);\n                }\n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exitted run method\");\n            }\n        }\n\n        private void select() {\n            try {\n                selector.select();\n\n                Set<SelectionKey> selected = selector.selectedKeys();\n                ArrayList<SelectionKey> selectedList =\n                    new ArrayList<SelectionKey>(selected);\n                Collections.shuffle(selectedList);\n                Iterator<SelectionKey> selectedKeys = selectedList.iterator();\n                while(!stopped && selectedKeys.hasNext()) {\n                    SelectionKey key = selectedKeys.next();\n                    selected.remove(key);\n\n                    if (!key.isValid()) {\n                        cleanupSelectionKey(key);\n                        continue;\n                    }\n                    //处理readable和writable的连接\n                    if (key.isReadable() || key.isWritable()) {\n                        handleIO(key);\n                    } else {\n                        LOG.warn(\"Unexpected ops in select \" + key.readyOps());\n                    }\n                }\n            } catch (IOException e) {\n                LOG.warn(\"Ignoring IOException while selecting\", e);\n            }\n        }\n\n        /**\n         * Schedule I/O for processing on the connection associated with\n         * the given SelectionKey. If a worker thread pool is not being used,\n         * I/O is run directly by this thread.\n         */\n        private void handleIO(SelectionKey key) {\n            //封装workRequest，交由workerPool处理。\n            IOWorkRequest workRequest = new IOWorkRequest(this, key);\n            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n\n            // Stop selecting this key while processing on its\n            // connection\n            //在处理过程中，停止注册SelectionKey\n            cnxn.disableSelectable();\n            key.interestOps(0);\n            touchCnxn(cnxn);\n            workerPool.schedule(workRequest);\n        }\n\n        /**\n         * Iterate over the queue of accepted connections that have been\n         * assigned to this thread but not yet placed on the selector.\n         */\n        private void processAcceptedConnections() {\n            //从acceptedQueue中取出SelectionKey，注册READ事件\n            SocketChannel accepted;\n            while (!stopped && (accepted = acceptedQueue.poll()) != null) {\n                SelectionKey key = null;\n                try {\n                    key = accepted.register(selector, SelectionKey.OP_READ);\n                    NIOServerCnxn cnxn = createConnection(accepted, key, this);\n                    key.attach(cnxn);\n                    addCnxn(cnxn);\n                } catch (IOException e) {\n                    // register, createConnection\n                    cleanupSelectionKey(key);\n                    fastCloseSock(accepted);\n                }\n            }\n        }\n\n        /**\n         * Iterate over the queue of connections ready to resume selection,\n         * and restore their interest ops selection mask.\n         */\n        private void processInterestOpsUpdateRequests() {\n            //从updateQueue中取出SelectionKey，注册READ或WRITE事件\n            SelectionKey key;\n            while (!stopped && (key = updateQueue.poll()) != null) {\n                if (!key.isValid()) {\n                    cleanupSelectionKey(key);\n                }\n                NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                if (cnxn.isSelectable()) {\n                    key.interestOps(cnxn.getInterestOps());\n                }\n            }\n        }\n```\n\n`SelectorThread`的功能就是注册WRITE和READ事件的连接，并处理IO。\n\n\n## 2.start\n\n```java\n    public void start() {\n        stopped = false;\n           \n        if (workerPool == null) {\n            workerPool = new WorkerService(\n                \"NIOWorker\", numWorkerThreads, false);\n        }\n        for(SelectorThread thread : selectorThreads) {\n            if (thread.getState() == Thread.State.NEW) {\n                thread.start();\n            }\n        }\n        // ensure thread is started once and only once\n        if (acceptThread.getState() == Thread.State.NEW) {\n            acceptThread.start();\n        }\n        if (expirerThread.getState() == Thread.State.NEW) {\n            expirerThread.start();\n        }\n    }\n```\n\n`NIOServerCnxnFactory`的start方法，初始化`WorkerService`，并启动`SelectorThread`、`acceptThread`，`expirerThread`线程。\n\n\n\n### 2.1 WorkerService\n\n```java\n    private final ArrayList<ExecutorService> workers =\n        new ArrayList<ExecutorService>();\n    public WorkerService(String name, int numThreads,\n                         boolean useAssignableThreads) {\n        this.threadNamePrefix = (name == null ? \"\" : name) + \"Thread\";\n        this.numWorkerThreads = numThreads;\n        this.threadsAreAssignable = useAssignableThreads;\n        start();\n    }\n    \n    public void start() {\n        if (numWorkerThreads > 0) {\n            if (threadsAreAssignable) {\n                for(int i = 1; i <= numWorkerThreads; ++i) {\n                    workers.add(Executors.newFixedThreadPool(\n                        1, new DaemonThreadFactory(threadNamePrefix, i)));\n                }\n            } else {\n                workers.add(Executors.newFixedThreadPool(\n                    numWorkerThreads, new DaemonThreadFactory(threadNamePrefix)));\n            }\n        }\n        stopped = false;\n    }\n```\n\n`WorkerService`的初始化，主要是初始化了线程池`workers`。\n\n```java\n    public static abstract class WorkRequest {\n        /**\n         * Must be implemented. Is called when the work request is run.\n         */\n        public abstract void doWork() throws Exception;\n\n        /**\n         * (Optional) If implemented, is called if the service is stopped\n         * or unable to schedule the request.\n         */\n        public void cleanup() {\n        }\n    }\n```\n\n内部类`WorkRequest`，提供了`doWork`和`cleanup`方法。\n\n```java\n    private class ScheduledWorkRequest implements Runnable {\n        private final WorkRequest workRequest;\n\n        ScheduledWorkRequest(WorkRequest workRequest) {\n            this.workRequest = workRequest;\n        }\n\n        @Override\n        public void run() {\n            try {\n                // Check if stopped while request was on queue\n                if (stopped) {\n                    workRequest.cleanup();\n                    return;\n                }\n                workRequest.doWork();\n            } catch (Exception e) {\n                LOG.warn(\"Unexpected exception\", e);\n                workRequest.cleanup();\n            }\n        }\n    }\n```\n\n内部类`ScheduledWorkRequest`，继承`Runnable`，`run`方法中执行`workRequest.doWork`。\n\n```java\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest =\n            new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work\n        // directly.\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n```\n\n最主要的方法`schedule`，将`workRequest`交由线程池执行，如果线程池满，由当前线程执行。\n\n### 2.2 IOWorkRequest\n\n```java\n    private class IOWorkRequest extends WorkerService.WorkRequest {\n        private final SelectorThread selectorThread;\n        private final SelectionKey key;\n        private final NIOServerCnxn cnxn;\n\n        IOWorkRequest(SelectorThread selectorThread, SelectionKey key) {\n            this.selectorThread = selectorThread;\n            this.key = key;\n            this.cnxn = (NIOServerCnxn) key.attachment();\n        }\n\n        public void doWork() throws InterruptedException {\n            if (!key.isValid()) {\n                selectorThread.cleanupSelectionKey(key);\n                return;\n            }\n\n            if (key.isReadable() || key.isWritable()) {\n                cnxn.doIO(key);\n\n                // Check if we shutdown or doIO() closed this connection\n                if (stopped) {\n                    cnxn.close();\n                    return;\n                }\n                if (!key.isValid()) {\n                    selectorThread.cleanupSelectionKey(key);\n                    return;\n                }\n                //更新过期时间\n                touchCnxn(cnxn);\n            }\n\n            // Mark this connection as once again ready for selection\n            cnxn.enableSelectable();\n            // Push an update request on the queue to resume selecting\n            // on the current set of interest ops, which may have changed\n            // as a result of the I/O operations we just performed.\n            if (!selectorThread.addInterestOpsUpdateRequest(key)) {\n                cnxn.close();\n            }\n        }\n\n        @Override\n        public void cleanup() {\n            cnxn.close();\n        }\n    }\n```\n\n`IOWorkRequest`是`NIOServerCnxnFactory`的内部类,主要是调用`org.apache.zookeeper.server.NIOServerCnxn#doIO`方法来处理IO。\n\n\n\n## 3. NIOServerCnxn\n\n\n```java\n\n    //lenBuffer 4个字节，用于读取长度\n    private final ByteBuffer lenBuffer = ByteBuffer.allocate(4);\n\n    //incomingBuffer默认等于lenBuffer\n    private ByteBuffer incomingBuffer = lenBuffer;\n    \n    void doIO(SelectionKey k) throws InterruptedException {\n        try {\n            if (isSocketOpen() == false) {\n                LOG.warn(\"trying to do i/o on a null socket for session:0x\"\n                         + Long.toHexString(sessionId));\n\n                return;\n            }\n            if (k.isReadable()) {\n                //一开始incomingBuffer=lenBuffer\n                int rc = sock.read(incomingBuffer);\n                if (rc < 0) {\n                    throw new EndOfStreamException(\n                            \"Unable to read additional data from client sessionid 0x\"\n                            + Long.toHexString(sessionId)\n                            + \", likely client has closed socket\");\n                }\n                //incomingBuffer读满，也就是读取了4个字节的长度\n                if (incomingBuffer.remaining() == 0) {\n                    boolean isPayload;\n                    if (incomingBuffer == lenBuffer) { // start of next request\n                        incomingBuffer.flip();\n                        //读取长度，incomingBuffer重新赋值\n                        isPayload = readLength(k);\n                        incomingBuffer.clear();\n                    } else {\n                        // continuation\n                        isPayload = true;\n                    }\n                    if (isPayload) { // not the case for 4letterword\n                        //处理payload\n                        readPayload();\n                    }\n                    else {\n                        // four letter words take care\n                        // need not do anything else\n                        return;\n                    }\n                }\n            }\n            if (k.isWritable()) {\n                //write 暂时跳过\n                handleWrite(k);\n\n                if (!initialized && !getReadInterest() && !getWriteInterest()) {\n                    throw new CloseRequestException(\"responded to info probe\");\n                }\n            }\n        } catch (CancelledKeyException e) {\n            LOG.warn(\"CancelledKeyException causing close of session 0x\"\n                     + Long.toHexString(sessionId));\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"CancelledKeyException stack trace\", e);\n            }\n            close();\n        } catch (CloseRequestException e) {\n            // expecting close to log session closure\n            close();\n        } catch (EndOfStreamException e) {\n            LOG.warn(e.getMessage());\n            // expecting close to log session closure\n            close();\n        } catch (IOException e) {\n            LOG.warn(\"Exception causing close of session 0x\"\n                     + Long.toHexString(sessionId) + \": \" + e.getMessage());\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"IOException stack trace\", e);\n            }\n            close();\n        }\n    }\n\n    private boolean readLength(SelectionKey k) throws IOException {\n        // 读取长度，重新新建incomingBuffer\n        int len = lenBuffer.getInt();\n        if (!initialized && checkFourLetterWord(sk, len)) {\n            return false;\n        }\n        if (len < 0 || len > BinaryInputArchive.maxBuffer) {\n            throw new IOException(\"Len error \" + len);\n        }\n        if (!isZKServerRunning()) {\n            throw new IOException(\"ZooKeeperServer not running\");\n        }\n        incomingBuffer = ByteBuffer.allocate(len);\n        return true;\n    }\n    \n    private void readPayload() throws IOException, InterruptedException {\n        if (incomingBuffer.remaining() != 0) { \n            //读取payload\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new EndOfStreamException(\n                        \"Unable to read additional data from client sessionid 0x\"\n                        + Long.toHexString(sessionId)\n                        + \", likely client has closed socket\");\n            }\n        }\n        //读满\n        if (incomingBuffer.remaining() == 0) {\n            packetReceived();\n            incomingBuffer.flip();\n            if (!initialized) {\n                readConnectRequest();\n            } else {\n                //处理请求\n                readRequest();\n            }\n            lenBuffer.clear();\n            //复位incomingBuffer\n            incomingBuffer = lenBuffer;\n        }\n    }\n\n    private void readRequest() throws IOException {\n        //交由ZooKeeperServer来处理请求\n        zkServer.processPacket(this, incomingBuffer);\n    }\n```\n\n`NIOServerCnxn`的`doIO`方法，主要是处理读写数据。写数据先跳过，读数据是先读取长度，然后读取payload，最后交由`ZooKeeperServer`来处理请求。\n\n## 4.ZooKeeperServer\n\n```java\n    public void processPacket(ServerCnxn cnxn, ByteBuffer incomingBuffer) throws IOException {\n        // We have the request, now process and setup for next\n        InputStream bais = new ByteBufferInputStream(incomingBuffer);\n        BinaryInputArchive bia = BinaryInputArchive.getArchive(bais);\n        RequestHeader h = new RequestHeader();\n        //从流里读取RequestHeader，其实就读取了2个字段，xid和type\n        h.deserialize(bia, \"header\");\n        // Through the magic of byte buffers, txn will not be\n        // pointing\n        // to the start of the txn\n        incomingBuffer = incomingBuffer.slice();\n        //处理auth请求，跳过\n        if (h.getType() == OpCode.auth) {\n            LOG.info(\"got auth packet \" + cnxn.getRemoteSocketAddress());\n            AuthPacket authPacket = new AuthPacket();\n            ByteBufferInputStream.byteBuffer2Record(incomingBuffer, authPacket);\n            String scheme = authPacket.getScheme();\n            AuthenticationProvider ap = ProviderRegistry.getProvider(scheme);\n            Code authReturn = KeeperException.Code.AUTHFAILED;\n            if(ap != null) {\n                try {\n                    authReturn = ap.handleAuthentication(cnxn, authPacket.getAuth());\n                } catch(RuntimeException e) {\n                    LOG.warn(\"Caught runtime exception from AuthenticationProvider: \" + scheme + \" due to \" + e);\n                    authReturn = KeeperException.Code.AUTHFAILED;\n                }\n            }\n            if (authReturn == KeeperException.Code.OK) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Authentication succeeded for scheme: \" + scheme);\n                }\n                LOG.info(\"auth success \" + cnxn.getRemoteSocketAddress());\n                ReplyHeader rh = new ReplyHeader(h.getXid(), 0,\n                        KeeperException.Code.OK.intValue());\n                cnxn.sendResponse(rh, null, null);\n            } else {\n                if (ap == null) {\n                    LOG.warn(\"No authentication provider for scheme: \"\n                            + scheme + \" has \"\n                            + ProviderRegistry.listProviders());\n                } else {\n                    LOG.warn(\"Authentication failed for scheme: \" + scheme);\n                }\n                // send a response...\n                ReplyHeader rh = new ReplyHeader(h.getXid(), 0,\n                        KeeperException.Code.AUTHFAILED.intValue());\n                cnxn.sendResponse(rh, null, null);\n                // ... and close connection\n                cnxn.sendBuffer(ServerCnxnFactory.closeConn);\n                cnxn.disableRecv();\n            }\n            return;\n        } else {\n            ////处理sasl请求，跳过\n            if (h.getType() == OpCode.sasl) {\n                Record rsp = processSasl(incomingBuffer,cnxn);\n                ReplyHeader rh = new ReplyHeader(h.getXid(), 0, KeeperException.Code.OK.intValue());\n                cnxn.sendResponse(rh,rsp, \"response\"); // not sure about 3rd arg..what is it?\n                return;\n            }\n            else {\n                //封装请求Request，调用submitRequest\n                Request si = new Request(cnxn, cnxn.getSessionId(), h.getXid(),\n                  h.getType(), incomingBuffer, cnxn.getAuthInfo());\n                si.setOwner(ServerCnxn.me);\n                setLocalSessionFlag(si);\n                submitRequest(si);\n            }\n        }\n        cnxn.incrOutstandingRequests(h);\n    }\n```\n\n```java\n    public void submitRequest(Request si) {\n        //如果firstProcessor为空，等待初始化\n        if (firstProcessor == null) {\n            synchronized (this) {\n                try {\n                    // Since all requests are passed to the request\n                    // processor it should wait for setting up the request\n                    // processor chain. The state will be updated to RUNNING\n                    // after the setup.\n                    while (state == State.INITIAL) {\n                        wait(1000);\n                    }\n                } catch (InterruptedException e) {\n                    LOG.warn(\"Unexpected interruption\", e);\n                }\n                if (firstProcessor == null || state != State.RUNNING) {\n                    throw new RuntimeException(\"Not started\");\n                }\n            }\n        }\n        try {\n            touch(si.cnxn);\n            boolean validpacket = Request.isValid(si.type);\n            if (validpacket) {\n                firstProcessor.processRequest(si);\n                if (si.cnxn != null) {\n                    incInProcess();\n                }\n            } else {\n                LOG.warn(\"Received packet at server of unknown type \" + si.type);\n                new UnimplementedRequestProcessor().processRequest(si);\n            }\n        } catch (MissingSessionException e) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Dropping request: \" + e.getMessage());\n            }\n        } catch (RequestProcessorException e) {\n            LOG.error(\"Unable to process request:\" + e.getMessage(), e);\n        }\n    }\n```\n\n`submitRequest`方法调用请求处理链来处理请求。\n\n```java\n    protected void setupRequestProcessors() {\n        RequestProcessor finalProcessor = new FinalRequestProcessor(this);\n        RequestProcessor syncProcessor = new SyncRequestProcessor(this,\n                finalProcessor);\n        ((SyncRequestProcessor)syncProcessor).start();\n        firstProcessor = new PrepRequestProcessor(this, syncProcessor);\n        ((PrepRequestProcessor)firstProcessor).start();\n    }\n```\n\n从启动方法中可以看出，`ZooKeeperServer`的请求处理链是`PrepRequestProcessor->SyncRequestProcessor->FinalRequestProcessor`。\n\n## 5.RequestProcessor\n\nzookeeper有一堆请求处理链，其中父接口为`RequestProcessor`，框架图如下：\n![](http://ww1.sinaimg.cn/large/006tNc79ly1g64aitlnz4j30ly0kqaez.jpg)\n\n各个子类的作用列一下：\n\n* AckRequestProcessor，将前一阶段的请求作为ACK转发给Leader。\n* CommitProcessor，将到来的请求与本地提交的请求进行匹配，这是因为改变系统状态的本地请求的返回结果是到来的请求。\n* FinalRequestProcessor，通常是请求处理链的最后一个处理器。\n* FollowerRequestProcessor，将修改了系统状态的请求转发给Leader。\n* ObserverRequestProcessor，同FollowerRequestProcessor一样，将修改了系统状态的请求转发给Leader。\n* PrepRequestProcessor，通常是请求处理链的第一个处理器。\n* ProposalRequestProcessor，将请求转发给AckRequestProcessor和SyncRequestProcessor。\n* ReadOnlyRequestProcessor，是ReadOnlyZooKeeperServer请求处理链的第一个处理器，将只读请求传递给下个处理器，抛弃改变状态的请求。\n* SendAckRequestProcessor，发送ACK请求的处理器。\n* SyncRequestProcessor，发送Sync请求的处理器。\n* ToBeAppliedRequestProcessor，维护toBeApplied列表，下个处理器必须是FinalRequestProcessor并且FinalRequestProcessor必须同步处理请求。\n* UnimplementedRequestProcessor，用于管理未知请求。\n\n```java\npublic interface RequestProcessor {\n    @SuppressWarnings(\"serial\")\n    public static class RequestProcessorException extends Exception {\n        public RequestProcessorException(String msg, Throwable t) {\n            super(msg, t);\n        }\n    }\n\n    void processRequest(Request request) throws RequestProcessorException;\n\n    void shutdown();\n}\n```\n\n`RequestProcessor`定义了2个接口和一个异常内部类。\n\n### 5.1 PrepRequestProcessor\n\n`PrepRequestProcessor`顾名思义，主要在处理链里面做一些准备工作，运行在处理链的第一个。\n\n```java\n    public void processRequest(Request request) {\n        submittedRequests.add(request);\n    }\n```\n\n`processRequest`方法将请求放入队列中。\n\n```java\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                Request request = submittedRequests.take();\n                long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n                if (request.type == OpCode.ping) {\n                    traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;\n                }\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, traceMask, 'P', request, \"\");\n                }\n                if (Request.requestOfDeath == request) {\n                    break;\n                }\n                pRequest(request);\n            }\n        } catch (RequestProcessorException e) {\n            if (e.getCause() instanceof XidRolloverException) {\n                LOG.info(e.getCause().getMessage());\n            }\n            handleException(this.getName(), e);\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"PrepRequestProcessor exited loop!\");\n    }\n    \n    protected void pRequest(Request request) throws RequestProcessorException {\n        // LOG.info(\"Prep>>> cxid = \" + request.cxid + \" type = \" +\n        // request.type + \" id = 0x\" + Long.toHexString(request.sessionId));\n        request.setHdr(null);\n        request.setTxn(null);\n\n        try {\n            switch (request.type) {\n            case OpCode.createContainer:\n            case OpCode.create:\n            case OpCode.create2:\n                CreateRequest create2Request = new CreateRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, true);\n                break;\n            case OpCode.createTTL:\n                CreateTTLRequest createTtlRequest = new CreateTTLRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest, true);\n                break;\n            case OpCode.deleteContainer:\n            case OpCode.delete:\n                DeleteRequest deleteRequest = new DeleteRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, true);\n                break;\n            case OpCode.setData:\n                SetDataRequest setDataRequest = new SetDataRequest();                \n                pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, true);\n                break;\n            case OpCode.reconfig:\n                ReconfigRequest reconfigRequest = new ReconfigRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, reconfigRequest);\n                pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest, true);\n                break;\n            case OpCode.setACL:\n                SetACLRequest setAclRequest = new SetACLRequest();                \n                pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, true);\n                break;\n            case OpCode.check:\n                CheckVersionRequest checkRequest = new CheckVersionRequest();              \n                pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, true);\n                break;\n            case OpCode.multi:\n                MultiTransactionRecord multiRequest = new MultiTransactionRecord();\n                try {\n                    ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);\n                } catch(IOException e) {\n                    request.setHdr(new TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(),\n                            Time.currentWallTime(), OpCode.multi));\n                    throw e;\n                }\n                List<Txn> txns = new ArrayList<Txn>();\n                //Each op in a multi-op must have the same zxid!\n                long zxid = zks.getNextZxid();\n                KeeperException ke = null;\n\n                //Store off current pending change records in case we need to rollback\n                Map<String, ChangeRecord> pendingChanges = getPendingChanges(multiRequest);\n\n                for(Op op: multiRequest) {\n                    Record subrequest = op.toRequestRecord();\n                    int type;\n                    Record txn;\n\n                    /* If we've already failed one of the ops, don't bother\n                     * trying the rest as we know it's going to fail and it\n                     * would be confusing in the logfiles.\n                     */\n                    if (ke != null) {\n                        type = OpCode.error;\n                        txn = new ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());\n                    }\n\n                    /* Prep the request and convert to a Txn */\n                    else {\n                        try {\n                            pRequest2Txn(op.getType(), zxid, request, subrequest, false);\n                            type = request.getHdr().getType();\n                            txn = request.getTxn();\n                        } catch (KeeperException e) {\n                            ke = e;\n                            type = OpCode.error;\n                            txn = new ErrorTxn(e.code().intValue());\n\n                            if (e.code().intValue() > Code.APIERROR.intValue()) {\n                                LOG.info(\"Got user-level KeeperException when processing {} aborting\" +\n                                        \" remaining multi ops. Error Path:{} Error:{}\",\n                                        request.toString(), e.getPath(), e.getMessage());\n                            }\n\n                            request.setException(e);\n\n                            /* Rollback change records from failed multi-op */\n                            rollbackPendingChanges(zxid, pendingChanges);\n                        }\n                    }\n\n                    //FIXME: I don't want to have to serialize it here and then\n                    //       immediately deserialize in next processor. But I'm\n                    //       not sure how else to get the txn stored into our list.\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                    txn.serialize(boa, \"request\") ;\n                    ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n                    txns.add(new Txn(type, bb.array()));\n                }\n\n                request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,\n                        Time.currentWallTime(), request.type));\n                request.setTxn(new MultiTxn(txns));\n\n                break;\n\n            //create/close session don't require request record\n            case OpCode.createSession:\n            case OpCode.closeSession:\n                if (!request.isLocalSession()) {\n                    pRequest2Txn(request.type, zks.getNextZxid(), request,\n                                 null, true);\n                }\n                break;\n\n            //All the rest don't need to create a Txn - just verify session\n            case OpCode.sync:\n            case OpCode.exists:\n            case OpCode.getData:\n            case OpCode.getACL:\n            case OpCode.getChildren:\n            case OpCode.getChildren2:\n            case OpCode.ping:\n            case OpCode.setWatches:\n            case OpCode.checkWatches:\n            case OpCode.removeWatches:\n                zks.sessionTracker.checkSession(request.sessionId,\n                        request.getOwner());\n                break;\n            default:\n                LOG.warn(\"unknown type \" + request.type);\n                break;\n            }\n        } catch (KeeperException e) {\n            if (request.getHdr() != null) {\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(e.code().intValue()));\n            }\n\n            if (e.code().intValue() > Code.APIERROR.intValue()) {\n                LOG.info(\"Got user-level KeeperException when processing {} Error Path:{} Error:{}\",\n                        request.toString(), e.getPath(), e.getMessage());\n            }\n            request.setException(e);\n        } catch (Exception e) {\n            // log at error level as we are returning a marshalling\n            // error to the user\n            LOG.error(\"Failed to process \" + request, e);\n\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            if(bb != null){\n                bb.rewind();\n                while (bb.hasRemaining()) {\n                    sb.append(Integer.toHexString(bb.get() & 0xff));\n                }\n            } else {\n                sb.append(\"request buffer is null\");\n            }\n\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            if (request.getHdr() != null) {\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));\n            }\n        }\n        request.zxid = zks.getZxid();\n        nextProcessor.processRequest(request);\n    }\n\n```\n\nrun函数是对Thread类run函数的重写，其核心逻辑相对简单，即不断从队列中取出request进行处理，其会调用pRequest函数。\n\n\n`pRequest`会确定请求类型，并根据请求类型不同生成不同的请求对象，然后调用`pRequest2Txn`函数。\n\n`pRequest2Txn`会根据不同的请求类型进行不同的验证，如对创建节点而言，其会进行会话验证，ACL列表验证，节点路径验证及判断创建节点的类型（顺序节点、临时节点等）而进行不同操作，同时还会使父节点的子节点数目加1，之后会再调用`addChangeRecord`函数将ChangeRecord添加至ZooKeeperServer的outstandingChanges和outstandingChangesForPath中。\n\n在处理完后，交给下一个处理链来处理request。\n\n### 5.2 SyncRequestProcessor\n\n```java\n    public void processRequest(Request request) {\n        // request.addRQRec(\">sync\");\n        queuedRequests.add(request);\n    }\n```\n\n`SyncRequestProcessor`同样将请求放入队列来异步处理。\n\n```java\n    @Override\n    public void run() {\n        try {\n            int logCount = 0;\n\n            // we do this in an attempt to ensure that not all of the servers\n            // in the ensemble take a snapshot at the same time\n            // 确保所有的服务器在同一时间不是使用的同一个快照\n            int randRoll = r.nextInt(snapCount/2);\n            while (true) {\n                Request si = null;\n                if (toFlush.isEmpty()) {\n                    //如果待刷新的队列为空，用take方法，会阻塞\n                    si = queuedRequests.take();\n                } else {\n                    //如果待刷新的队列不为空，用poll方法，如果队列里面没有内容，返回null。\n                    //如果返回null就刷新流到硬盘，否则继续处理请求。可以理解为空闲的时候flush\n                    si = queuedRequests.poll();\n                    if (si == null) {\n                        flush(toFlush);\n                        continue;\n                    }\n                }\n                if (si == requestOfDeath) {\n                    break;\n                }\n                if (si != null) {\n                    // 将请求添加至日志文件，只有事务性请求返回true\n                    if (zks.getZKDatabase().append(si)) {\n                        logCount++;\n                        //文件过大则roll日志文件，并创建线程处理快照。\n                        if (logCount > (snapCount / 2 + randRoll)) {\n                            randRoll = r.nextInt(snapCount/2);\n                            // roll the log\n                            zks.getZKDatabase().rollLog();\n                            // take a snapshot\n                            if (snapInProcess != null && snapInProcess.isAlive()) {\n                                LOG.warn(\"Too busy to snap, skipping\");\n                            } else {\n                                snapInProcess = new ZooKeeperThread(\"Snapshot Thread\") {\n                                        public void run() {\n                                            try {\n                                                zks.takeSnapshot();\n                                            } catch(Exception e) {\n                                                LOG.warn(\"Unexpected exception\", e);\n                                            }\n                                        }\n                                    };\n                                snapInProcess.start();\n                            }\n                            logCount = 0;\n                        }\n                    } else if (toFlush.isEmpty()) {\n                        // optimization for read heavy workloads\n                        // iff this is a read, and there are no pending\n                        // flushes (writes), then just pass this to the next\n                        // processor\n                        //查看此时toFlush是否为空，如果为空，说明近段时间读多写少，直接响应\n                        if (nextProcessor != null) {\n                            nextProcessor.processRequest(si);\n                            if (nextProcessor instanceof Flushable) {\n                                ((Flushable)nextProcessor).flush();\n                            }\n                        }\n                        continue;\n                    }\n                    toFlush.add(si);\n                    if (toFlush.size() > 1000) {\n                        flush(toFlush);\n                    }\n                }\n            }\n        } catch (Throwable t) {\n            handleException(this.getName(), t);\n        } finally{\n            running = false;\n        }\n        LOG.info(\"SyncRequestProcessor exited!\");\n    }\n```\n\n```java\n    private void flush(LinkedList<Request> toFlush)\n        throws IOException, RequestProcessorException\n    {\n        if (toFlush.isEmpty())\n            return;\n        //刷新磁盘\n        zks.getZKDatabase().commit();\n        while (!toFlush.isEmpty()) {\n        //将请求交给下一个处理器处理\n            Request i = toFlush.remove();\n            if (nextProcessor != null) {\n                nextProcessor.processRequest(i);\n            }\n        }\n        if (nextProcessor != null && nextProcessor instanceof Flushable) {\n            ((Flushable)nextProcessor).flush();\n        }\n    }\n```\n\n`SyncRequestProcessor`主要作用包含将事务性请求刷新到磁盘，并且对请求进行快照处理。\n\n\n### 5.3 FinalRequestProcessor\n\n`FinalRequestProcessor`主要是对DataTree的操作，先不写了。\n","source":"_posts/2019-08-20-zookeeper-单机流程3.5.5.md","raw":"---\nlayout:     post\ntitle:      \"zookeeper 单机流程3.5.5\"\ndate:       2019-08-20\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n\n[toc]\n# zookeeper 单机流程3.5.5\n\n在`ZooKeeperServerMain`的启动中，会启动`NIOServerCnxnFactory`。\n\n```java\n    cnxnFactory = ServerCnxnFactory.createFactory();\n    cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), false);\n    cnxnFactory.startup(zkServer);\n```\n`ServerCnxnFactory.createFactory`默认创建`NIOServerCnxnFactory`，首先调用`configure`方法，然后调用`startup`方法。\n\n## 1.configure\n\n首先看`NIOServerCnxnFactory.configure`。\n\n```java\n    public void configure(InetSocketAddress addr, int maxcc, boolean secure) throws IOException {\n        if (secure) {\n            throw new UnsupportedOperationException(\"SSL isn't supported in NIOServerCnxn\");\n        }\n        //配置sasl，安全相关的，暂时忽略。\n        configureSaslLogin();\n\n        //从名字看是最大客户端连接数，默认60\n        maxClientCnxns = maxcc;\n        //session过期时间，先从System Property获取数值，没有的话默认10000，第一次知道Integer还有这样的方法。\n        sessionlessCnxnTimeout = Integer.getInteger(\n            ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT, 10000);\n        // We also use the sessionlessCnxnTimeout as expiring interval for\n        // cnxnExpiryQueue. These don't need to be the same, but the expiring\n        // interval passed into the ExpiryQueue() constructor below should be\n        // less than or equal to the timeout.\n        //初始化队列和线程，从名字看都是跟过期时间相关的。\n        cnxnExpiryQueue =\n            new ExpiryQueue<NIOServerCnxn>(sessionlessCnxnTimeout);\n        expirerThread = new ConnectionExpirerThread();\n        //获取核数\n        int numCores = Runtime.getRuntime().availableProcessors();\n        // 32 cores sweet spot seems to be 4 selector threads\n        //初始化selector线程，如果32位核数的话是4个线程，不知道为什么要用这么多线程，后面再看。\n        numSelectorThreads = Integer.getInteger(\n            ZOOKEEPER_NIO_NUM_SELECTOR_THREADS,\n            Math.max((int) Math.sqrt((float) numCores/2), 1));\n        if (numSelectorThreads < 1) {\n            throw new IOException(\"numSelectorThreads must be at least 1\");\n        }\n        //worker线程数=核数*2\n        numWorkerThreads = Integer.getInteger(\n            ZOOKEEPER_NIO_NUM_WORKER_THREADS, 2 * numCores);\n        workerShutdownTimeoutMS = Long.getLong(\n            ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT, 5000);\n\n        LOG.info(\"Configuring NIO connection handler with \"\n                 + (sessionlessCnxnTimeout/1000) + \"s sessionless connection\"\n                 + \" timeout, \" + numSelectorThreads + \" selector thread(s), \"\n                 + (numWorkerThreads > 0 ? numWorkerThreads : \"no\")\n                 + \" worker threads, and \"\n                 + (directBufferBytes == 0 ? \"gathered writes.\" :\n                    (\"\" + (directBufferBytes/1024) + \" kB direct buffers.\")));\n        //初始化selectorThreads\n        for(int i=0; i<numSelectorThreads; ++i) {\n            selectorThreads.add(new SelectorThread(i));\n        }\n        //创建2181端口服务\n        this.ss = ServerSocketChannel.open();\n        ss.socket().setReuseAddress(true);\n        LOG.info(\"binding to port \" + addr);\n        ss.socket().bind(addr);\n        ss.configureBlocking(false);\n        //创建一个AcceptThread线程\n        acceptThread = new AcceptThread(ss, addr, selectorThreads);\n    }\n```\n\n`configure`方法主要做的几件事情：\n1. 创建`ExpiryQueue`和`ConnectionExpirerThread`。\n2. 创建`SelectorThread`。\n3. 监听2181端口。\n4. 创建`AcceptThread`。\n\n### 1.1 ExpiryQueue\n\n```java\npublic class ExpiryQueue<E> {\n\n    //NIOServerCnxn和过期时间的map\n    private final ConcurrentHashMap<E, Long> elemMap =\n        new ConcurrentHashMap<E, Long>();\n    /**\n     * The maximum number of buckets is equal to max timeout/expirationInterval,\n     * so the expirationInterval should not be too small compared to the\n     * max timeout that this expiry queue needs to maintain.\n     */\n     \n    //过期时间和Set<NIOServerCnxn>的map\n    private final ConcurrentHashMap<Long, Set<E>> expiryMap =\n        new ConcurrentHashMap<Long, Set<E>>();\n\n    //下次过期时间\n    private final AtomicLong nextExpirationTime = new AtomicLong();\n    //过期间隔\n    private final int expirationInterval;\n\n    public ExpiryQueue(int expirationInterval) {\n        this.expirationInterval = expirationInterval;\n        nextExpirationTime.set(roundToNextInterval(Time.currentElapsedTime()));\n    }\n\n    private long roundToNextInterval(long time) {\n        return (time / expirationInterval + 1) * expirationInterval;\n    }\n    \n    //更新元素的过期时间\n    public Long update(E elem, int timeout) {\n        //获取元素的过期时间\n        Long prevExpiryTime = elemMap.get(elem);\n        long now = Time.currentElapsedTime();\n        //计算新的过期时间，将timeout按过期间隔取整\n        Long newExpiryTime = roundToNextInterval(now + timeout);\n\n        if (newExpiryTime.equals(prevExpiryTime)) {\n            // No change, so nothing to update\n            return null;\n        }\n        \n        //下面是将过期时间和elem存到expiryMap和elemMap中\n\n        // First add the elem to the new expiry time bucket in expiryMap.\n        Set<E> set = expiryMap.get(newExpiryTime);\n        if (set == null) {\n            // Construct a ConcurrentHashSet using a ConcurrentHashMap\n            set = Collections.newSetFromMap(\n                new ConcurrentHashMap<E, Boolean>());\n            // Put the new set in the map, but only if another thread\n            // hasn't beaten us to it\n            Set<E> existingSet = expiryMap.putIfAbsent(newExpiryTime, set);\n            if (existingSet != null) {\n                set = existingSet;\n            }\n        }\n        set.add(elem);\n\n        // Map the elem to the new expiry time. If a different previous\n        // mapping was present, clean up the previous expiry bucket.\n        prevExpiryTime = elemMap.put(elem, newExpiryTime);\n        if (prevExpiryTime != null && !newExpiryTime.equals(prevExpiryTime)) {\n            Set<E> prevSet = expiryMap.get(prevExpiryTime);\n            if (prevSet != null) {\n                prevSet.remove(elem);\n            }\n        }\n        return newExpiryTime;\n    }\n    \n    public Set<E> poll() {\n        //获取当前时间获取过期的元素并remove\n        long now = Time.currentElapsedTime();\n        long expirationTime = nextExpirationTime.get();\n        if (now < expirationTime) {\n            return Collections.emptySet();\n        }\n\n        Set<E> set = null;\n        long newExpirationTime = expirationTime + expirationInterval;\n        if (nextExpirationTime.compareAndSet(\n              expirationTime, newExpirationTime)) {\n            set = expiryMap.remove(expirationTime);\n        }\n        if (set == null) {\n            return Collections.emptySet();\n        }\n        return set;\n    }\n\n```\n\n分析`ExpiryQueue`中最主要的`update`和`poll`函数可以看到`ExpiryQueue`主要作用是向外输出到达过期时间的`NIOServerCnxn`。\n\n### 1.2 ConnectionExpirerThread\n\n```java\n    private class ConnectionExpirerThread extends ZooKeeperThread {\n        ConnectionExpirerThread() {\n            super(\"ConnnectionExpirer\");\n        }\n\n        public void run() {\n            try {\n                while (!stopped) {\n                    long waitTime = cnxnExpiryQueue.getWaitTime();\n                    if (waitTime > 0) {\n                        Thread.sleep(waitTime);\n                        continue;\n                    }\n                    for (NIOServerCnxn conn : cnxnExpiryQueue.poll()) {\n                        conn.close();\n                    }\n                }\n\n            } catch (InterruptedException e) {\n                  LOG.info(\"ConnnectionExpirerThread interrupted\");\n            }\n        }\n    }\n```\n\n```java\npublic class ZooKeeperThread extends Thread {\n\n    private static final Logger LOG = LoggerFactory\n            .getLogger(ZooKeeperThread.class);\n\n    private UncaughtExceptionHandler uncaughtExceptionalHandler = new UncaughtExceptionHandler() {\n\n        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n            handleException(t.getName(), e);\n        }\n    };\n\n    public ZooKeeperThread(String threadName) {\n        super(threadName);\n        setUncaughtExceptionHandler(uncaughtExceptionalHandler);\n    }\n\n    /**\n     * This will be used by the uncaught exception handler and just log a\n     * warning message and return.\n     * \n     * @param thName\n     *            - thread name\n     * @param e\n     *            - exception object\n     */\n    protected void handleException(String thName, Throwable e) {\n        LOG.warn(\"Exception occurred from thread {}\", thName, e);\n    }\n}\n\n```\n\n`ConnectionExpirerThread`是`NIOServerCnxnFactory`的子类，继承自`ZooKeeperThread`。`ZooKeeperThread`主要就是设置了线程名和线程的`UncaughtExceptionHandler`。\n`ConnectionExpirerThread`的功能是从`cnxnExpiryQueue`中获取过期的`NIOServerCnxn`并`close`。\n\n\n### 1.1.3 AcceptThread\n\n```java\nprivate class AcceptThread extends AbstractSelectThread {\n        private final ServerSocketChannel acceptSocket;\n        private final SelectionKey acceptKey;\n        private final RateLogger acceptErrorLogger = new RateLogger(LOG);\n        private final Collection<SelectorThread> selectorThreads;\n        private Iterator<SelectorThread> selectorIterator;\n        private volatile boolean reconfiguring = false;\n        \n        public AcceptThread(ServerSocketChannel ss, InetSocketAddress addr,\n                Set<SelectorThread> selectorThreads) throws IOException {\n            super(\"NIOServerCxnFactory.AcceptThread:\" + addr);\n            this.acceptSocket = ss;\n            // 注册OP_ACCEPT\n            this.acceptKey =\n                acceptSocket.register(selector, SelectionKey.OP_ACCEPT);\n            this.selectorThreads = Collections.unmodifiableList(\n                new ArrayList<SelectorThread>(selectorThreads));\n            selectorIterator = this.selectorThreads.iterator();\n        }\n\n        public void run() {\n            try {\n                while (!stopped && !acceptSocket.socket().isClosed()) {\n                    try {\n                        select();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n            } finally {\n                closeSelector();\n                // This will wake up the selector threads, and tell the\n                // worker thread pool to begin shutdown.\n            \tif (!reconfiguring) {                    \n                    NIOServerCnxnFactory.this.stop();\n                }\n                LOG.info(\"accept thread exitted run method\");\n            }\n        }\n\n        private void select() {\n            try {\n                selector.select();\n\n                Iterator<SelectionKey> selectedKeys =\n                    selector.selectedKeys().iterator();\n                while (!stopped && selectedKeys.hasNext()) {\n                    SelectionKey key = selectedKeys.next();\n                    selectedKeys.remove();\n\n                    if (!key.isValid()) {\n                        continue;\n                    }\n                    if (key.isAcceptable()) {\n                        //如果有accept的连接，调用doAccept方法\n                        if (!doAccept()) {\n                            pauseAccept(10);\n                        }\n                    } else {\n                        LOG.warn(\"Unexpected ops in accept select \"\n                                 + key.readyOps());\n                    }\n                }\n            } catch (IOException e) {\n                LOG.warn(\"Ignoring IOException while selecting\", e);\n            }\n        }\n\n        private boolean doAccept() {\n            boolean accepted = false;\n            SocketChannel sc = null;\n            try {\n                sc = acceptSocket.accept();\n                accepted = true;\n                InetAddress ia = sc.socket().getInetAddress();\n                int cnxncount = getClientCnxnCount(ia);\n                //判断连接上限\n                if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns){\n                    throw new IOException(\"Too many connections from \" + ia\n                                          + \" - max is \" + maxClientCnxns );\n                }\n\n                LOG.debug(\"Accepted socket connection from \"\n                         + sc.socket().getRemoteSocketAddress());\n                sc.configureBlocking(false);\n\n                // Round-robin assign this connection to a selector thread\n                //从迭代器里面获取一个SelectorThread，如果没有的话，重新初始化迭代器然后获取。\n                if (!selectorIterator.hasNext()) {\n                    selectorIterator = selectorThreads.iterator();\n                }\n                SelectorThread selectorThread = selectorIterator.next();\n                if (!selectorThread.addAcceptedConnection(sc)) {\n                    throw new IOException(\n                        \"Unable to add connection to selector queue\"\n                        + (stopped ? \" (shutdown in progress)\" : \"\"));\n                }\n                acceptErrorLogger.flush();\n            } catch (IOException e) {\n                // accept, maxClientCnxns, configureBlocking\n                acceptErrorLogger.rateLimitLog(\n                    \"Error accepting new connection: \" + e.getMessage());\n                fastCloseSock(sc);\n            }\n            return accepted;\n        }\n    }\n```\n\n`AcceptThread`做的主要事情就是accept连接，然后分配给`SelectorThread`。\n\n### 1.1.4 SelectorThread\n\n```java\nclass SelectorThread extends AbstractSelectThread {\n        private final int id;\n        private final Queue<SocketChannel> acceptedQueue;\n        private final Queue<SelectionKey> updateQueue;\n\n        public SelectorThread(int id) throws IOException {\n            super(\"NIOServerCxnFactory.SelectorThread-\" + id);\n            this.id = id;\n            acceptedQueue = new LinkedBlockingQueue<SocketChannel>();\n            updateQueue = new LinkedBlockingQueue<SelectionKey>();\n        }\n\n        public boolean addAcceptedConnection(SocketChannel accepted) {\n            if (stopped || !acceptedQueue.offer(accepted)) {\n                return false;\n            }\n            wakeupSelector();\n            return true;\n        }\n\n        public boolean addInterestOpsUpdateRequest(SelectionKey sk) {\n            if (stopped || !updateQueue.offer(sk)) {\n                return false;\n            }\n            wakeupSelector();\n            return true;\n        }\n        \n        ...\n}\n\n```\n\n`SelectorThread`同样继承`AbstractSelectThread`，有两个队列`acceptedQueue`和`updateQueue`，提供两个方法往队列里塞数据。\n\n```java\n        public void run() {\n            try {\n                //运行状况下死循环执行这3个方法\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n                //如果跳出循环，关闭所有连接。\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close();\n                    }\n                    cleanupSelectionKey(key);\n                }\n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exitted run method\");\n            }\n        }\n\n        private void select() {\n            try {\n                selector.select();\n\n                Set<SelectionKey> selected = selector.selectedKeys();\n                ArrayList<SelectionKey> selectedList =\n                    new ArrayList<SelectionKey>(selected);\n                Collections.shuffle(selectedList);\n                Iterator<SelectionKey> selectedKeys = selectedList.iterator();\n                while(!stopped && selectedKeys.hasNext()) {\n                    SelectionKey key = selectedKeys.next();\n                    selected.remove(key);\n\n                    if (!key.isValid()) {\n                        cleanupSelectionKey(key);\n                        continue;\n                    }\n                    //处理readable和writable的连接\n                    if (key.isReadable() || key.isWritable()) {\n                        handleIO(key);\n                    } else {\n                        LOG.warn(\"Unexpected ops in select \" + key.readyOps());\n                    }\n                }\n            } catch (IOException e) {\n                LOG.warn(\"Ignoring IOException while selecting\", e);\n            }\n        }\n\n        /**\n         * Schedule I/O for processing on the connection associated with\n         * the given SelectionKey. If a worker thread pool is not being used,\n         * I/O is run directly by this thread.\n         */\n        private void handleIO(SelectionKey key) {\n            //封装workRequest，交由workerPool处理。\n            IOWorkRequest workRequest = new IOWorkRequest(this, key);\n            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n\n            // Stop selecting this key while processing on its\n            // connection\n            //在处理过程中，停止注册SelectionKey\n            cnxn.disableSelectable();\n            key.interestOps(0);\n            touchCnxn(cnxn);\n            workerPool.schedule(workRequest);\n        }\n\n        /**\n         * Iterate over the queue of accepted connections that have been\n         * assigned to this thread but not yet placed on the selector.\n         */\n        private void processAcceptedConnections() {\n            //从acceptedQueue中取出SelectionKey，注册READ事件\n            SocketChannel accepted;\n            while (!stopped && (accepted = acceptedQueue.poll()) != null) {\n                SelectionKey key = null;\n                try {\n                    key = accepted.register(selector, SelectionKey.OP_READ);\n                    NIOServerCnxn cnxn = createConnection(accepted, key, this);\n                    key.attach(cnxn);\n                    addCnxn(cnxn);\n                } catch (IOException e) {\n                    // register, createConnection\n                    cleanupSelectionKey(key);\n                    fastCloseSock(accepted);\n                }\n            }\n        }\n\n        /**\n         * Iterate over the queue of connections ready to resume selection,\n         * and restore their interest ops selection mask.\n         */\n        private void processInterestOpsUpdateRequests() {\n            //从updateQueue中取出SelectionKey，注册READ或WRITE事件\n            SelectionKey key;\n            while (!stopped && (key = updateQueue.poll()) != null) {\n                if (!key.isValid()) {\n                    cleanupSelectionKey(key);\n                }\n                NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                if (cnxn.isSelectable()) {\n                    key.interestOps(cnxn.getInterestOps());\n                }\n            }\n        }\n```\n\n`SelectorThread`的功能就是注册WRITE和READ事件的连接，并处理IO。\n\n\n## 2.start\n\n```java\n    public void start() {\n        stopped = false;\n           \n        if (workerPool == null) {\n            workerPool = new WorkerService(\n                \"NIOWorker\", numWorkerThreads, false);\n        }\n        for(SelectorThread thread : selectorThreads) {\n            if (thread.getState() == Thread.State.NEW) {\n                thread.start();\n            }\n        }\n        // ensure thread is started once and only once\n        if (acceptThread.getState() == Thread.State.NEW) {\n            acceptThread.start();\n        }\n        if (expirerThread.getState() == Thread.State.NEW) {\n            expirerThread.start();\n        }\n    }\n```\n\n`NIOServerCnxnFactory`的start方法，初始化`WorkerService`，并启动`SelectorThread`、`acceptThread`，`expirerThread`线程。\n\n\n\n### 2.1 WorkerService\n\n```java\n    private final ArrayList<ExecutorService> workers =\n        new ArrayList<ExecutorService>();\n    public WorkerService(String name, int numThreads,\n                         boolean useAssignableThreads) {\n        this.threadNamePrefix = (name == null ? \"\" : name) + \"Thread\";\n        this.numWorkerThreads = numThreads;\n        this.threadsAreAssignable = useAssignableThreads;\n        start();\n    }\n    \n    public void start() {\n        if (numWorkerThreads > 0) {\n            if (threadsAreAssignable) {\n                for(int i = 1; i <= numWorkerThreads; ++i) {\n                    workers.add(Executors.newFixedThreadPool(\n                        1, new DaemonThreadFactory(threadNamePrefix, i)));\n                }\n            } else {\n                workers.add(Executors.newFixedThreadPool(\n                    numWorkerThreads, new DaemonThreadFactory(threadNamePrefix)));\n            }\n        }\n        stopped = false;\n    }\n```\n\n`WorkerService`的初始化，主要是初始化了线程池`workers`。\n\n```java\n    public static abstract class WorkRequest {\n        /**\n         * Must be implemented. Is called when the work request is run.\n         */\n        public abstract void doWork() throws Exception;\n\n        /**\n         * (Optional) If implemented, is called if the service is stopped\n         * or unable to schedule the request.\n         */\n        public void cleanup() {\n        }\n    }\n```\n\n内部类`WorkRequest`，提供了`doWork`和`cleanup`方法。\n\n```java\n    private class ScheduledWorkRequest implements Runnable {\n        private final WorkRequest workRequest;\n\n        ScheduledWorkRequest(WorkRequest workRequest) {\n            this.workRequest = workRequest;\n        }\n\n        @Override\n        public void run() {\n            try {\n                // Check if stopped while request was on queue\n                if (stopped) {\n                    workRequest.cleanup();\n                    return;\n                }\n                workRequest.doWork();\n            } catch (Exception e) {\n                LOG.warn(\"Unexpected exception\", e);\n                workRequest.cleanup();\n            }\n        }\n    }\n```\n\n内部类`ScheduledWorkRequest`，继承`Runnable`，`run`方法中执行`workRequest.doWork`。\n\n```java\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest =\n            new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work\n        // directly.\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n```\n\n最主要的方法`schedule`，将`workRequest`交由线程池执行，如果线程池满，由当前线程执行。\n\n### 2.2 IOWorkRequest\n\n```java\n    private class IOWorkRequest extends WorkerService.WorkRequest {\n        private final SelectorThread selectorThread;\n        private final SelectionKey key;\n        private final NIOServerCnxn cnxn;\n\n        IOWorkRequest(SelectorThread selectorThread, SelectionKey key) {\n            this.selectorThread = selectorThread;\n            this.key = key;\n            this.cnxn = (NIOServerCnxn) key.attachment();\n        }\n\n        public void doWork() throws InterruptedException {\n            if (!key.isValid()) {\n                selectorThread.cleanupSelectionKey(key);\n                return;\n            }\n\n            if (key.isReadable() || key.isWritable()) {\n                cnxn.doIO(key);\n\n                // Check if we shutdown or doIO() closed this connection\n                if (stopped) {\n                    cnxn.close();\n                    return;\n                }\n                if (!key.isValid()) {\n                    selectorThread.cleanupSelectionKey(key);\n                    return;\n                }\n                //更新过期时间\n                touchCnxn(cnxn);\n            }\n\n            // Mark this connection as once again ready for selection\n            cnxn.enableSelectable();\n            // Push an update request on the queue to resume selecting\n            // on the current set of interest ops, which may have changed\n            // as a result of the I/O operations we just performed.\n            if (!selectorThread.addInterestOpsUpdateRequest(key)) {\n                cnxn.close();\n            }\n        }\n\n        @Override\n        public void cleanup() {\n            cnxn.close();\n        }\n    }\n```\n\n`IOWorkRequest`是`NIOServerCnxnFactory`的内部类,主要是调用`org.apache.zookeeper.server.NIOServerCnxn#doIO`方法来处理IO。\n\n\n\n## 3. NIOServerCnxn\n\n\n```java\n\n    //lenBuffer 4个字节，用于读取长度\n    private final ByteBuffer lenBuffer = ByteBuffer.allocate(4);\n\n    //incomingBuffer默认等于lenBuffer\n    private ByteBuffer incomingBuffer = lenBuffer;\n    \n    void doIO(SelectionKey k) throws InterruptedException {\n        try {\n            if (isSocketOpen() == false) {\n                LOG.warn(\"trying to do i/o on a null socket for session:0x\"\n                         + Long.toHexString(sessionId));\n\n                return;\n            }\n            if (k.isReadable()) {\n                //一开始incomingBuffer=lenBuffer\n                int rc = sock.read(incomingBuffer);\n                if (rc < 0) {\n                    throw new EndOfStreamException(\n                            \"Unable to read additional data from client sessionid 0x\"\n                            + Long.toHexString(sessionId)\n                            + \", likely client has closed socket\");\n                }\n                //incomingBuffer读满，也就是读取了4个字节的长度\n                if (incomingBuffer.remaining() == 0) {\n                    boolean isPayload;\n                    if (incomingBuffer == lenBuffer) { // start of next request\n                        incomingBuffer.flip();\n                        //读取长度，incomingBuffer重新赋值\n                        isPayload = readLength(k);\n                        incomingBuffer.clear();\n                    } else {\n                        // continuation\n                        isPayload = true;\n                    }\n                    if (isPayload) { // not the case for 4letterword\n                        //处理payload\n                        readPayload();\n                    }\n                    else {\n                        // four letter words take care\n                        // need not do anything else\n                        return;\n                    }\n                }\n            }\n            if (k.isWritable()) {\n                //write 暂时跳过\n                handleWrite(k);\n\n                if (!initialized && !getReadInterest() && !getWriteInterest()) {\n                    throw new CloseRequestException(\"responded to info probe\");\n                }\n            }\n        } catch (CancelledKeyException e) {\n            LOG.warn(\"CancelledKeyException causing close of session 0x\"\n                     + Long.toHexString(sessionId));\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"CancelledKeyException stack trace\", e);\n            }\n            close();\n        } catch (CloseRequestException e) {\n            // expecting close to log session closure\n            close();\n        } catch (EndOfStreamException e) {\n            LOG.warn(e.getMessage());\n            // expecting close to log session closure\n            close();\n        } catch (IOException e) {\n            LOG.warn(\"Exception causing close of session 0x\"\n                     + Long.toHexString(sessionId) + \": \" + e.getMessage());\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"IOException stack trace\", e);\n            }\n            close();\n        }\n    }\n\n    private boolean readLength(SelectionKey k) throws IOException {\n        // 读取长度，重新新建incomingBuffer\n        int len = lenBuffer.getInt();\n        if (!initialized && checkFourLetterWord(sk, len)) {\n            return false;\n        }\n        if (len < 0 || len > BinaryInputArchive.maxBuffer) {\n            throw new IOException(\"Len error \" + len);\n        }\n        if (!isZKServerRunning()) {\n            throw new IOException(\"ZooKeeperServer not running\");\n        }\n        incomingBuffer = ByteBuffer.allocate(len);\n        return true;\n    }\n    \n    private void readPayload() throws IOException, InterruptedException {\n        if (incomingBuffer.remaining() != 0) { \n            //读取payload\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new EndOfStreamException(\n                        \"Unable to read additional data from client sessionid 0x\"\n                        + Long.toHexString(sessionId)\n                        + \", likely client has closed socket\");\n            }\n        }\n        //读满\n        if (incomingBuffer.remaining() == 0) {\n            packetReceived();\n            incomingBuffer.flip();\n            if (!initialized) {\n                readConnectRequest();\n            } else {\n                //处理请求\n                readRequest();\n            }\n            lenBuffer.clear();\n            //复位incomingBuffer\n            incomingBuffer = lenBuffer;\n        }\n    }\n\n    private void readRequest() throws IOException {\n        //交由ZooKeeperServer来处理请求\n        zkServer.processPacket(this, incomingBuffer);\n    }\n```\n\n`NIOServerCnxn`的`doIO`方法，主要是处理读写数据。写数据先跳过，读数据是先读取长度，然后读取payload，最后交由`ZooKeeperServer`来处理请求。\n\n## 4.ZooKeeperServer\n\n```java\n    public void processPacket(ServerCnxn cnxn, ByteBuffer incomingBuffer) throws IOException {\n        // We have the request, now process and setup for next\n        InputStream bais = new ByteBufferInputStream(incomingBuffer);\n        BinaryInputArchive bia = BinaryInputArchive.getArchive(bais);\n        RequestHeader h = new RequestHeader();\n        //从流里读取RequestHeader，其实就读取了2个字段，xid和type\n        h.deserialize(bia, \"header\");\n        // Through the magic of byte buffers, txn will not be\n        // pointing\n        // to the start of the txn\n        incomingBuffer = incomingBuffer.slice();\n        //处理auth请求，跳过\n        if (h.getType() == OpCode.auth) {\n            LOG.info(\"got auth packet \" + cnxn.getRemoteSocketAddress());\n            AuthPacket authPacket = new AuthPacket();\n            ByteBufferInputStream.byteBuffer2Record(incomingBuffer, authPacket);\n            String scheme = authPacket.getScheme();\n            AuthenticationProvider ap = ProviderRegistry.getProvider(scheme);\n            Code authReturn = KeeperException.Code.AUTHFAILED;\n            if(ap != null) {\n                try {\n                    authReturn = ap.handleAuthentication(cnxn, authPacket.getAuth());\n                } catch(RuntimeException e) {\n                    LOG.warn(\"Caught runtime exception from AuthenticationProvider: \" + scheme + \" due to \" + e);\n                    authReturn = KeeperException.Code.AUTHFAILED;\n                }\n            }\n            if (authReturn == KeeperException.Code.OK) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Authentication succeeded for scheme: \" + scheme);\n                }\n                LOG.info(\"auth success \" + cnxn.getRemoteSocketAddress());\n                ReplyHeader rh = new ReplyHeader(h.getXid(), 0,\n                        KeeperException.Code.OK.intValue());\n                cnxn.sendResponse(rh, null, null);\n            } else {\n                if (ap == null) {\n                    LOG.warn(\"No authentication provider for scheme: \"\n                            + scheme + \" has \"\n                            + ProviderRegistry.listProviders());\n                } else {\n                    LOG.warn(\"Authentication failed for scheme: \" + scheme);\n                }\n                // send a response...\n                ReplyHeader rh = new ReplyHeader(h.getXid(), 0,\n                        KeeperException.Code.AUTHFAILED.intValue());\n                cnxn.sendResponse(rh, null, null);\n                // ... and close connection\n                cnxn.sendBuffer(ServerCnxnFactory.closeConn);\n                cnxn.disableRecv();\n            }\n            return;\n        } else {\n            ////处理sasl请求，跳过\n            if (h.getType() == OpCode.sasl) {\n                Record rsp = processSasl(incomingBuffer,cnxn);\n                ReplyHeader rh = new ReplyHeader(h.getXid(), 0, KeeperException.Code.OK.intValue());\n                cnxn.sendResponse(rh,rsp, \"response\"); // not sure about 3rd arg..what is it?\n                return;\n            }\n            else {\n                //封装请求Request，调用submitRequest\n                Request si = new Request(cnxn, cnxn.getSessionId(), h.getXid(),\n                  h.getType(), incomingBuffer, cnxn.getAuthInfo());\n                si.setOwner(ServerCnxn.me);\n                setLocalSessionFlag(si);\n                submitRequest(si);\n            }\n        }\n        cnxn.incrOutstandingRequests(h);\n    }\n```\n\n```java\n    public void submitRequest(Request si) {\n        //如果firstProcessor为空，等待初始化\n        if (firstProcessor == null) {\n            synchronized (this) {\n                try {\n                    // Since all requests are passed to the request\n                    // processor it should wait for setting up the request\n                    // processor chain. The state will be updated to RUNNING\n                    // after the setup.\n                    while (state == State.INITIAL) {\n                        wait(1000);\n                    }\n                } catch (InterruptedException e) {\n                    LOG.warn(\"Unexpected interruption\", e);\n                }\n                if (firstProcessor == null || state != State.RUNNING) {\n                    throw new RuntimeException(\"Not started\");\n                }\n            }\n        }\n        try {\n            touch(si.cnxn);\n            boolean validpacket = Request.isValid(si.type);\n            if (validpacket) {\n                firstProcessor.processRequest(si);\n                if (si.cnxn != null) {\n                    incInProcess();\n                }\n            } else {\n                LOG.warn(\"Received packet at server of unknown type \" + si.type);\n                new UnimplementedRequestProcessor().processRequest(si);\n            }\n        } catch (MissingSessionException e) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Dropping request: \" + e.getMessage());\n            }\n        } catch (RequestProcessorException e) {\n            LOG.error(\"Unable to process request:\" + e.getMessage(), e);\n        }\n    }\n```\n\n`submitRequest`方法调用请求处理链来处理请求。\n\n```java\n    protected void setupRequestProcessors() {\n        RequestProcessor finalProcessor = new FinalRequestProcessor(this);\n        RequestProcessor syncProcessor = new SyncRequestProcessor(this,\n                finalProcessor);\n        ((SyncRequestProcessor)syncProcessor).start();\n        firstProcessor = new PrepRequestProcessor(this, syncProcessor);\n        ((PrepRequestProcessor)firstProcessor).start();\n    }\n```\n\n从启动方法中可以看出，`ZooKeeperServer`的请求处理链是`PrepRequestProcessor->SyncRequestProcessor->FinalRequestProcessor`。\n\n## 5.RequestProcessor\n\nzookeeper有一堆请求处理链，其中父接口为`RequestProcessor`，框架图如下：\n![](http://ww1.sinaimg.cn/large/006tNc79ly1g64aitlnz4j30ly0kqaez.jpg)\n\n各个子类的作用列一下：\n\n* AckRequestProcessor，将前一阶段的请求作为ACK转发给Leader。\n* CommitProcessor，将到来的请求与本地提交的请求进行匹配，这是因为改变系统状态的本地请求的返回结果是到来的请求。\n* FinalRequestProcessor，通常是请求处理链的最后一个处理器。\n* FollowerRequestProcessor，将修改了系统状态的请求转发给Leader。\n* ObserverRequestProcessor，同FollowerRequestProcessor一样，将修改了系统状态的请求转发给Leader。\n* PrepRequestProcessor，通常是请求处理链的第一个处理器。\n* ProposalRequestProcessor，将请求转发给AckRequestProcessor和SyncRequestProcessor。\n* ReadOnlyRequestProcessor，是ReadOnlyZooKeeperServer请求处理链的第一个处理器，将只读请求传递给下个处理器，抛弃改变状态的请求。\n* SendAckRequestProcessor，发送ACK请求的处理器。\n* SyncRequestProcessor，发送Sync请求的处理器。\n* ToBeAppliedRequestProcessor，维护toBeApplied列表，下个处理器必须是FinalRequestProcessor并且FinalRequestProcessor必须同步处理请求。\n* UnimplementedRequestProcessor，用于管理未知请求。\n\n```java\npublic interface RequestProcessor {\n    @SuppressWarnings(\"serial\")\n    public static class RequestProcessorException extends Exception {\n        public RequestProcessorException(String msg, Throwable t) {\n            super(msg, t);\n        }\n    }\n\n    void processRequest(Request request) throws RequestProcessorException;\n\n    void shutdown();\n}\n```\n\n`RequestProcessor`定义了2个接口和一个异常内部类。\n\n### 5.1 PrepRequestProcessor\n\n`PrepRequestProcessor`顾名思义，主要在处理链里面做一些准备工作，运行在处理链的第一个。\n\n```java\n    public void processRequest(Request request) {\n        submittedRequests.add(request);\n    }\n```\n\n`processRequest`方法将请求放入队列中。\n\n```java\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                Request request = submittedRequests.take();\n                long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n                if (request.type == OpCode.ping) {\n                    traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;\n                }\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, traceMask, 'P', request, \"\");\n                }\n                if (Request.requestOfDeath == request) {\n                    break;\n                }\n                pRequest(request);\n            }\n        } catch (RequestProcessorException e) {\n            if (e.getCause() instanceof XidRolloverException) {\n                LOG.info(e.getCause().getMessage());\n            }\n            handleException(this.getName(), e);\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"PrepRequestProcessor exited loop!\");\n    }\n    \n    protected void pRequest(Request request) throws RequestProcessorException {\n        // LOG.info(\"Prep>>> cxid = \" + request.cxid + \" type = \" +\n        // request.type + \" id = 0x\" + Long.toHexString(request.sessionId));\n        request.setHdr(null);\n        request.setTxn(null);\n\n        try {\n            switch (request.type) {\n            case OpCode.createContainer:\n            case OpCode.create:\n            case OpCode.create2:\n                CreateRequest create2Request = new CreateRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, true);\n                break;\n            case OpCode.createTTL:\n                CreateTTLRequest createTtlRequest = new CreateTTLRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest, true);\n                break;\n            case OpCode.deleteContainer:\n            case OpCode.delete:\n                DeleteRequest deleteRequest = new DeleteRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, true);\n                break;\n            case OpCode.setData:\n                SetDataRequest setDataRequest = new SetDataRequest();                \n                pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, true);\n                break;\n            case OpCode.reconfig:\n                ReconfigRequest reconfigRequest = new ReconfigRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, reconfigRequest);\n                pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest, true);\n                break;\n            case OpCode.setACL:\n                SetACLRequest setAclRequest = new SetACLRequest();                \n                pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, true);\n                break;\n            case OpCode.check:\n                CheckVersionRequest checkRequest = new CheckVersionRequest();              \n                pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, true);\n                break;\n            case OpCode.multi:\n                MultiTransactionRecord multiRequest = new MultiTransactionRecord();\n                try {\n                    ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);\n                } catch(IOException e) {\n                    request.setHdr(new TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(),\n                            Time.currentWallTime(), OpCode.multi));\n                    throw e;\n                }\n                List<Txn> txns = new ArrayList<Txn>();\n                //Each op in a multi-op must have the same zxid!\n                long zxid = zks.getNextZxid();\n                KeeperException ke = null;\n\n                //Store off current pending change records in case we need to rollback\n                Map<String, ChangeRecord> pendingChanges = getPendingChanges(multiRequest);\n\n                for(Op op: multiRequest) {\n                    Record subrequest = op.toRequestRecord();\n                    int type;\n                    Record txn;\n\n                    /* If we've already failed one of the ops, don't bother\n                     * trying the rest as we know it's going to fail and it\n                     * would be confusing in the logfiles.\n                     */\n                    if (ke != null) {\n                        type = OpCode.error;\n                        txn = new ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());\n                    }\n\n                    /* Prep the request and convert to a Txn */\n                    else {\n                        try {\n                            pRequest2Txn(op.getType(), zxid, request, subrequest, false);\n                            type = request.getHdr().getType();\n                            txn = request.getTxn();\n                        } catch (KeeperException e) {\n                            ke = e;\n                            type = OpCode.error;\n                            txn = new ErrorTxn(e.code().intValue());\n\n                            if (e.code().intValue() > Code.APIERROR.intValue()) {\n                                LOG.info(\"Got user-level KeeperException when processing {} aborting\" +\n                                        \" remaining multi ops. Error Path:{} Error:{}\",\n                                        request.toString(), e.getPath(), e.getMessage());\n                            }\n\n                            request.setException(e);\n\n                            /* Rollback change records from failed multi-op */\n                            rollbackPendingChanges(zxid, pendingChanges);\n                        }\n                    }\n\n                    //FIXME: I don't want to have to serialize it here and then\n                    //       immediately deserialize in next processor. But I'm\n                    //       not sure how else to get the txn stored into our list.\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                    txn.serialize(boa, \"request\") ;\n                    ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n                    txns.add(new Txn(type, bb.array()));\n                }\n\n                request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,\n                        Time.currentWallTime(), request.type));\n                request.setTxn(new MultiTxn(txns));\n\n                break;\n\n            //create/close session don't require request record\n            case OpCode.createSession:\n            case OpCode.closeSession:\n                if (!request.isLocalSession()) {\n                    pRequest2Txn(request.type, zks.getNextZxid(), request,\n                                 null, true);\n                }\n                break;\n\n            //All the rest don't need to create a Txn - just verify session\n            case OpCode.sync:\n            case OpCode.exists:\n            case OpCode.getData:\n            case OpCode.getACL:\n            case OpCode.getChildren:\n            case OpCode.getChildren2:\n            case OpCode.ping:\n            case OpCode.setWatches:\n            case OpCode.checkWatches:\n            case OpCode.removeWatches:\n                zks.sessionTracker.checkSession(request.sessionId,\n                        request.getOwner());\n                break;\n            default:\n                LOG.warn(\"unknown type \" + request.type);\n                break;\n            }\n        } catch (KeeperException e) {\n            if (request.getHdr() != null) {\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(e.code().intValue()));\n            }\n\n            if (e.code().intValue() > Code.APIERROR.intValue()) {\n                LOG.info(\"Got user-level KeeperException when processing {} Error Path:{} Error:{}\",\n                        request.toString(), e.getPath(), e.getMessage());\n            }\n            request.setException(e);\n        } catch (Exception e) {\n            // log at error level as we are returning a marshalling\n            // error to the user\n            LOG.error(\"Failed to process \" + request, e);\n\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            if(bb != null){\n                bb.rewind();\n                while (bb.hasRemaining()) {\n                    sb.append(Integer.toHexString(bb.get() & 0xff));\n                }\n            } else {\n                sb.append(\"request buffer is null\");\n            }\n\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            if (request.getHdr() != null) {\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));\n            }\n        }\n        request.zxid = zks.getZxid();\n        nextProcessor.processRequest(request);\n    }\n\n```\n\nrun函数是对Thread类run函数的重写，其核心逻辑相对简单，即不断从队列中取出request进行处理，其会调用pRequest函数。\n\n\n`pRequest`会确定请求类型，并根据请求类型不同生成不同的请求对象，然后调用`pRequest2Txn`函数。\n\n`pRequest2Txn`会根据不同的请求类型进行不同的验证，如对创建节点而言，其会进行会话验证，ACL列表验证，节点路径验证及判断创建节点的类型（顺序节点、临时节点等）而进行不同操作，同时还会使父节点的子节点数目加1，之后会再调用`addChangeRecord`函数将ChangeRecord添加至ZooKeeperServer的outstandingChanges和outstandingChangesForPath中。\n\n在处理完后，交给下一个处理链来处理request。\n\n### 5.2 SyncRequestProcessor\n\n```java\n    public void processRequest(Request request) {\n        // request.addRQRec(\">sync\");\n        queuedRequests.add(request);\n    }\n```\n\n`SyncRequestProcessor`同样将请求放入队列来异步处理。\n\n```java\n    @Override\n    public void run() {\n        try {\n            int logCount = 0;\n\n            // we do this in an attempt to ensure that not all of the servers\n            // in the ensemble take a snapshot at the same time\n            // 确保所有的服务器在同一时间不是使用的同一个快照\n            int randRoll = r.nextInt(snapCount/2);\n            while (true) {\n                Request si = null;\n                if (toFlush.isEmpty()) {\n                    //如果待刷新的队列为空，用take方法，会阻塞\n                    si = queuedRequests.take();\n                } else {\n                    //如果待刷新的队列不为空，用poll方法，如果队列里面没有内容，返回null。\n                    //如果返回null就刷新流到硬盘，否则继续处理请求。可以理解为空闲的时候flush\n                    si = queuedRequests.poll();\n                    if (si == null) {\n                        flush(toFlush);\n                        continue;\n                    }\n                }\n                if (si == requestOfDeath) {\n                    break;\n                }\n                if (si != null) {\n                    // 将请求添加至日志文件，只有事务性请求返回true\n                    if (zks.getZKDatabase().append(si)) {\n                        logCount++;\n                        //文件过大则roll日志文件，并创建线程处理快照。\n                        if (logCount > (snapCount / 2 + randRoll)) {\n                            randRoll = r.nextInt(snapCount/2);\n                            // roll the log\n                            zks.getZKDatabase().rollLog();\n                            // take a snapshot\n                            if (snapInProcess != null && snapInProcess.isAlive()) {\n                                LOG.warn(\"Too busy to snap, skipping\");\n                            } else {\n                                snapInProcess = new ZooKeeperThread(\"Snapshot Thread\") {\n                                        public void run() {\n                                            try {\n                                                zks.takeSnapshot();\n                                            } catch(Exception e) {\n                                                LOG.warn(\"Unexpected exception\", e);\n                                            }\n                                        }\n                                    };\n                                snapInProcess.start();\n                            }\n                            logCount = 0;\n                        }\n                    } else if (toFlush.isEmpty()) {\n                        // optimization for read heavy workloads\n                        // iff this is a read, and there are no pending\n                        // flushes (writes), then just pass this to the next\n                        // processor\n                        //查看此时toFlush是否为空，如果为空，说明近段时间读多写少，直接响应\n                        if (nextProcessor != null) {\n                            nextProcessor.processRequest(si);\n                            if (nextProcessor instanceof Flushable) {\n                                ((Flushable)nextProcessor).flush();\n                            }\n                        }\n                        continue;\n                    }\n                    toFlush.add(si);\n                    if (toFlush.size() > 1000) {\n                        flush(toFlush);\n                    }\n                }\n            }\n        } catch (Throwable t) {\n            handleException(this.getName(), t);\n        } finally{\n            running = false;\n        }\n        LOG.info(\"SyncRequestProcessor exited!\");\n    }\n```\n\n```java\n    private void flush(LinkedList<Request> toFlush)\n        throws IOException, RequestProcessorException\n    {\n        if (toFlush.isEmpty())\n            return;\n        //刷新磁盘\n        zks.getZKDatabase().commit();\n        while (!toFlush.isEmpty()) {\n        //将请求交给下一个处理器处理\n            Request i = toFlush.remove();\n            if (nextProcessor != null) {\n                nextProcessor.processRequest(i);\n            }\n        }\n        if (nextProcessor != null && nextProcessor instanceof Flushable) {\n            ((Flushable)nextProcessor).flush();\n        }\n    }\n```\n\n`SyncRequestProcessor`主要作用包含将事务性请求刷新到磁盘，并且对请求进行快照处理。\n\n\n### 5.3 FinalRequestProcessor\n\n`FinalRequestProcessor`主要是对DataTree的操作，先不写了。\n","slug":"2019-08-20-zookeeper-单机流程3.5.5","published":1,"updated":"2019-08-20T13:07:00.875Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a700081fythq5m5kh6","content":"<p>[toc]</p>\n<h1 id=\"zookeeper-单机流程3-5-5\"><a href=\"#zookeeper-单机流程3-5-5\" class=\"headerlink\" title=\"zookeeper 单机流程3.5.5\"></a>zookeeper 单机流程3.5.5</h1><p>在<code>ZooKeeperServerMain</code>的启动中，会启动<code>NIOServerCnxnFactory</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class=\"line\">cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">cnxnFactory.startup(zkServer);</span><br></pre></td></tr></table></figure>\n<p><code>ServerCnxnFactory.createFactory</code>默认创建<code>NIOServerCnxnFactory</code>，首先调用<code>configure</code>方法，然后调用<code>startup</code>方法。</p>\n<h2 id=\"1-configure\"><a href=\"#1-configure\" class=\"headerlink\" title=\"1.configure\"></a>1.configure</h2><p>首先看<code>NIOServerCnxnFactory.configure</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(InetSocketAddress addr, <span class=\"keyword\">int</span> maxcc, <span class=\"keyword\">boolean</span> secure)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (secure) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"SSL isn't supported in NIOServerCnxn\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//配置sasl，安全相关的，暂时忽略。</span></span><br><span class=\"line\">    configureSaslLogin();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从名字看是最大客户端连接数，默认60</span></span><br><span class=\"line\">    maxClientCnxns = maxcc;</span><br><span class=\"line\">    <span class=\"comment\">//session过期时间，先从System Property获取数值，没有的话默认10000，第一次知道Integer还有这样的方法。</span></span><br><span class=\"line\">    sessionlessCnxnTimeout = Integer.getInteger(</span><br><span class=\"line\">        ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    <span class=\"comment\">// We also use the sessionlessCnxnTimeout as expiring interval for</span></span><br><span class=\"line\">    <span class=\"comment\">// cnxnExpiryQueue. These don't need to be the same, but the expiring</span></span><br><span class=\"line\">    <span class=\"comment\">// interval passed into the ExpiryQueue() constructor below should be</span></span><br><span class=\"line\">    <span class=\"comment\">// less than or equal to the timeout.</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化队列和线程，从名字看都是跟过期时间相关的。</span></span><br><span class=\"line\">    cnxnExpiryQueue =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ExpiryQueue&lt;NIOServerCnxn&gt;(sessionlessCnxnTimeout);</span><br><span class=\"line\">    expirerThread = <span class=\"keyword\">new</span> ConnectionExpirerThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取核数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> numCores = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">    <span class=\"comment\">// 32 cores sweet spot seems to be 4 selector threads</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化selector线程，如果32位核数的话是4个线程，不知道为什么要用这么多线程，后面再看。</span></span><br><span class=\"line\">    numSelectorThreads = Integer.getInteger(</span><br><span class=\"line\">        ZOOKEEPER_NIO_NUM_SELECTOR_THREADS,</span><br><span class=\"line\">        Math.max((<span class=\"keyword\">int</span>) Math.sqrt((<span class=\"keyword\">float</span>) numCores/<span class=\"number\">2</span>), <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numSelectorThreads &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"numSelectorThreads must be at least 1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//worker线程数=核数*2</span></span><br><span class=\"line\">    numWorkerThreads = Integer.getInteger(</span><br><span class=\"line\">        ZOOKEEPER_NIO_NUM_WORKER_THREADS, <span class=\"number\">2</span> * numCores);</span><br><span class=\"line\">    workerShutdownTimeoutMS = Long.getLong(</span><br><span class=\"line\">        ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT, <span class=\"number\">5000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Configuring NIO connection handler with \"</span></span><br><span class=\"line\">             + (sessionlessCnxnTimeout/<span class=\"number\">1000</span>) + <span class=\"string\">\"s sessionless connection\"</span></span><br><span class=\"line\">             + <span class=\"string\">\" timeout, \"</span> + numSelectorThreads + <span class=\"string\">\" selector thread(s), \"</span></span><br><span class=\"line\">             + (numWorkerThreads &gt; <span class=\"number\">0</span> ? numWorkerThreads : <span class=\"string\">\"no\"</span>)</span><br><span class=\"line\">             + <span class=\"string\">\" worker threads, and \"</span></span><br><span class=\"line\">             + (directBufferBytes == <span class=\"number\">0</span> ? <span class=\"string\">\"gathered writes.\"</span> :</span><br><span class=\"line\">                (<span class=\"string\">\"\"</span> + (directBufferBytes/<span class=\"number\">1024</span>) + <span class=\"string\">\" kB direct buffers.\"</span>)));</span><br><span class=\"line\">    <span class=\"comment\">//初始化selectorThreads</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;numSelectorThreads; ++i) &#123;</span><br><span class=\"line\">        selectorThreads.add(<span class=\"keyword\">new</span> SelectorThread(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建2181端口服务</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ss = ServerSocketChannel.open();</span><br><span class=\"line\">    ss.socket().setReuseAddress(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"binding to port \"</span> + addr);</span><br><span class=\"line\">    ss.socket().bind(addr);</span><br><span class=\"line\">    ss.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个AcceptThread线程</span></span><br><span class=\"line\">    acceptThread = <span class=\"keyword\">new</span> AcceptThread(ss, addr, selectorThreads);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>configure</code>方法主要做的几件事情：</p>\n<ol>\n<li>创建<code>ExpiryQueue</code>和<code>ConnectionExpirerThread</code>。</li>\n<li>创建<code>SelectorThread</code>。</li>\n<li>监听2181端口。</li>\n<li>创建<code>AcceptThread</code>。</li>\n</ol>\n<h3 id=\"1-1-ExpiryQueue\"><a href=\"#1-1-ExpiryQueue\" class=\"headerlink\" title=\"1.1 ExpiryQueue\"></a>1.1 ExpiryQueue</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpiryQueue</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//NIOServerCnxn和过期时间的map</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentHashMap&lt;E, Long&gt; elemMap =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;E, Long&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The maximum number of buckets is equal to max timeout/expirationInterval,</span></span><br><span class=\"line\"><span class=\"comment\">     * so the expirationInterval should not be too small compared to the</span></span><br><span class=\"line\"><span class=\"comment\">     * max timeout that this expiry queue needs to maintain.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">//过期时间和Set&lt;NIOServerCnxn&gt;的map</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentHashMap&lt;Long, Set&lt;E&gt;&gt; expiryMap =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;Long, Set&lt;E&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//下次过期时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicLong nextExpirationTime = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\">    <span class=\"comment\">//过期间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> expirationInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExpiryQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> expirationInterval)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.expirationInterval = expirationInterval;</span><br><span class=\"line\">        nextExpirationTime.set(roundToNextInterval(Time.currentElapsedTime()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">roundToNextInterval</span><span class=\"params\">(<span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (time / expirationInterval + <span class=\"number\">1</span>) * expirationInterval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//更新元素的过期时间</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">update</span><span class=\"params\">(E elem, <span class=\"keyword\">int</span> timeout)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取元素的过期时间</span></span><br><span class=\"line\">        Long prevExpiryTime = elemMap.get(elem);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> now = Time.currentElapsedTime();</span><br><span class=\"line\">        <span class=\"comment\">//计算新的过期时间，将timeout按过期间隔取整</span></span><br><span class=\"line\">        Long newExpiryTime = roundToNextInterval(now + timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newExpiryTime.equals(prevExpiryTime)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No change, so nothing to update</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//下面是将过期时间和elem存到expiryMap和elemMap中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// First add the elem to the new expiry time bucket in expiryMap.</span></span><br><span class=\"line\">        Set&lt;E&gt; set = expiryMap.get(newExpiryTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Construct a ConcurrentHashSet using a ConcurrentHashMap</span></span><br><span class=\"line\">            set = Collections.newSetFromMap(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConcurrentHashMap&lt;E, Boolean&gt;());</span><br><span class=\"line\">            <span class=\"comment\">// Put the new set in the map, but only if another thread</span></span><br><span class=\"line\">            <span class=\"comment\">// hasn't beaten us to it</span></span><br><span class=\"line\">            Set&lt;E&gt; existingSet = expiryMap.putIfAbsent(newExpiryTime, set);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (existingSet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                set = existingSet;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set.add(elem);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Map the elem to the new expiry time. If a different previous</span></span><br><span class=\"line\">        <span class=\"comment\">// mapping was present, clean up the previous expiry bucket.</span></span><br><span class=\"line\">        prevExpiryTime = elemMap.put(elem, newExpiryTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prevExpiryTime != <span class=\"keyword\">null</span> &amp;&amp; !newExpiryTime.equals(prevExpiryTime)) &#123;</span><br><span class=\"line\">            Set&lt;E&gt; prevSet = expiryMap.get(prevExpiryTime);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prevSet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                prevSet.remove(elem);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newExpiryTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;E&gt; <span class=\"title\">poll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前时间获取过期的元素并remove</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> now = Time.currentElapsedTime();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> expirationTime = nextExpirationTime.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now &lt; expirationTime) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptySet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;E&gt; set = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> newExpirationTime = expirationTime + expirationInterval;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextExpirationTime.compareAndSet(</span><br><span class=\"line\">              expirationTime, newExpirationTime)) &#123;</span><br><span class=\"line\">            set = expiryMap.remove(expirationTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptySet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析<code>ExpiryQueue</code>中最主要的<code>update</code>和<code>poll</code>函数可以看到<code>ExpiryQueue</code>主要作用是向外输出到达过期时间的<code>NIOServerCnxn</code>。</p>\n<h3 id=\"1-2-ConnectionExpirerThread\"><a href=\"#1-2-ConnectionExpirerThread\" class=\"headerlink\" title=\"1.2 ConnectionExpirerThread\"></a>1.2 ConnectionExpirerThread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionExpirerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZooKeeperThread</span> </span>&#123;</span><br><span class=\"line\">    ConnectionExpirerThread() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ConnnectionExpirer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopped) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> waitTime = cnxnExpiryQueue.getWaitTime();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (waitTime &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    Thread.sleep(waitTime);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (NIOServerCnxn conn : cnxnExpiryQueue.poll()) &#123;</span><br><span class=\"line\">                    conn.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              LOG.info(<span class=\"string\">\"ConnnectionExpirerThread interrupted\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory</span><br><span class=\"line\">            .getLogger(ZooKeeperThread<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UncaughtExceptionHandler uncaughtExceptionalHandler = <span class=\"keyword\">new</span> UncaughtExceptionHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class=\"line\">            handleException(t.getName(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZooKeeperThread</span><span class=\"params\">(String threadName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(threadName);</span><br><span class=\"line\">        setUncaughtExceptionHandler(uncaughtExceptionalHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This will be used by the uncaught exception handler and just log a</span></span><br><span class=\"line\"><span class=\"comment\">     * warning message and return.</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> thName</span></span><br><span class=\"line\"><span class=\"comment\">     *            - thread name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\">     *            - exception object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">handleException</span><span class=\"params\">(String thName, Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Exception occurred from thread &#123;&#125;\"</span>, thName, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ConnectionExpirerThread</code>是<code>NIOServerCnxnFactory</code>的子类，继承自<code>ZooKeeperThread</code>。<code>ZooKeeperThread</code>主要就是设置了线程名和线程的<code>UncaughtExceptionHandler</code>。<br><code>ConnectionExpirerThread</code>的功能是从<code>cnxnExpiryQueue</code>中获取过期的<code>NIOServerCnxn</code>并<code>close</code>。</p>\n<h3 id=\"1-1-3-AcceptThread\"><a href=\"#1-1-3-AcceptThread\" class=\"headerlink\" title=\"1.1.3 AcceptThread\"></a>1.1.3 AcceptThread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AcceptThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSelectThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ServerSocketChannel acceptSocket;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SelectionKey acceptKey;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RateLogger acceptErrorLogger = <span class=\"keyword\">new</span> RateLogger(LOG);</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Collection&lt;SelectorThread&gt; selectorThreads;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Iterator&lt;SelectorThread&gt; selectorIterator;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> reconfiguring = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AcceptThread</span><span class=\"params\">(ServerSocketChannel ss, InetSocketAddress addr,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                Set&lt;SelectorThread&gt; selectorThreads)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"NIOServerCxnFactory.AcceptThread:\"</span> + addr);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.acceptSocket = ss;</span><br><span class=\"line\">            <span class=\"comment\">// 注册OP_ACCEPT</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.acceptKey =</span><br><span class=\"line\">                acceptSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.selectorThreads = Collections.unmodifiableList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ArrayList&lt;SelectorThread&gt;(selectorThreads));</span><br><span class=\"line\">            selectorIterator = <span class=\"keyword\">this</span>.selectorThreads.iterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stopped &amp;&amp; !acceptSocket.socket().isClosed()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        select();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Ignoring unexpected runtime exception\"</span>, e);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Ignoring unexpected exception\"</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                closeSelector();</span><br><span class=\"line\">                <span class=\"comment\">// This will wake up the selector threads, and tell the</span></span><br><span class=\"line\">                <span class=\"comment\">// worker thread pool to begin shutdown.</span></span><br><span class=\"line\">            \t<span class=\"keyword\">if</span> (!reconfiguring) &#123;                    </span><br><span class=\"line\">                    NIOServerCnxnFactory.<span class=\"keyword\">this</span>.stop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"accept thread exitted run method\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                selector.select();</span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; selectedKeys =</span><br><span class=\"line\">                    selector.selectedKeys().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stopped &amp;&amp; selectedKeys.hasNext()) &#123;</span><br><span class=\"line\">                    SelectionKey key = selectedKeys.next();</span><br><span class=\"line\">                    selectedKeys.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果有accept的连接，调用doAccept方法</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!doAccept()) &#123;</span><br><span class=\"line\">                            pauseAccept(<span class=\"number\">10</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Unexpected ops in accept select \"</span></span><br><span class=\"line\">                                 + key.readyOps());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Ignoring IOException while selecting\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doAccept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> accepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            SocketChannel sc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sc = acceptSocket.accept();</span><br><span class=\"line\">                accepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                InetAddress ia = sc.socket().getInetAddress();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cnxncount = getClientCnxnCount(ia);</span><br><span class=\"line\">                <span class=\"comment\">//判断连接上限</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxClientCnxns &gt; <span class=\"number\">0</span> &amp;&amp; cnxncount &gt;= maxClientCnxns)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Too many connections from \"</span> + ia</span><br><span class=\"line\">                                          + <span class=\"string\">\" - max is \"</span> + maxClientCnxns );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                LOG.debug(<span class=\"string\">\"Accepted socket connection from \"</span></span><br><span class=\"line\">                         + sc.socket().getRemoteSocketAddress());</span><br><span class=\"line\">                sc.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Round-robin assign this connection to a selector thread</span></span><br><span class=\"line\">                <span class=\"comment\">//从迭代器里面获取一个SelectorThread，如果没有的话，重新初始化迭代器然后获取。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!selectorIterator.hasNext()) &#123;</span><br><span class=\"line\">                    selectorIterator = selectorThreads.iterator();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                SelectorThread selectorThread = selectorIterator.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!selectorThread.addAcceptedConnection(sc)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(</span><br><span class=\"line\">                        <span class=\"string\">\"Unable to add connection to selector queue\"</span></span><br><span class=\"line\">                        + (stopped ? <span class=\"string\">\" (shutdown in progress)\"</span> : <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                acceptErrorLogger.flush();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// accept, maxClientCnxns, configureBlocking</span></span><br><span class=\"line\">                acceptErrorLogger.rateLimitLog(</span><br><span class=\"line\">                    <span class=\"string\">\"Error accepting new connection: \"</span> + e.getMessage());</span><br><span class=\"line\">                fastCloseSock(sc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> accepted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AcceptThread</code>做的主要事情就是accept连接，然后分配给<code>SelectorThread</code>。</p>\n<h3 id=\"1-1-4-SelectorThread\"><a href=\"#1-1-4-SelectorThread\" class=\"headerlink\" title=\"1.1.4 SelectorThread\"></a>1.1.4 SelectorThread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectorThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSelectThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Queue&lt;SocketChannel&gt; acceptedQueue;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Queue&lt;SelectionKey&gt; updateQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SelectorThread</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"NIOServerCxnFactory.SelectorThread-\"</span> + id);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">            acceptedQueue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;SocketChannel&gt;();</span><br><span class=\"line\">            updateQueue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;SelectionKey&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAcceptedConnection</span><span class=\"params\">(SocketChannel accepted)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped || !acceptedQueue.offer(accepted)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            wakeupSelector();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addInterestOpsUpdateRequest</span><span class=\"params\">(SelectionKey sk)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped || !updateQueue.offer(sk)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            wakeupSelector();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SelectorThread</code>同样继承<code>AbstractSelectThread</code>，有两个队列<code>acceptedQueue</code>和<code>updateQueue</code>，提供两个方法往队列里塞数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//运行状况下死循环执行这3个方法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stopped) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                select();</span><br><span class=\"line\">                processAcceptedConnections();</span><br><span class=\"line\">                processInterestOpsUpdateRequests();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Ignoring unexpected runtime exception\"</span>, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Ignoring unexpected exception\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果跳出循环，关闭所有连接。</span></span><br><span class=\"line\">        <span class=\"comment\">// Close connections still pending on the selector. Any others</span></span><br><span class=\"line\">        <span class=\"comment\">// with in-flight work, let drain out of the work queue.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class=\"line\">            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnxn.isSelectable()) &#123;</span><br><span class=\"line\">                cnxn.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cleanupSelectionKey(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SocketChannel accepted;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((accepted = acceptedQueue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fastCloseSock(accepted);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        updateQueue.clear();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        closeSelector();</span><br><span class=\"line\">        <span class=\"comment\">// This will wake up the accept thread and the other selector</span></span><br><span class=\"line\">        <span class=\"comment\">// threads, and tell the worker thread pool to begin shutdown.</span></span><br><span class=\"line\">        NIOServerCnxnFactory.<span class=\"keyword\">this</span>.stop();</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"selector thread exitted run method\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;SelectionKey&gt; selected = selector.selectedKeys();</span><br><span class=\"line\">        ArrayList&lt;SelectionKey&gt; selectedList =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayList&lt;SelectionKey&gt;(selected);</span><br><span class=\"line\">        Collections.shuffle(selectedList);</span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; selectedKeys = selectedList.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stopped &amp;&amp; selectedKeys.hasNext()) &#123;</span><br><span class=\"line\">            SelectionKey key = selectedKeys.next();</span><br><span class=\"line\">            selected.remove(key);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">                cleanupSelectionKey(key);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//处理readable和writable的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.isReadable() || key.isWritable()) &#123;</span><br><span class=\"line\">                handleIO(key);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Unexpected ops in select \"</span> + key.readyOps());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Ignoring IOException while selecting\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Schedule I/O for processing on the connection associated with</span></span><br><span class=\"line\"><span class=\"comment\"> * the given SelectionKey. If a worker thread pool is not being used,</span></span><br><span class=\"line\"><span class=\"comment\"> * I/O is run directly by this thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleIO</span><span class=\"params\">(SelectionKey key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//封装workRequest，交由workerPool处理。</span></span><br><span class=\"line\">    IOWorkRequest workRequest = <span class=\"keyword\">new</span> IOWorkRequest(<span class=\"keyword\">this</span>, key);</span><br><span class=\"line\">    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Stop selecting this key while processing on its</span></span><br><span class=\"line\">    <span class=\"comment\">// connection</span></span><br><span class=\"line\">    <span class=\"comment\">//在处理过程中，停止注册SelectionKey</span></span><br><span class=\"line\">    cnxn.disableSelectable();</span><br><span class=\"line\">    key.interestOps(<span class=\"number\">0</span>);</span><br><span class=\"line\">    touchCnxn(cnxn);</span><br><span class=\"line\">    workerPool.schedule(workRequest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Iterate over the queue of accepted connections that have been</span></span><br><span class=\"line\"><span class=\"comment\"> * assigned to this thread but not yet placed on the selector.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processAcceptedConnections</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从acceptedQueue中取出SelectionKey，注册READ事件</span></span><br><span class=\"line\">    SocketChannel accepted;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stopped &amp;&amp; (accepted = acceptedQueue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        SelectionKey key = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            key = accepted.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">            NIOServerCnxn cnxn = createConnection(accepted, key, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">            key.attach(cnxn);</span><br><span class=\"line\">            addCnxn(cnxn);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// register, createConnection</span></span><br><span class=\"line\">            cleanupSelectionKey(key);</span><br><span class=\"line\">            fastCloseSock(accepted);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Iterate over the queue of connections ready to resume selection,</span></span><br><span class=\"line\"><span class=\"comment\"> * and restore their interest ops selection mask.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processInterestOpsUpdateRequests</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从updateQueue中取出SelectionKey，注册READ或WRITE事件</span></span><br><span class=\"line\">    SelectionKey key;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stopped &amp;&amp; (key = updateQueue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">            cleanupSelectionKey(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnxn.isSelectable()) &#123;</span><br><span class=\"line\">            key.interestOps(cnxn.getInterestOps());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SelectorThread</code>的功能就是注册WRITE和READ事件的连接，并处理IO。</p>\n<h2 id=\"2-start\"><a href=\"#2-start\" class=\"headerlink\" title=\"2.start\"></a>2.start</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stopped = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerPool == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        workerPool = <span class=\"keyword\">new</span> WorkerService(</span><br><span class=\"line\">            <span class=\"string\">\"NIOWorker\"</span>, numWorkerThreads, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(SelectorThread thread : selectorThreads) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread.getState() == Thread.State.NEW) &#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ensure thread is started once and only once</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (acceptThread.getState() == Thread.State.NEW) &#123;</span><br><span class=\"line\">        acceptThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expirerThread.getState() == Thread.State.NEW) &#123;</span><br><span class=\"line\">        expirerThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NIOServerCnxnFactory</code>的start方法，初始化<code>WorkerService</code>，并启动<code>SelectorThread</code>、<code>acceptThread</code>，<code>expirerThread</code>线程。</p>\n<h3 id=\"2-1-WorkerService\"><a href=\"#2-1-WorkerService\" class=\"headerlink\" title=\"2.1 WorkerService\"></a>2.1 WorkerService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;ExecutorService&gt; workers =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ArrayList&lt;ExecutorService&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerService</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> numThreads,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"keyword\">boolean</span> useAssignableThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadNamePrefix = (name == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span> : name) + <span class=\"string\">\"Thread\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.numWorkerThreads = numThreads;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadsAreAssignable = useAssignableThreads;</span><br><span class=\"line\">    start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numWorkerThreads &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (threadsAreAssignable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= numWorkerThreads; ++i) &#123;</span><br><span class=\"line\">                workers.add(Executors.newFixedThreadPool(</span><br><span class=\"line\">                    <span class=\"number\">1</span>, <span class=\"keyword\">new</span> DaemonThreadFactory(threadNamePrefix, i)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            workers.add(Executors.newFixedThreadPool(</span><br><span class=\"line\">                numWorkerThreads, <span class=\"keyword\">new</span> DaemonThreadFactory(threadNamePrefix)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stopped = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>WorkerService</code>的初始化，主要是初始化了线程池<code>workers</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkRequest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Must be implemented. Is called when the work request is run.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * (Optional) If implemented, is called if the service is stopped</span></span><br><span class=\"line\"><span class=\"comment\">     * or unable to schedule the request.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内部类<code>WorkRequest</code>，提供了<code>doWork</code>和<code>cleanup</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledWorkRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WorkRequest workRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    ScheduledWorkRequest(WorkRequest workRequest) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workRequest = workRequest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Check if stopped while request was on queue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">                workRequest.cleanup();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            workRequest.doWork();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">            workRequest.cleanup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内部类<code>ScheduledWorkRequest</code>，继承<code>Runnable</code>，<code>run</code>方法中执行<code>workRequest.doWork</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(WorkRequest workRequest, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">        workRequest.cleanup();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ScheduledWorkRequest scheduledWorkRequest =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ScheduledWorkRequest(workRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we have a worker thread pool, use that; otherwise, do the work</span></span><br><span class=\"line\">    <span class=\"comment\">// directly.</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = workers.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// make sure to map negative ids as well to [0, size-1]</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> workerNum = ((<span class=\"keyword\">int</span>) (id % size) + size) % size;</span><br><span class=\"line\">            ExecutorService worker = workers.get(workerNum);</span><br><span class=\"line\">            worker.execute(scheduledWorkRequest);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException e) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"ExecutorService rejected execution\"</span>, e);</span><br><span class=\"line\">            workRequest.cleanup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// When there is no worker thread pool, do the work directly</span></span><br><span class=\"line\">        <span class=\"comment\">// and wait for its completion</span></span><br><span class=\"line\">        scheduledWorkRequest.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最主要的方法<code>schedule</code>，将<code>workRequest</code>交由线程池执行，如果线程池满，由当前线程执行。</p>\n<h3 id=\"2-2-IOWorkRequest\"><a href=\"#2-2-IOWorkRequest\" class=\"headerlink\" title=\"2.2 IOWorkRequest\"></a>2.2 IOWorkRequest</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOWorkRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">WorkerService</span>.<span class=\"title\">WorkRequest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SelectorThread selectorThread;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SelectionKey key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> NIOServerCnxn cnxn;</span><br><span class=\"line\"></span><br><span class=\"line\">    IOWorkRequest(SelectorThread selectorThread, SelectionKey key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selectorThread = selectorThread;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">            selectorThread.cleanupSelectionKey(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key.isReadable() || key.isWritable()) &#123;</span><br><span class=\"line\">            cnxn.doIO(key);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Check if we shutdown or doIO() closed this connection</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">                cnxn.close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">                selectorThread.cleanupSelectionKey(key);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//更新过期时间</span></span><br><span class=\"line\">            touchCnxn(cnxn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Mark this connection as once again ready for selection</span></span><br><span class=\"line\">        cnxn.enableSelectable();</span><br><span class=\"line\">        <span class=\"comment\">// Push an update request on the queue to resume selecting</span></span><br><span class=\"line\">        <span class=\"comment\">// on the current set of interest ops, which may have changed</span></span><br><span class=\"line\">        <span class=\"comment\">// as a result of the I/O operations we just performed.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!selectorThread.addInterestOpsUpdateRequest(key)) &#123;</span><br><span class=\"line\">            cnxn.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cnxn.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IOWorkRequest</code>是<code>NIOServerCnxnFactory</code>的内部类,主要是调用<code>org.apache.zookeeper.server.NIOServerCnxn#doIO</code>方法来处理IO。</p>\n<h2 id=\"3-NIOServerCnxn\"><a href=\"#3-NIOServerCnxn\" class=\"headerlink\" title=\"3. NIOServerCnxn\"></a>3. NIOServerCnxn</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//lenBuffer 4个字节，用于读取长度</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ByteBuffer lenBuffer = ByteBuffer.allocate(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//incomingBuffer默认等于lenBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ByteBuffer incomingBuffer = lenBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doIO</span><span class=\"params\">(SelectionKey k)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSocketOpen() == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"trying to do i/o on a null socket for session:0x\"</span></span><br><span class=\"line\">                     + Long.toHexString(sessionId));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k.isReadable()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//一开始incomingBuffer=lenBuffer</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> rc = sock.read(incomingBuffer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EndOfStreamException(</span><br><span class=\"line\">                        <span class=\"string\">\"Unable to read additional data from client sessionid 0x\"</span></span><br><span class=\"line\">                        + Long.toHexString(sessionId)</span><br><span class=\"line\">                        + <span class=\"string\">\", likely client has closed socket\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//incomingBuffer读满，也就是读取了4个字节的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (incomingBuffer.remaining() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isPayload;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (incomingBuffer == lenBuffer) &#123; <span class=\"comment\">// start of next request</span></span><br><span class=\"line\">                    incomingBuffer.flip();</span><br><span class=\"line\">                    <span class=\"comment\">//读取长度，incomingBuffer重新赋值</span></span><br><span class=\"line\">                    isPayload = readLength(k);</span><br><span class=\"line\">                    incomingBuffer.clear();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// continuation</span></span><br><span class=\"line\">                    isPayload = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isPayload) &#123; <span class=\"comment\">// not the case for 4letterword</span></span><br><span class=\"line\">                    <span class=\"comment\">//处理payload</span></span><br><span class=\"line\">                    readPayload();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// four letter words take care</span></span><br><span class=\"line\">                    <span class=\"comment\">// need not do anything else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k.isWritable()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//write 暂时跳过</span></span><br><span class=\"line\">            handleWrite(k);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!initialized &amp;&amp; !getReadInterest() &amp;&amp; !getWriteInterest()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CloseRequestException(<span class=\"string\">\"responded to info probe\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CancelledKeyException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"CancelledKeyException causing close of session 0x\"</span></span><br><span class=\"line\">                 + Long.toHexString(sessionId));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"CancelledKeyException stack trace\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloseRequestException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// expecting close to log session closure</span></span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (EndOfStreamException e) &#123;</span><br><span class=\"line\">        LOG.warn(e.getMessage());</span><br><span class=\"line\">        <span class=\"comment\">// expecting close to log session closure</span></span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Exception causing close of session 0x\"</span></span><br><span class=\"line\">                 + Long.toHexString(sessionId) + <span class=\"string\">\": \"</span> + e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"IOException stack trace\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">readLength</span><span class=\"params\">(SelectionKey k)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取长度，重新新建incomingBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = lenBuffer.getInt();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!initialized &amp;&amp; checkFourLetterWord(sk, len)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">0</span> || len &gt; BinaryInputArchive.maxBuffer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Len error \"</span> + len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isZKServerRunning()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"ZooKeeperServer not running\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    incomingBuffer = ByteBuffer.allocate(len);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readPayload</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (incomingBuffer.remaining() != <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//读取payload</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> rc = sock.read(incomingBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EndOfStreamException(</span><br><span class=\"line\">                    <span class=\"string\">\"Unable to read additional data from client sessionid 0x\"</span></span><br><span class=\"line\">                    + Long.toHexString(sessionId)</span><br><span class=\"line\">                    + <span class=\"string\">\", likely client has closed socket\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//读满</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (incomingBuffer.remaining() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        packetReceived();</span><br><span class=\"line\">        incomingBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">            readConnectRequest();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理请求</span></span><br><span class=\"line\">            readRequest();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lenBuffer.clear();</span><br><span class=\"line\">        <span class=\"comment\">//复位incomingBuffer</span></span><br><span class=\"line\">        incomingBuffer = lenBuffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readRequest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//交由ZooKeeperServer来处理请求</span></span><br><span class=\"line\">    zkServer.processPacket(<span class=\"keyword\">this</span>, incomingBuffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NIOServerCnxn</code>的<code>doIO</code>方法，主要是处理读写数据。写数据先跳过，读数据是先读取长度，然后读取payload，最后交由<code>ZooKeeperServer</code>来处理请求。</p>\n<h2 id=\"4-ZooKeeperServer\"><a href=\"#4-ZooKeeperServer\" class=\"headerlink\" title=\"4.ZooKeeperServer\"></a>4.ZooKeeperServer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processPacket</span><span class=\"params\">(ServerCnxn cnxn, ByteBuffer incomingBuffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// We have the request, now process and setup for next</span></span><br><span class=\"line\">    InputStream bais = <span class=\"keyword\">new</span> ByteBufferInputStream(incomingBuffer);</span><br><span class=\"line\">    BinaryInputArchive bia = BinaryInputArchive.getArchive(bais);</span><br><span class=\"line\">    RequestHeader h = <span class=\"keyword\">new</span> RequestHeader();</span><br><span class=\"line\">    <span class=\"comment\">//从流里读取RequestHeader，其实就读取了2个字段，xid和type</span></span><br><span class=\"line\">    h.deserialize(bia, <span class=\"string\">\"header\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Through the magic of byte buffers, txn will not be</span></span><br><span class=\"line\">    <span class=\"comment\">// pointing</span></span><br><span class=\"line\">    <span class=\"comment\">// to the start of the txn</span></span><br><span class=\"line\">    incomingBuffer = incomingBuffer.slice();</span><br><span class=\"line\">    <span class=\"comment\">//处理auth请求，跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h.getType() == OpCode.auth) &#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"got auth packet \"</span> + cnxn.getRemoteSocketAddress());</span><br><span class=\"line\">        AuthPacket authPacket = <span class=\"keyword\">new</span> AuthPacket();</span><br><span class=\"line\">        ByteBufferInputStream.byteBuffer2Record(incomingBuffer, authPacket);</span><br><span class=\"line\">        String scheme = authPacket.getScheme();</span><br><span class=\"line\">        AuthenticationProvider ap = ProviderRegistry.getProvider(scheme);</span><br><span class=\"line\">        Code authReturn = KeeperException.Code.AUTHFAILED;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                authReturn = ap.handleAuthentication(cnxn, authPacket.getAuth());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(RuntimeException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Caught runtime exception from AuthenticationProvider: \"</span> + scheme + <span class=\"string\">\" due to \"</span> + e);</span><br><span class=\"line\">                authReturn = KeeperException.Code.AUTHFAILED;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authReturn == KeeperException.Code.OK) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">\"Authentication succeeded for scheme: \"</span> + scheme);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"auth success \"</span> + cnxn.getRemoteSocketAddress());</span><br><span class=\"line\">            ReplyHeader rh = <span class=\"keyword\">new</span> ReplyHeader(h.getXid(), <span class=\"number\">0</span>,</span><br><span class=\"line\">                    KeeperException.Code.OK.intValue());</span><br><span class=\"line\">            cnxn.sendResponse(rh, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"No authentication provider for scheme: \"</span></span><br><span class=\"line\">                        + scheme + <span class=\"string\">\" has \"</span></span><br><span class=\"line\">                        + ProviderRegistry.listProviders());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Authentication failed for scheme: \"</span> + scheme);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// send a response...</span></span><br><span class=\"line\">            ReplyHeader rh = <span class=\"keyword\">new</span> ReplyHeader(h.getXid(), <span class=\"number\">0</span>,</span><br><span class=\"line\">                    KeeperException.Code.AUTHFAILED.intValue());</span><br><span class=\"line\">            cnxn.sendResponse(rh, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// ... and close connection</span></span><br><span class=\"line\">            cnxn.sendBuffer(ServerCnxnFactory.closeConn);</span><br><span class=\"line\">            cnxn.disableRecv();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">////处理sasl请求，跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h.getType() == OpCode.sasl) &#123;</span><br><span class=\"line\">            Record rsp = processSasl(incomingBuffer,cnxn);</span><br><span class=\"line\">            ReplyHeader rh = <span class=\"keyword\">new</span> ReplyHeader(h.getXid(), <span class=\"number\">0</span>, KeeperException.Code.OK.intValue());</span><br><span class=\"line\">            cnxn.sendResponse(rh,rsp, <span class=\"string\">\"response\"</span>); <span class=\"comment\">// not sure about 3rd arg..what is it?</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//封装请求Request，调用submitRequest</span></span><br><span class=\"line\">            Request si = <span class=\"keyword\">new</span> Request(cnxn, cnxn.getSessionId(), h.getXid(),</span><br><span class=\"line\">              h.getType(), incomingBuffer, cnxn.getAuthInfo());</span><br><span class=\"line\">            si.setOwner(ServerCnxn.me);</span><br><span class=\"line\">            setLocalSessionFlag(si);</span><br><span class=\"line\">            submitRequest(si);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cnxn.incrOutstandingRequests(h);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submitRequest</span><span class=\"params\">(Request si)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果firstProcessor为空，等待初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstProcessor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Since all requests are passed to the request</span></span><br><span class=\"line\">                <span class=\"comment\">// processor it should wait for setting up the request</span></span><br><span class=\"line\">                <span class=\"comment\">// processor chain. The state will be updated to RUNNING</span></span><br><span class=\"line\">                <span class=\"comment\">// after the setup.</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (state == State.INITIAL) &#123;</span><br><span class=\"line\">                    wait(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Unexpected interruption\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstProcessor == <span class=\"keyword\">null</span> || state != State.RUNNING) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Not started\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        touch(si.cnxn);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> validpacket = Request.isValid(si.type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (validpacket) &#123;</span><br><span class=\"line\">            firstProcessor.processRequest(si);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (si.cnxn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                incInProcess();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Received packet at server of unknown type \"</span> + si.type);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> UnimplementedRequestProcessor().processRequest(si);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MissingSessionException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Dropping request: \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RequestProcessorException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unable to process request:\"</span> + e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>submitRequest</code>方法调用请求处理链来处理请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setupRequestProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RequestProcessor finalProcessor = <span class=\"keyword\">new</span> FinalRequestProcessor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    RequestProcessor syncProcessor = <span class=\"keyword\">new</span> SyncRequestProcessor(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">            finalProcessor);</span><br><span class=\"line\">    ((SyncRequestProcessor)syncProcessor).start();</span><br><span class=\"line\">    firstProcessor = <span class=\"keyword\">new</span> PrepRequestProcessor(<span class=\"keyword\">this</span>, syncProcessor);</span><br><span class=\"line\">    ((PrepRequestProcessor)firstProcessor).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从启动方法中可以看出，<code>ZooKeeperServer</code>的请求处理链是<code>PrepRequestProcessor-&gt;SyncRequestProcessor-&gt;FinalRequestProcessor</code>。</p>\n<h2 id=\"5-RequestProcessor\"><a href=\"#5-RequestProcessor\" class=\"headerlink\" title=\"5.RequestProcessor\"></a>5.RequestProcessor</h2><p>zookeeper有一堆请求处理链，其中父接口为<code>RequestProcessor</code>，框架图如下：<br><img src=\"http://ww1.sinaimg.cn/large/006tNc79ly1g64aitlnz4j30ly0kqaez.jpg\" alt=\"\"></p>\n<p>各个子类的作用列一下：</p>\n<ul>\n<li>AckRequestProcessor，将前一阶段的请求作为ACK转发给Leader。</li>\n<li>CommitProcessor，将到来的请求与本地提交的请求进行匹配，这是因为改变系统状态的本地请求的返回结果是到来的请求。</li>\n<li>FinalRequestProcessor，通常是请求处理链的最后一个处理器。</li>\n<li>FollowerRequestProcessor，将修改了系统状态的请求转发给Leader。</li>\n<li>ObserverRequestProcessor，同FollowerRequestProcessor一样，将修改了系统状态的请求转发给Leader。</li>\n<li>PrepRequestProcessor，通常是请求处理链的第一个处理器。</li>\n<li>ProposalRequestProcessor，将请求转发给AckRequestProcessor和SyncRequestProcessor。</li>\n<li>ReadOnlyRequestProcessor，是ReadOnlyZooKeeperServer请求处理链的第一个处理器，将只读请求传递给下个处理器，抛弃改变状态的请求。</li>\n<li>SendAckRequestProcessor，发送ACK请求的处理器。</li>\n<li>SyncRequestProcessor，发送Sync请求的处理器。</li>\n<li>ToBeAppliedRequestProcessor，维护toBeApplied列表，下个处理器必须是FinalRequestProcessor并且FinalRequestProcessor必须同步处理请求。</li>\n<li>UnimplementedRequestProcessor，用于管理未知请求。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RequestProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"serial\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestProcessorException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestProcessorException</span><span class=\"params\">(String msg, Throwable t)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(msg, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RequestProcessor</code>定义了2个接口和一个异常内部类。</p>\n<h3 id=\"5-1-PrepRequestProcessor\"><a href=\"#5-1-PrepRequestProcessor\" class=\"headerlink\" title=\"5.1 PrepRequestProcessor\"></a>5.1 PrepRequestProcessor</h3><p><code>PrepRequestProcessor</code>顾名思义，主要在处理链里面做一些准备工作，运行在处理链的第一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    submittedRequests.add(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>processRequest</code>方法将请求放入队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Request request = submittedRequests.take();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.type == OpCode.ping) &#123;</span><br><span class=\"line\">                traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">                ZooTrace.logRequest(LOG, traceMask, <span class=\"string\">'P'</span>, request, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Request.requestOfDeath == request) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RequestProcessorException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getCause() <span class=\"keyword\">instanceof</span> XidRolloverException) &#123;</span><br><span class=\"line\">            LOG.info(e.getCause().getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"PrepRequestProcessor exited loop!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">pRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// LOG.info(\"Prep&gt;&gt;&gt; cxid = \" + request.cxid + \" type = \" +</span></span><br><span class=\"line\">    <span class=\"comment\">// request.type + \" id = 0x\" + Long.toHexString(request.sessionId));</span></span><br><span class=\"line\">    request.setHdr(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    request.setTxn(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (request.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.createContainer:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.create:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.create2:</span><br><span class=\"line\">            CreateRequest create2Request = <span class=\"keyword\">new</span> CreateRequest();</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.createTTL:</span><br><span class=\"line\">            CreateTTLRequest createTtlRequest = <span class=\"keyword\">new</span> CreateTTLRequest();</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.deleteContainer:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.delete:</span><br><span class=\"line\">            DeleteRequest deleteRequest = <span class=\"keyword\">new</span> DeleteRequest();</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.setData:</span><br><span class=\"line\">            SetDataRequest setDataRequest = <span class=\"keyword\">new</span> SetDataRequest();                </span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.reconfig:</span><br><span class=\"line\">            ReconfigRequest reconfigRequest = <span class=\"keyword\">new</span> ReconfigRequest();</span><br><span class=\"line\">            ByteBufferInputStream.byteBuffer2Record(request.request, reconfigRequest);</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.setACL:</span><br><span class=\"line\">            SetACLRequest setAclRequest = <span class=\"keyword\">new</span> SetACLRequest();                </span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.check:</span><br><span class=\"line\">            CheckVersionRequest checkRequest = <span class=\"keyword\">new</span> CheckVersionRequest();              </span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.multi:</span><br><span class=\"line\">            MultiTransactionRecord multiRequest = <span class=\"keyword\">new</span> MultiTransactionRecord();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">                request.setHdr(<span class=\"keyword\">new</span> TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(),</span><br><span class=\"line\">                        Time.currentWallTime(), OpCode.multi));</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            List&lt;Txn&gt; txns = <span class=\"keyword\">new</span> ArrayList&lt;Txn&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//Each op in a multi-op must have the same zxid!</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> zxid = zks.getNextZxid();</span><br><span class=\"line\">            KeeperException ke = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Store off current pending change records in case we need to rollback</span></span><br><span class=\"line\">            Map&lt;String, ChangeRecord&gt; pendingChanges = getPendingChanges(multiRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Op op: multiRequest) &#123;</span><br><span class=\"line\">                Record subrequest = op.toRequestRecord();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">                Record txn;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/* If we've already failed one of the ops, don't bother</span></span><br><span class=\"line\"><span class=\"comment\">                 * trying the rest as we know it's going to fail and it</span></span><br><span class=\"line\"><span class=\"comment\">                 * would be confusing in the logfiles.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ke != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    type = OpCode.error;</span><br><span class=\"line\">                    txn = <span class=\"keyword\">new</span> ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/* Prep the request and convert to a Txn */</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        pRequest2Txn(op.getType(), zxid, request, subrequest, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                        type = request.getHdr().getType();</span><br><span class=\"line\">                        txn = request.getTxn();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (KeeperException e) &#123;</span><br><span class=\"line\">                        ke = e;</span><br><span class=\"line\">                        type = OpCode.error;</span><br><span class=\"line\">                        txn = <span class=\"keyword\">new</span> ErrorTxn(e.code().intValue());</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (e.code().intValue() &gt; Code.APIERROR.intValue()) &#123;</span><br><span class=\"line\">                            LOG.info(<span class=\"string\">\"Got user-level KeeperException when processing &#123;&#125; aborting\"</span> +</span><br><span class=\"line\">                                    <span class=\"string\">\" remaining multi ops. Error Path:&#123;&#125; Error:&#123;&#125;\"</span>,</span><br><span class=\"line\">                                    request.toString(), e.getPath(), e.getMessage());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        request.setException(e);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/* Rollback change records from failed multi-op */</span></span><br><span class=\"line\">                        rollbackPendingChanges(zxid, pendingChanges);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//<span class=\"doctag\">FIXME:</span> I don't want to have to serialize it here and then</span></span><br><span class=\"line\">                <span class=\"comment\">//       immediately deserialize in next processor. But I'm</span></span><br><span class=\"line\">                <span class=\"comment\">//       not sure how else to get the txn stored into our list.</span></span><br><span class=\"line\">                ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class=\"line\">                txn.serialize(boa, <span class=\"string\">\"request\"</span>) ;</span><br><span class=\"line\">                ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class=\"line\"></span><br><span class=\"line\">                txns.add(<span class=\"keyword\">new</span> Txn(type, bb.array()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            request.setHdr(<span class=\"keyword\">new</span> TxnHeader(request.sessionId, request.cxid, zxid,</span><br><span class=\"line\">                    Time.currentWallTime(), request.type));</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> MultiTxn(txns));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//create/close session don't require request record</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.createSession:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.closeSession:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!request.isLocalSession()) &#123;</span><br><span class=\"line\">                pRequest2Txn(request.type, zks.getNextZxid(), request,</span><br><span class=\"line\">                             <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//All the rest don't need to create a Txn - just verify session</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.sync:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.exists:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getData:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getACL:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getChildren:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getChildren2:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.ping:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.setWatches:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.checkWatches:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.removeWatches:</span><br><span class=\"line\">            zks.sessionTracker.checkSession(request.sessionId,</span><br><span class=\"line\">                    request.getOwner());</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"unknown type \"</span> + request.type);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (KeeperException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.getHdr().setType(OpCode.error);</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> ErrorTxn(e.code().intValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.code().intValue() &gt; Code.APIERROR.intValue()) &#123;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"Got user-level KeeperException when processing &#123;&#125; Error Path:&#123;&#125; Error:&#123;&#125;\"</span>,</span><br><span class=\"line\">                    request.toString(), e.getPath(), e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.setException(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// log at error level as we are returning a marshalling</span></span><br><span class=\"line\">        <span class=\"comment\">// error to the user</span></span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Failed to process \"</span> + request, e);</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        ByteBuffer bb = request.request;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bb != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            bb.rewind();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (bb.hasRemaining()) &#123;</span><br><span class=\"line\">                sb.append(Integer.toHexString(bb.get() &amp; <span class=\"number\">0xff</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"request buffer is null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Dumping request buffer: 0x\"</span> + sb.toString());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.getHdr().setType(OpCode.error);</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> ErrorTxn(Code.MARSHALLINGERROR.intValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.zxid = zks.getZxid();</span><br><span class=\"line\">    nextProcessor.processRequest(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>run函数是对Thread类run函数的重写，其核心逻辑相对简单，即不断从队列中取出request进行处理，其会调用pRequest函数。</p>\n<p><code>pRequest</code>会确定请求类型，并根据请求类型不同生成不同的请求对象，然后调用<code>pRequest2Txn</code>函数。</p>\n<p><code>pRequest2Txn</code>会根据不同的请求类型进行不同的验证，如对创建节点而言，其会进行会话验证，ACL列表验证，节点路径验证及判断创建节点的类型（顺序节点、临时节点等）而进行不同操作，同时还会使父节点的子节点数目加1，之后会再调用<code>addChangeRecord</code>函数将ChangeRecord添加至ZooKeeperServer的outstandingChanges和outstandingChangesForPath中。</p>\n<p>在处理完后，交给下一个处理链来处理request。</p>\n<h3 id=\"5-2-SyncRequestProcessor\"><a href=\"#5-2-SyncRequestProcessor\" class=\"headerlink\" title=\"5.2 SyncRequestProcessor\"></a>5.2 SyncRequestProcessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// request.addRQRec(\"&gt;sync\");</span></span><br><span class=\"line\">    queuedRequests.add(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SyncRequestProcessor</code>同样将请求放入队列来异步处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> logCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// we do this in an attempt to ensure that not all of the servers</span></span><br><span class=\"line\">        <span class=\"comment\">// in the ensemble take a snapshot at the same time</span></span><br><span class=\"line\">        <span class=\"comment\">// 确保所有的服务器在同一时间不是使用的同一个快照</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> randRoll = r.nextInt(snapCount/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Request si = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (toFlush.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果待刷新的队列为空，用take方法，会阻塞</span></span><br><span class=\"line\">                si = queuedRequests.take();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果待刷新的队列不为空，用poll方法，如果队列里面没有内容，返回null。</span></span><br><span class=\"line\">                <span class=\"comment\">//如果返回null就刷新流到硬盘，否则继续处理请求。可以理解为空闲的时候flush</span></span><br><span class=\"line\">                si = queuedRequests.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (si == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    flush(toFlush);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (si == requestOfDeath) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (si != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将请求添加至日志文件，只有事务性请求返回true</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (zks.getZKDatabase().append(si)) &#123;</span><br><span class=\"line\">                    logCount++;</span><br><span class=\"line\">                    <span class=\"comment\">//文件过大则roll日志文件，并创建线程处理快照。</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logCount &gt; (snapCount / <span class=\"number\">2</span> + randRoll)) &#123;</span><br><span class=\"line\">                        randRoll = r.nextInt(snapCount/<span class=\"number\">2</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// roll the log</span></span><br><span class=\"line\">                        zks.getZKDatabase().rollLog();</span><br><span class=\"line\">                        <span class=\"comment\">// take a snapshot</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (snapInProcess != <span class=\"keyword\">null</span> &amp;&amp; snapInProcess.isAlive()) &#123;</span><br><span class=\"line\">                            LOG.warn(<span class=\"string\">\"Too busy to snap, skipping\"</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            snapInProcess = <span class=\"keyword\">new</span> ZooKeeperThread(<span class=\"string\">\"Snapshot Thread\"</span>) &#123;</span><br><span class=\"line\">                                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                            zks.takeSnapshot();</span><br><span class=\"line\">                                        &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">                                            LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;;</span><br><span class=\"line\">                            snapInProcess.start();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        logCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (toFlush.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// optimization for read heavy workloads</span></span><br><span class=\"line\">                    <span class=\"comment\">// iff this is a read, and there are no pending</span></span><br><span class=\"line\">                    <span class=\"comment\">// flushes (writes), then just pass this to the next</span></span><br><span class=\"line\">                    <span class=\"comment\">// processor</span></span><br><span class=\"line\">                    <span class=\"comment\">//查看此时toFlush是否为空，如果为空，说明近段时间读多写少，直接响应</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nextProcessor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        nextProcessor.processRequest(si);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (nextProcessor <span class=\"keyword\">instanceof</span> Flushable) &#123;</span><br><span class=\"line\">                            ((Flushable)nextProcessor).flush();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                toFlush.add(si);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (toFlush.size() &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">                    flush(toFlush);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), t);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        running = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"SyncRequestProcessor exited!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">(LinkedList&lt;Request&gt; toFlush)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> IOException, RequestProcessorException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (toFlush.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//刷新磁盘</span></span><br><span class=\"line\">    zks.getZKDatabase().commit();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!toFlush.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将请求交给下一个处理器处理</span></span><br><span class=\"line\">        Request i = toFlush.remove();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextProcessor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            nextProcessor.processRequest(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProcessor != <span class=\"keyword\">null</span> &amp;&amp; nextProcessor <span class=\"keyword\">instanceof</span> Flushable) &#123;</span><br><span class=\"line\">        ((Flushable)nextProcessor).flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SyncRequestProcessor</code>主要作用包含将事务性请求刷新到磁盘，并且对请求进行快照处理。</p>\n<h3 id=\"5-3-FinalRequestProcessor\"><a href=\"#5-3-FinalRequestProcessor\" class=\"headerlink\" title=\"5.3 FinalRequestProcessor\"></a>5.3 FinalRequestProcessor</h3><p><code>FinalRequestProcessor</code>主要是对DataTree的操作，先不写了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"zookeeper-单机流程3-5-5\"><a href=\"#zookeeper-单机流程3-5-5\" class=\"headerlink\" title=\"zookeeper 单机流程3.5.5\"></a>zookeeper 单机流程3.5.5</h1><p>在<code>ZooKeeperServerMain</code>的启动中，会启动<code>NIOServerCnxnFactory</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class=\"line\">cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">cnxnFactory.startup(zkServer);</span><br></pre></td></tr></table></figure>\n<p><code>ServerCnxnFactory.createFactory</code>默认创建<code>NIOServerCnxnFactory</code>，首先调用<code>configure</code>方法，然后调用<code>startup</code>方法。</p>\n<h2 id=\"1-configure\"><a href=\"#1-configure\" class=\"headerlink\" title=\"1.configure\"></a>1.configure</h2><p>首先看<code>NIOServerCnxnFactory.configure</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(InetSocketAddress addr, <span class=\"keyword\">int</span> maxcc, <span class=\"keyword\">boolean</span> secure)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (secure) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"SSL isn't supported in NIOServerCnxn\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//配置sasl，安全相关的，暂时忽略。</span></span><br><span class=\"line\">    configureSaslLogin();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从名字看是最大客户端连接数，默认60</span></span><br><span class=\"line\">    maxClientCnxns = maxcc;</span><br><span class=\"line\">    <span class=\"comment\">//session过期时间，先从System Property获取数值，没有的话默认10000，第一次知道Integer还有这样的方法。</span></span><br><span class=\"line\">    sessionlessCnxnTimeout = Integer.getInteger(</span><br><span class=\"line\">        ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    <span class=\"comment\">// We also use the sessionlessCnxnTimeout as expiring interval for</span></span><br><span class=\"line\">    <span class=\"comment\">// cnxnExpiryQueue. These don't need to be the same, but the expiring</span></span><br><span class=\"line\">    <span class=\"comment\">// interval passed into the ExpiryQueue() constructor below should be</span></span><br><span class=\"line\">    <span class=\"comment\">// less than or equal to the timeout.</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化队列和线程，从名字看都是跟过期时间相关的。</span></span><br><span class=\"line\">    cnxnExpiryQueue =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ExpiryQueue&lt;NIOServerCnxn&gt;(sessionlessCnxnTimeout);</span><br><span class=\"line\">    expirerThread = <span class=\"keyword\">new</span> ConnectionExpirerThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取核数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> numCores = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">    <span class=\"comment\">// 32 cores sweet spot seems to be 4 selector threads</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化selector线程，如果32位核数的话是4个线程，不知道为什么要用这么多线程，后面再看。</span></span><br><span class=\"line\">    numSelectorThreads = Integer.getInteger(</span><br><span class=\"line\">        ZOOKEEPER_NIO_NUM_SELECTOR_THREADS,</span><br><span class=\"line\">        Math.max((<span class=\"keyword\">int</span>) Math.sqrt((<span class=\"keyword\">float</span>) numCores/<span class=\"number\">2</span>), <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numSelectorThreads &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"numSelectorThreads must be at least 1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//worker线程数=核数*2</span></span><br><span class=\"line\">    numWorkerThreads = Integer.getInteger(</span><br><span class=\"line\">        ZOOKEEPER_NIO_NUM_WORKER_THREADS, <span class=\"number\">2</span> * numCores);</span><br><span class=\"line\">    workerShutdownTimeoutMS = Long.getLong(</span><br><span class=\"line\">        ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT, <span class=\"number\">5000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Configuring NIO connection handler with \"</span></span><br><span class=\"line\">             + (sessionlessCnxnTimeout/<span class=\"number\">1000</span>) + <span class=\"string\">\"s sessionless connection\"</span></span><br><span class=\"line\">             + <span class=\"string\">\" timeout, \"</span> + numSelectorThreads + <span class=\"string\">\" selector thread(s), \"</span></span><br><span class=\"line\">             + (numWorkerThreads &gt; <span class=\"number\">0</span> ? numWorkerThreads : <span class=\"string\">\"no\"</span>)</span><br><span class=\"line\">             + <span class=\"string\">\" worker threads, and \"</span></span><br><span class=\"line\">             + (directBufferBytes == <span class=\"number\">0</span> ? <span class=\"string\">\"gathered writes.\"</span> :</span><br><span class=\"line\">                (<span class=\"string\">\"\"</span> + (directBufferBytes/<span class=\"number\">1024</span>) + <span class=\"string\">\" kB direct buffers.\"</span>)));</span><br><span class=\"line\">    <span class=\"comment\">//初始化selectorThreads</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;numSelectorThreads; ++i) &#123;</span><br><span class=\"line\">        selectorThreads.add(<span class=\"keyword\">new</span> SelectorThread(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建2181端口服务</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ss = ServerSocketChannel.open();</span><br><span class=\"line\">    ss.socket().setReuseAddress(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"binding to port \"</span> + addr);</span><br><span class=\"line\">    ss.socket().bind(addr);</span><br><span class=\"line\">    ss.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个AcceptThread线程</span></span><br><span class=\"line\">    acceptThread = <span class=\"keyword\">new</span> AcceptThread(ss, addr, selectorThreads);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>configure</code>方法主要做的几件事情：</p>\n<ol>\n<li>创建<code>ExpiryQueue</code>和<code>ConnectionExpirerThread</code>。</li>\n<li>创建<code>SelectorThread</code>。</li>\n<li>监听2181端口。</li>\n<li>创建<code>AcceptThread</code>。</li>\n</ol>\n<h3 id=\"1-1-ExpiryQueue\"><a href=\"#1-1-ExpiryQueue\" class=\"headerlink\" title=\"1.1 ExpiryQueue\"></a>1.1 ExpiryQueue</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpiryQueue</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//NIOServerCnxn和过期时间的map</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentHashMap&lt;E, Long&gt; elemMap =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;E, Long&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The maximum number of buckets is equal to max timeout/expirationInterval,</span></span><br><span class=\"line\"><span class=\"comment\">     * so the expirationInterval should not be too small compared to the</span></span><br><span class=\"line\"><span class=\"comment\">     * max timeout that this expiry queue needs to maintain.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">//过期时间和Set&lt;NIOServerCnxn&gt;的map</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentHashMap&lt;Long, Set&lt;E&gt;&gt; expiryMap =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;Long, Set&lt;E&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//下次过期时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicLong nextExpirationTime = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\">    <span class=\"comment\">//过期间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> expirationInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExpiryQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> expirationInterval)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.expirationInterval = expirationInterval;</span><br><span class=\"line\">        nextExpirationTime.set(roundToNextInterval(Time.currentElapsedTime()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">roundToNextInterval</span><span class=\"params\">(<span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (time / expirationInterval + <span class=\"number\">1</span>) * expirationInterval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//更新元素的过期时间</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">update</span><span class=\"params\">(E elem, <span class=\"keyword\">int</span> timeout)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取元素的过期时间</span></span><br><span class=\"line\">        Long prevExpiryTime = elemMap.get(elem);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> now = Time.currentElapsedTime();</span><br><span class=\"line\">        <span class=\"comment\">//计算新的过期时间，将timeout按过期间隔取整</span></span><br><span class=\"line\">        Long newExpiryTime = roundToNextInterval(now + timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newExpiryTime.equals(prevExpiryTime)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No change, so nothing to update</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//下面是将过期时间和elem存到expiryMap和elemMap中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// First add the elem to the new expiry time bucket in expiryMap.</span></span><br><span class=\"line\">        Set&lt;E&gt; set = expiryMap.get(newExpiryTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Construct a ConcurrentHashSet using a ConcurrentHashMap</span></span><br><span class=\"line\">            set = Collections.newSetFromMap(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConcurrentHashMap&lt;E, Boolean&gt;());</span><br><span class=\"line\">            <span class=\"comment\">// Put the new set in the map, but only if another thread</span></span><br><span class=\"line\">            <span class=\"comment\">// hasn't beaten us to it</span></span><br><span class=\"line\">            Set&lt;E&gt; existingSet = expiryMap.putIfAbsent(newExpiryTime, set);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (existingSet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                set = existingSet;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set.add(elem);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Map the elem to the new expiry time. If a different previous</span></span><br><span class=\"line\">        <span class=\"comment\">// mapping was present, clean up the previous expiry bucket.</span></span><br><span class=\"line\">        prevExpiryTime = elemMap.put(elem, newExpiryTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prevExpiryTime != <span class=\"keyword\">null</span> &amp;&amp; !newExpiryTime.equals(prevExpiryTime)) &#123;</span><br><span class=\"line\">            Set&lt;E&gt; prevSet = expiryMap.get(prevExpiryTime);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prevSet != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                prevSet.remove(elem);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newExpiryTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;E&gt; <span class=\"title\">poll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前时间获取过期的元素并remove</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> now = Time.currentElapsedTime();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> expirationTime = nextExpirationTime.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now &lt; expirationTime) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptySet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;E&gt; set = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> newExpirationTime = expirationTime + expirationInterval;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextExpirationTime.compareAndSet(</span><br><span class=\"line\">              expirationTime, newExpirationTime)) &#123;</span><br><span class=\"line\">            set = expiryMap.remove(expirationTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptySet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析<code>ExpiryQueue</code>中最主要的<code>update</code>和<code>poll</code>函数可以看到<code>ExpiryQueue</code>主要作用是向外输出到达过期时间的<code>NIOServerCnxn</code>。</p>\n<h3 id=\"1-2-ConnectionExpirerThread\"><a href=\"#1-2-ConnectionExpirerThread\" class=\"headerlink\" title=\"1.2 ConnectionExpirerThread\"></a>1.2 ConnectionExpirerThread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionExpirerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZooKeeperThread</span> </span>&#123;</span><br><span class=\"line\">    ConnectionExpirerThread() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ConnnectionExpirer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopped) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> waitTime = cnxnExpiryQueue.getWaitTime();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (waitTime &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    Thread.sleep(waitTime);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (NIOServerCnxn conn : cnxnExpiryQueue.poll()) &#123;</span><br><span class=\"line\">                    conn.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              LOG.info(<span class=\"string\">\"ConnnectionExpirerThread interrupted\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG = LoggerFactory</span><br><span class=\"line\">            .getLogger(ZooKeeperThread<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UncaughtExceptionHandler uncaughtExceptionalHandler = <span class=\"keyword\">new</span> UncaughtExceptionHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class=\"line\">            handleException(t.getName(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZooKeeperThread</span><span class=\"params\">(String threadName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(threadName);</span><br><span class=\"line\">        setUncaughtExceptionHandler(uncaughtExceptionalHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This will be used by the uncaught exception handler and just log a</span></span><br><span class=\"line\"><span class=\"comment\">     * warning message and return.</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> thName</span></span><br><span class=\"line\"><span class=\"comment\">     *            - thread name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\">     *            - exception object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">handleException</span><span class=\"params\">(String thName, Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Exception occurred from thread &#123;&#125;\"</span>, thName, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ConnectionExpirerThread</code>是<code>NIOServerCnxnFactory</code>的子类，继承自<code>ZooKeeperThread</code>。<code>ZooKeeperThread</code>主要就是设置了线程名和线程的<code>UncaughtExceptionHandler</code>。<br><code>ConnectionExpirerThread</code>的功能是从<code>cnxnExpiryQueue</code>中获取过期的<code>NIOServerCnxn</code>并<code>close</code>。</p>\n<h3 id=\"1-1-3-AcceptThread\"><a href=\"#1-1-3-AcceptThread\" class=\"headerlink\" title=\"1.1.3 AcceptThread\"></a>1.1.3 AcceptThread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AcceptThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSelectThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ServerSocketChannel acceptSocket;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SelectionKey acceptKey;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RateLogger acceptErrorLogger = <span class=\"keyword\">new</span> RateLogger(LOG);</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Collection&lt;SelectorThread&gt; selectorThreads;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Iterator&lt;SelectorThread&gt; selectorIterator;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> reconfiguring = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AcceptThread</span><span class=\"params\">(ServerSocketChannel ss, InetSocketAddress addr,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                Set&lt;SelectorThread&gt; selectorThreads)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"NIOServerCxnFactory.AcceptThread:\"</span> + addr);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.acceptSocket = ss;</span><br><span class=\"line\">            <span class=\"comment\">// 注册OP_ACCEPT</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.acceptKey =</span><br><span class=\"line\">                acceptSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.selectorThreads = Collections.unmodifiableList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ArrayList&lt;SelectorThread&gt;(selectorThreads));</span><br><span class=\"line\">            selectorIterator = <span class=\"keyword\">this</span>.selectorThreads.iterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stopped &amp;&amp; !acceptSocket.socket().isClosed()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        select();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Ignoring unexpected runtime exception\"</span>, e);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Ignoring unexpected exception\"</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                closeSelector();</span><br><span class=\"line\">                <span class=\"comment\">// This will wake up the selector threads, and tell the</span></span><br><span class=\"line\">                <span class=\"comment\">// worker thread pool to begin shutdown.</span></span><br><span class=\"line\">            \t<span class=\"keyword\">if</span> (!reconfiguring) &#123;                    </span><br><span class=\"line\">                    NIOServerCnxnFactory.<span class=\"keyword\">this</span>.stop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"accept thread exitted run method\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                selector.select();</span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; selectedKeys =</span><br><span class=\"line\">                    selector.selectedKeys().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stopped &amp;&amp; selectedKeys.hasNext()) &#123;</span><br><span class=\"line\">                    SelectionKey key = selectedKeys.next();</span><br><span class=\"line\">                    selectedKeys.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果有accept的连接，调用doAccept方法</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!doAccept()) &#123;</span><br><span class=\"line\">                            pauseAccept(<span class=\"number\">10</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Unexpected ops in accept select \"</span></span><br><span class=\"line\">                                 + key.readyOps());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Ignoring IOException while selecting\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doAccept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> accepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            SocketChannel sc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sc = acceptSocket.accept();</span><br><span class=\"line\">                accepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                InetAddress ia = sc.socket().getInetAddress();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cnxncount = getClientCnxnCount(ia);</span><br><span class=\"line\">                <span class=\"comment\">//判断连接上限</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxClientCnxns &gt; <span class=\"number\">0</span> &amp;&amp; cnxncount &gt;= maxClientCnxns)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Too many connections from \"</span> + ia</span><br><span class=\"line\">                                          + <span class=\"string\">\" - max is \"</span> + maxClientCnxns );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                LOG.debug(<span class=\"string\">\"Accepted socket connection from \"</span></span><br><span class=\"line\">                         + sc.socket().getRemoteSocketAddress());</span><br><span class=\"line\">                sc.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Round-robin assign this connection to a selector thread</span></span><br><span class=\"line\">                <span class=\"comment\">//从迭代器里面获取一个SelectorThread，如果没有的话，重新初始化迭代器然后获取。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!selectorIterator.hasNext()) &#123;</span><br><span class=\"line\">                    selectorIterator = selectorThreads.iterator();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                SelectorThread selectorThread = selectorIterator.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!selectorThread.addAcceptedConnection(sc)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(</span><br><span class=\"line\">                        <span class=\"string\">\"Unable to add connection to selector queue\"</span></span><br><span class=\"line\">                        + (stopped ? <span class=\"string\">\" (shutdown in progress)\"</span> : <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                acceptErrorLogger.flush();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// accept, maxClientCnxns, configureBlocking</span></span><br><span class=\"line\">                acceptErrorLogger.rateLimitLog(</span><br><span class=\"line\">                    <span class=\"string\">\"Error accepting new connection: \"</span> + e.getMessage());</span><br><span class=\"line\">                fastCloseSock(sc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> accepted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>AcceptThread</code>做的主要事情就是accept连接，然后分配给<code>SelectorThread</code>。</p>\n<h3 id=\"1-1-4-SelectorThread\"><a href=\"#1-1-4-SelectorThread\" class=\"headerlink\" title=\"1.1.4 SelectorThread\"></a>1.1.4 SelectorThread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectorThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSelectThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Queue&lt;SocketChannel&gt; acceptedQueue;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Queue&lt;SelectionKey&gt; updateQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SelectorThread</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"NIOServerCxnFactory.SelectorThread-\"</span> + id);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">            acceptedQueue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;SocketChannel&gt;();</span><br><span class=\"line\">            updateQueue = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;SelectionKey&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAcceptedConnection</span><span class=\"params\">(SocketChannel accepted)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped || !acceptedQueue.offer(accepted)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            wakeupSelector();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addInterestOpsUpdateRequest</span><span class=\"params\">(SelectionKey sk)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped || !updateQueue.offer(sk)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            wakeupSelector();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SelectorThread</code>同样继承<code>AbstractSelectThread</code>，有两个队列<code>acceptedQueue</code>和<code>updateQueue</code>，提供两个方法往队列里塞数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//运行状况下死循环执行这3个方法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stopped) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                select();</span><br><span class=\"line\">                processAcceptedConnections();</span><br><span class=\"line\">                processInterestOpsUpdateRequests();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Ignoring unexpected runtime exception\"</span>, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Ignoring unexpected exception\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果跳出循环，关闭所有连接。</span></span><br><span class=\"line\">        <span class=\"comment\">// Close connections still pending on the selector. Any others</span></span><br><span class=\"line\">        <span class=\"comment\">// with in-flight work, let drain out of the work queue.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class=\"line\">            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnxn.isSelectable()) &#123;</span><br><span class=\"line\">                cnxn.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cleanupSelectionKey(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SocketChannel accepted;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((accepted = acceptedQueue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fastCloseSock(accepted);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        updateQueue.clear();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        closeSelector();</span><br><span class=\"line\">        <span class=\"comment\">// This will wake up the accept thread and the other selector</span></span><br><span class=\"line\">        <span class=\"comment\">// threads, and tell the worker thread pool to begin shutdown.</span></span><br><span class=\"line\">        NIOServerCnxnFactory.<span class=\"keyword\">this</span>.stop();</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"selector thread exitted run method\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;SelectionKey&gt; selected = selector.selectedKeys();</span><br><span class=\"line\">        ArrayList&lt;SelectionKey&gt; selectedList =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayList&lt;SelectionKey&gt;(selected);</span><br><span class=\"line\">        Collections.shuffle(selectedList);</span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; selectedKeys = selectedList.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stopped &amp;&amp; selectedKeys.hasNext()) &#123;</span><br><span class=\"line\">            SelectionKey key = selectedKeys.next();</span><br><span class=\"line\">            selected.remove(key);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">                cleanupSelectionKey(key);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//处理readable和writable的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.isReadable() || key.isWritable()) &#123;</span><br><span class=\"line\">                handleIO(key);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Unexpected ops in select \"</span> + key.readyOps());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Ignoring IOException while selecting\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Schedule I/O for processing on the connection associated with</span></span><br><span class=\"line\"><span class=\"comment\"> * the given SelectionKey. If a worker thread pool is not being used,</span></span><br><span class=\"line\"><span class=\"comment\"> * I/O is run directly by this thread.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleIO</span><span class=\"params\">(SelectionKey key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//封装workRequest，交由workerPool处理。</span></span><br><span class=\"line\">    IOWorkRequest workRequest = <span class=\"keyword\">new</span> IOWorkRequest(<span class=\"keyword\">this</span>, key);</span><br><span class=\"line\">    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Stop selecting this key while processing on its</span></span><br><span class=\"line\">    <span class=\"comment\">// connection</span></span><br><span class=\"line\">    <span class=\"comment\">//在处理过程中，停止注册SelectionKey</span></span><br><span class=\"line\">    cnxn.disableSelectable();</span><br><span class=\"line\">    key.interestOps(<span class=\"number\">0</span>);</span><br><span class=\"line\">    touchCnxn(cnxn);</span><br><span class=\"line\">    workerPool.schedule(workRequest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Iterate over the queue of accepted connections that have been</span></span><br><span class=\"line\"><span class=\"comment\"> * assigned to this thread but not yet placed on the selector.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processAcceptedConnections</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从acceptedQueue中取出SelectionKey，注册READ事件</span></span><br><span class=\"line\">    SocketChannel accepted;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stopped &amp;&amp; (accepted = acceptedQueue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        SelectionKey key = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            key = accepted.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">            NIOServerCnxn cnxn = createConnection(accepted, key, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">            key.attach(cnxn);</span><br><span class=\"line\">            addCnxn(cnxn);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// register, createConnection</span></span><br><span class=\"line\">            cleanupSelectionKey(key);</span><br><span class=\"line\">            fastCloseSock(accepted);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Iterate over the queue of connections ready to resume selection,</span></span><br><span class=\"line\"><span class=\"comment\"> * and restore their interest ops selection mask.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processInterestOpsUpdateRequests</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从updateQueue中取出SelectionKey，注册READ或WRITE事件</span></span><br><span class=\"line\">    SelectionKey key;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stopped &amp;&amp; (key = updateQueue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">            cleanupSelectionKey(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnxn.isSelectable()) &#123;</span><br><span class=\"line\">            key.interestOps(cnxn.getInterestOps());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SelectorThread</code>的功能就是注册WRITE和READ事件的连接，并处理IO。</p>\n<h2 id=\"2-start\"><a href=\"#2-start\" class=\"headerlink\" title=\"2.start\"></a>2.start</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stopped = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerPool == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        workerPool = <span class=\"keyword\">new</span> WorkerService(</span><br><span class=\"line\">            <span class=\"string\">\"NIOWorker\"</span>, numWorkerThreads, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(SelectorThread thread : selectorThreads) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread.getState() == Thread.State.NEW) &#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ensure thread is started once and only once</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (acceptThread.getState() == Thread.State.NEW) &#123;</span><br><span class=\"line\">        acceptThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expirerThread.getState() == Thread.State.NEW) &#123;</span><br><span class=\"line\">        expirerThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NIOServerCnxnFactory</code>的start方法，初始化<code>WorkerService</code>，并启动<code>SelectorThread</code>、<code>acceptThread</code>，<code>expirerThread</code>线程。</p>\n<h3 id=\"2-1-WorkerService\"><a href=\"#2-1-WorkerService\" class=\"headerlink\" title=\"2.1 WorkerService\"></a>2.1 WorkerService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;ExecutorService&gt; workers =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ArrayList&lt;ExecutorService&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerService</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> numThreads,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"keyword\">boolean</span> useAssignableThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadNamePrefix = (name == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span> : name) + <span class=\"string\">\"Thread\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.numWorkerThreads = numThreads;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadsAreAssignable = useAssignableThreads;</span><br><span class=\"line\">    start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numWorkerThreads &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (threadsAreAssignable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= numWorkerThreads; ++i) &#123;</span><br><span class=\"line\">                workers.add(Executors.newFixedThreadPool(</span><br><span class=\"line\">                    <span class=\"number\">1</span>, <span class=\"keyword\">new</span> DaemonThreadFactory(threadNamePrefix, i)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            workers.add(Executors.newFixedThreadPool(</span><br><span class=\"line\">                numWorkerThreads, <span class=\"keyword\">new</span> DaemonThreadFactory(threadNamePrefix)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stopped = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>WorkerService</code>的初始化，主要是初始化了线程池<code>workers</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkRequest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Must be implemented. Is called when the work request is run.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * (Optional) If implemented, is called if the service is stopped</span></span><br><span class=\"line\"><span class=\"comment\">     * or unable to schedule the request.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内部类<code>WorkRequest</code>，提供了<code>doWork</code>和<code>cleanup</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledWorkRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WorkRequest workRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    ScheduledWorkRequest(WorkRequest workRequest) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workRequest = workRequest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Check if stopped while request was on queue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">                workRequest.cleanup();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            workRequest.doWork();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">            workRequest.cleanup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内部类<code>ScheduledWorkRequest</code>，继承<code>Runnable</code>，<code>run</code>方法中执行<code>workRequest.doWork</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(WorkRequest workRequest, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">        workRequest.cleanup();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ScheduledWorkRequest scheduledWorkRequest =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ScheduledWorkRequest(workRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we have a worker thread pool, use that; otherwise, do the work</span></span><br><span class=\"line\">    <span class=\"comment\">// directly.</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = workers.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// make sure to map negative ids as well to [0, size-1]</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> workerNum = ((<span class=\"keyword\">int</span>) (id % size) + size) % size;</span><br><span class=\"line\">            ExecutorService worker = workers.get(workerNum);</span><br><span class=\"line\">            worker.execute(scheduledWorkRequest);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException e) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"ExecutorService rejected execution\"</span>, e);</span><br><span class=\"line\">            workRequest.cleanup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// When there is no worker thread pool, do the work directly</span></span><br><span class=\"line\">        <span class=\"comment\">// and wait for its completion</span></span><br><span class=\"line\">        scheduledWorkRequest.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最主要的方法<code>schedule</code>，将<code>workRequest</code>交由线程池执行，如果线程池满，由当前线程执行。</p>\n<h3 id=\"2-2-IOWorkRequest\"><a href=\"#2-2-IOWorkRequest\" class=\"headerlink\" title=\"2.2 IOWorkRequest\"></a>2.2 IOWorkRequest</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOWorkRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">WorkerService</span>.<span class=\"title\">WorkRequest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SelectorThread selectorThread;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SelectionKey key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> NIOServerCnxn cnxn;</span><br><span class=\"line\"></span><br><span class=\"line\">    IOWorkRequest(SelectorThread selectorThread, SelectionKey key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selectorThread = selectorThread;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cnxn = (NIOServerCnxn) key.attachment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">            selectorThread.cleanupSelectionKey(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key.isReadable() || key.isWritable()) &#123;</span><br><span class=\"line\">            cnxn.doIO(key);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Check if we shutdown or doIO() closed this connection</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stopped) &#123;</span><br><span class=\"line\">                cnxn.close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!key.isValid()) &#123;</span><br><span class=\"line\">                selectorThread.cleanupSelectionKey(key);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//更新过期时间</span></span><br><span class=\"line\">            touchCnxn(cnxn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Mark this connection as once again ready for selection</span></span><br><span class=\"line\">        cnxn.enableSelectable();</span><br><span class=\"line\">        <span class=\"comment\">// Push an update request on the queue to resume selecting</span></span><br><span class=\"line\">        <span class=\"comment\">// on the current set of interest ops, which may have changed</span></span><br><span class=\"line\">        <span class=\"comment\">// as a result of the I/O operations we just performed.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!selectorThread.addInterestOpsUpdateRequest(key)) &#123;</span><br><span class=\"line\">            cnxn.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cnxn.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IOWorkRequest</code>是<code>NIOServerCnxnFactory</code>的内部类,主要是调用<code>org.apache.zookeeper.server.NIOServerCnxn#doIO</code>方法来处理IO。</p>\n<h2 id=\"3-NIOServerCnxn\"><a href=\"#3-NIOServerCnxn\" class=\"headerlink\" title=\"3. NIOServerCnxn\"></a>3. NIOServerCnxn</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//lenBuffer 4个字节，用于读取长度</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ByteBuffer lenBuffer = ByteBuffer.allocate(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//incomingBuffer默认等于lenBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ByteBuffer incomingBuffer = lenBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doIO</span><span class=\"params\">(SelectionKey k)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSocketOpen() == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"trying to do i/o on a null socket for session:0x\"</span></span><br><span class=\"line\">                     + Long.toHexString(sessionId));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k.isReadable()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//一开始incomingBuffer=lenBuffer</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> rc = sock.read(incomingBuffer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EndOfStreamException(</span><br><span class=\"line\">                        <span class=\"string\">\"Unable to read additional data from client sessionid 0x\"</span></span><br><span class=\"line\">                        + Long.toHexString(sessionId)</span><br><span class=\"line\">                        + <span class=\"string\">\", likely client has closed socket\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//incomingBuffer读满，也就是读取了4个字节的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (incomingBuffer.remaining() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isPayload;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (incomingBuffer == lenBuffer) &#123; <span class=\"comment\">// start of next request</span></span><br><span class=\"line\">                    incomingBuffer.flip();</span><br><span class=\"line\">                    <span class=\"comment\">//读取长度，incomingBuffer重新赋值</span></span><br><span class=\"line\">                    isPayload = readLength(k);</span><br><span class=\"line\">                    incomingBuffer.clear();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// continuation</span></span><br><span class=\"line\">                    isPayload = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isPayload) &#123; <span class=\"comment\">// not the case for 4letterword</span></span><br><span class=\"line\">                    <span class=\"comment\">//处理payload</span></span><br><span class=\"line\">                    readPayload();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// four letter words take care</span></span><br><span class=\"line\">                    <span class=\"comment\">// need not do anything else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k.isWritable()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//write 暂时跳过</span></span><br><span class=\"line\">            handleWrite(k);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!initialized &amp;&amp; !getReadInterest() &amp;&amp; !getWriteInterest()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CloseRequestException(<span class=\"string\">\"responded to info probe\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CancelledKeyException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"CancelledKeyException causing close of session 0x\"</span></span><br><span class=\"line\">                 + Long.toHexString(sessionId));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"CancelledKeyException stack trace\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloseRequestException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// expecting close to log session closure</span></span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (EndOfStreamException e) &#123;</span><br><span class=\"line\">        LOG.warn(e.getMessage());</span><br><span class=\"line\">        <span class=\"comment\">// expecting close to log session closure</span></span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Exception causing close of session 0x\"</span></span><br><span class=\"line\">                 + Long.toHexString(sessionId) + <span class=\"string\">\": \"</span> + e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"IOException stack trace\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">readLength</span><span class=\"params\">(SelectionKey k)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取长度，重新新建incomingBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = lenBuffer.getInt();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!initialized &amp;&amp; checkFourLetterWord(sk, len)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">0</span> || len &gt; BinaryInputArchive.maxBuffer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Len error \"</span> + len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isZKServerRunning()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"ZooKeeperServer not running\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    incomingBuffer = ByteBuffer.allocate(len);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readPayload</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (incomingBuffer.remaining() != <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//读取payload</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> rc = sock.read(incomingBuffer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EndOfStreamException(</span><br><span class=\"line\">                    <span class=\"string\">\"Unable to read additional data from client sessionid 0x\"</span></span><br><span class=\"line\">                    + Long.toHexString(sessionId)</span><br><span class=\"line\">                    + <span class=\"string\">\", likely client has closed socket\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//读满</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (incomingBuffer.remaining() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        packetReceived();</span><br><span class=\"line\">        incomingBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">            readConnectRequest();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理请求</span></span><br><span class=\"line\">            readRequest();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lenBuffer.clear();</span><br><span class=\"line\">        <span class=\"comment\">//复位incomingBuffer</span></span><br><span class=\"line\">        incomingBuffer = lenBuffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readRequest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//交由ZooKeeperServer来处理请求</span></span><br><span class=\"line\">    zkServer.processPacket(<span class=\"keyword\">this</span>, incomingBuffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NIOServerCnxn</code>的<code>doIO</code>方法，主要是处理读写数据。写数据先跳过，读数据是先读取长度，然后读取payload，最后交由<code>ZooKeeperServer</code>来处理请求。</p>\n<h2 id=\"4-ZooKeeperServer\"><a href=\"#4-ZooKeeperServer\" class=\"headerlink\" title=\"4.ZooKeeperServer\"></a>4.ZooKeeperServer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processPacket</span><span class=\"params\">(ServerCnxn cnxn, ByteBuffer incomingBuffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// We have the request, now process and setup for next</span></span><br><span class=\"line\">    InputStream bais = <span class=\"keyword\">new</span> ByteBufferInputStream(incomingBuffer);</span><br><span class=\"line\">    BinaryInputArchive bia = BinaryInputArchive.getArchive(bais);</span><br><span class=\"line\">    RequestHeader h = <span class=\"keyword\">new</span> RequestHeader();</span><br><span class=\"line\">    <span class=\"comment\">//从流里读取RequestHeader，其实就读取了2个字段，xid和type</span></span><br><span class=\"line\">    h.deserialize(bia, <span class=\"string\">\"header\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Through the magic of byte buffers, txn will not be</span></span><br><span class=\"line\">    <span class=\"comment\">// pointing</span></span><br><span class=\"line\">    <span class=\"comment\">// to the start of the txn</span></span><br><span class=\"line\">    incomingBuffer = incomingBuffer.slice();</span><br><span class=\"line\">    <span class=\"comment\">//处理auth请求，跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h.getType() == OpCode.auth) &#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"got auth packet \"</span> + cnxn.getRemoteSocketAddress());</span><br><span class=\"line\">        AuthPacket authPacket = <span class=\"keyword\">new</span> AuthPacket();</span><br><span class=\"line\">        ByteBufferInputStream.byteBuffer2Record(incomingBuffer, authPacket);</span><br><span class=\"line\">        String scheme = authPacket.getScheme();</span><br><span class=\"line\">        AuthenticationProvider ap = ProviderRegistry.getProvider(scheme);</span><br><span class=\"line\">        Code authReturn = KeeperException.Code.AUTHFAILED;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                authReturn = ap.handleAuthentication(cnxn, authPacket.getAuth());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(RuntimeException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Caught runtime exception from AuthenticationProvider: \"</span> + scheme + <span class=\"string\">\" due to \"</span> + e);</span><br><span class=\"line\">                authReturn = KeeperException.Code.AUTHFAILED;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (authReturn == KeeperException.Code.OK) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">                LOG.debug(<span class=\"string\">\"Authentication succeeded for scheme: \"</span> + scheme);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"auth success \"</span> + cnxn.getRemoteSocketAddress());</span><br><span class=\"line\">            ReplyHeader rh = <span class=\"keyword\">new</span> ReplyHeader(h.getXid(), <span class=\"number\">0</span>,</span><br><span class=\"line\">                    KeeperException.Code.OK.intValue());</span><br><span class=\"line\">            cnxn.sendResponse(rh, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"No authentication provider for scheme: \"</span></span><br><span class=\"line\">                        + scheme + <span class=\"string\">\" has \"</span></span><br><span class=\"line\">                        + ProviderRegistry.listProviders());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Authentication failed for scheme: \"</span> + scheme);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// send a response...</span></span><br><span class=\"line\">            ReplyHeader rh = <span class=\"keyword\">new</span> ReplyHeader(h.getXid(), <span class=\"number\">0</span>,</span><br><span class=\"line\">                    KeeperException.Code.AUTHFAILED.intValue());</span><br><span class=\"line\">            cnxn.sendResponse(rh, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// ... and close connection</span></span><br><span class=\"line\">            cnxn.sendBuffer(ServerCnxnFactory.closeConn);</span><br><span class=\"line\">            cnxn.disableRecv();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">////处理sasl请求，跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h.getType() == OpCode.sasl) &#123;</span><br><span class=\"line\">            Record rsp = processSasl(incomingBuffer,cnxn);</span><br><span class=\"line\">            ReplyHeader rh = <span class=\"keyword\">new</span> ReplyHeader(h.getXid(), <span class=\"number\">0</span>, KeeperException.Code.OK.intValue());</span><br><span class=\"line\">            cnxn.sendResponse(rh,rsp, <span class=\"string\">\"response\"</span>); <span class=\"comment\">// not sure about 3rd arg..what is it?</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//封装请求Request，调用submitRequest</span></span><br><span class=\"line\">            Request si = <span class=\"keyword\">new</span> Request(cnxn, cnxn.getSessionId(), h.getXid(),</span><br><span class=\"line\">              h.getType(), incomingBuffer, cnxn.getAuthInfo());</span><br><span class=\"line\">            si.setOwner(ServerCnxn.me);</span><br><span class=\"line\">            setLocalSessionFlag(si);</span><br><span class=\"line\">            submitRequest(si);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cnxn.incrOutstandingRequests(h);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submitRequest</span><span class=\"params\">(Request si)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果firstProcessor为空，等待初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstProcessor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Since all requests are passed to the request</span></span><br><span class=\"line\">                <span class=\"comment\">// processor it should wait for setting up the request</span></span><br><span class=\"line\">                <span class=\"comment\">// processor chain. The state will be updated to RUNNING</span></span><br><span class=\"line\">                <span class=\"comment\">// after the setup.</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (state == State.INITIAL) &#123;</span><br><span class=\"line\">                    wait(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                LOG.warn(<span class=\"string\">\"Unexpected interruption\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstProcessor == <span class=\"keyword\">null</span> || state != State.RUNNING) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Not started\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        touch(si.cnxn);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> validpacket = Request.isValid(si.type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (validpacket) &#123;</span><br><span class=\"line\">            firstProcessor.processRequest(si);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (si.cnxn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                incInProcess();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Received packet at server of unknown type \"</span> + si.type);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> UnimplementedRequestProcessor().processRequest(si);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MissingSessionException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Dropping request: \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RequestProcessorException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unable to process request:\"</span> + e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>submitRequest</code>方法调用请求处理链来处理请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setupRequestProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RequestProcessor finalProcessor = <span class=\"keyword\">new</span> FinalRequestProcessor(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    RequestProcessor syncProcessor = <span class=\"keyword\">new</span> SyncRequestProcessor(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">            finalProcessor);</span><br><span class=\"line\">    ((SyncRequestProcessor)syncProcessor).start();</span><br><span class=\"line\">    firstProcessor = <span class=\"keyword\">new</span> PrepRequestProcessor(<span class=\"keyword\">this</span>, syncProcessor);</span><br><span class=\"line\">    ((PrepRequestProcessor)firstProcessor).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从启动方法中可以看出，<code>ZooKeeperServer</code>的请求处理链是<code>PrepRequestProcessor-&gt;SyncRequestProcessor-&gt;FinalRequestProcessor</code>。</p>\n<h2 id=\"5-RequestProcessor\"><a href=\"#5-RequestProcessor\" class=\"headerlink\" title=\"5.RequestProcessor\"></a>5.RequestProcessor</h2><p>zookeeper有一堆请求处理链，其中父接口为<code>RequestProcessor</code>，框架图如下：<br><img src=\"http://ww1.sinaimg.cn/large/006tNc79ly1g64aitlnz4j30ly0kqaez.jpg\" alt=\"\"></p>\n<p>各个子类的作用列一下：</p>\n<ul>\n<li>AckRequestProcessor，将前一阶段的请求作为ACK转发给Leader。</li>\n<li>CommitProcessor，将到来的请求与本地提交的请求进行匹配，这是因为改变系统状态的本地请求的返回结果是到来的请求。</li>\n<li>FinalRequestProcessor，通常是请求处理链的最后一个处理器。</li>\n<li>FollowerRequestProcessor，将修改了系统状态的请求转发给Leader。</li>\n<li>ObserverRequestProcessor，同FollowerRequestProcessor一样，将修改了系统状态的请求转发给Leader。</li>\n<li>PrepRequestProcessor，通常是请求处理链的第一个处理器。</li>\n<li>ProposalRequestProcessor，将请求转发给AckRequestProcessor和SyncRequestProcessor。</li>\n<li>ReadOnlyRequestProcessor，是ReadOnlyZooKeeperServer请求处理链的第一个处理器，将只读请求传递给下个处理器，抛弃改变状态的请求。</li>\n<li>SendAckRequestProcessor，发送ACK请求的处理器。</li>\n<li>SyncRequestProcessor，发送Sync请求的处理器。</li>\n<li>ToBeAppliedRequestProcessor，维护toBeApplied列表，下个处理器必须是FinalRequestProcessor并且FinalRequestProcessor必须同步处理请求。</li>\n<li>UnimplementedRequestProcessor，用于管理未知请求。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RequestProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"serial\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestProcessorException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestProcessorException</span><span class=\"params\">(String msg, Throwable t)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(msg, t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RequestProcessor</code>定义了2个接口和一个异常内部类。</p>\n<h3 id=\"5-1-PrepRequestProcessor\"><a href=\"#5-1-PrepRequestProcessor\" class=\"headerlink\" title=\"5.1 PrepRequestProcessor\"></a>5.1 PrepRequestProcessor</h3><p><code>PrepRequestProcessor</code>顾名思义，主要在处理链里面做一些准备工作，运行在处理链的第一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    submittedRequests.add(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>processRequest</code>方法将请求放入队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Request request = submittedRequests.take();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.type == OpCode.ping) &#123;</span><br><span class=\"line\">                traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class=\"line\">                ZooTrace.logRequest(LOG, traceMask, <span class=\"string\">'P'</span>, request, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Request.requestOfDeath == request) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RequestProcessorException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getCause() <span class=\"keyword\">instanceof</span> XidRolloverException) &#123;</span><br><span class=\"line\">            LOG.info(e.getCause().getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"PrepRequestProcessor exited loop!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">pRequest</span><span class=\"params\">(Request request)</span> <span class=\"keyword\">throws</span> RequestProcessorException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// LOG.info(\"Prep&gt;&gt;&gt; cxid = \" + request.cxid + \" type = \" +</span></span><br><span class=\"line\">    <span class=\"comment\">// request.type + \" id = 0x\" + Long.toHexString(request.sessionId));</span></span><br><span class=\"line\">    request.setHdr(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    request.setTxn(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (request.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.createContainer:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.create:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.create2:</span><br><span class=\"line\">            CreateRequest create2Request = <span class=\"keyword\">new</span> CreateRequest();</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.createTTL:</span><br><span class=\"line\">            CreateTTLRequest createTtlRequest = <span class=\"keyword\">new</span> CreateTTLRequest();</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.deleteContainer:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.delete:</span><br><span class=\"line\">            DeleteRequest deleteRequest = <span class=\"keyword\">new</span> DeleteRequest();</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.setData:</span><br><span class=\"line\">            SetDataRequest setDataRequest = <span class=\"keyword\">new</span> SetDataRequest();                </span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.reconfig:</span><br><span class=\"line\">            ReconfigRequest reconfigRequest = <span class=\"keyword\">new</span> ReconfigRequest();</span><br><span class=\"line\">            ByteBufferInputStream.byteBuffer2Record(request.request, reconfigRequest);</span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.setACL:</span><br><span class=\"line\">            SetACLRequest setAclRequest = <span class=\"keyword\">new</span> SetACLRequest();                </span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.check:</span><br><span class=\"line\">            CheckVersionRequest checkRequest = <span class=\"keyword\">new</span> CheckVersionRequest();              </span><br><span class=\"line\">            pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.multi:</span><br><span class=\"line\">            MultiTransactionRecord multiRequest = <span class=\"keyword\">new</span> MultiTransactionRecord();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">                request.setHdr(<span class=\"keyword\">new</span> TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(),</span><br><span class=\"line\">                        Time.currentWallTime(), OpCode.multi));</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            List&lt;Txn&gt; txns = <span class=\"keyword\">new</span> ArrayList&lt;Txn&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//Each op in a multi-op must have the same zxid!</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> zxid = zks.getNextZxid();</span><br><span class=\"line\">            KeeperException ke = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Store off current pending change records in case we need to rollback</span></span><br><span class=\"line\">            Map&lt;String, ChangeRecord&gt; pendingChanges = getPendingChanges(multiRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Op op: multiRequest) &#123;</span><br><span class=\"line\">                Record subrequest = op.toRequestRecord();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">                Record txn;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/* If we've already failed one of the ops, don't bother</span></span><br><span class=\"line\"><span class=\"comment\">                 * trying the rest as we know it's going to fail and it</span></span><br><span class=\"line\"><span class=\"comment\">                 * would be confusing in the logfiles.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ke != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    type = OpCode.error;</span><br><span class=\"line\">                    txn = <span class=\"keyword\">new</span> ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/* Prep the request and convert to a Txn */</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        pRequest2Txn(op.getType(), zxid, request, subrequest, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                        type = request.getHdr().getType();</span><br><span class=\"line\">                        txn = request.getTxn();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (KeeperException e) &#123;</span><br><span class=\"line\">                        ke = e;</span><br><span class=\"line\">                        type = OpCode.error;</span><br><span class=\"line\">                        txn = <span class=\"keyword\">new</span> ErrorTxn(e.code().intValue());</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (e.code().intValue() &gt; Code.APIERROR.intValue()) &#123;</span><br><span class=\"line\">                            LOG.info(<span class=\"string\">\"Got user-level KeeperException when processing &#123;&#125; aborting\"</span> +</span><br><span class=\"line\">                                    <span class=\"string\">\" remaining multi ops. Error Path:&#123;&#125; Error:&#123;&#125;\"</span>,</span><br><span class=\"line\">                                    request.toString(), e.getPath(), e.getMessage());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        request.setException(e);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/* Rollback change records from failed multi-op */</span></span><br><span class=\"line\">                        rollbackPendingChanges(zxid, pendingChanges);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//<span class=\"doctag\">FIXME:</span> I don't want to have to serialize it here and then</span></span><br><span class=\"line\">                <span class=\"comment\">//       immediately deserialize in next processor. But I'm</span></span><br><span class=\"line\">                <span class=\"comment\">//       not sure how else to get the txn stored into our list.</span></span><br><span class=\"line\">                ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class=\"line\">                txn.serialize(boa, <span class=\"string\">\"request\"</span>) ;</span><br><span class=\"line\">                ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class=\"line\"></span><br><span class=\"line\">                txns.add(<span class=\"keyword\">new</span> Txn(type, bb.array()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            request.setHdr(<span class=\"keyword\">new</span> TxnHeader(request.sessionId, request.cxid, zxid,</span><br><span class=\"line\">                    Time.currentWallTime(), request.type));</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> MultiTxn(txns));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//create/close session don't require request record</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.createSession:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.closeSession:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!request.isLocalSession()) &#123;</span><br><span class=\"line\">                pRequest2Txn(request.type, zks.getNextZxid(), request,</span><br><span class=\"line\">                             <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//All the rest don't need to create a Txn - just verify session</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.sync:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.exists:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getData:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getACL:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getChildren:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.getChildren2:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.ping:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.setWatches:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.checkWatches:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OpCode.removeWatches:</span><br><span class=\"line\">            zks.sessionTracker.checkSession(request.sessionId,</span><br><span class=\"line\">                    request.getOwner());</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"unknown type \"</span> + request.type);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (KeeperException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.getHdr().setType(OpCode.error);</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> ErrorTxn(e.code().intValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.code().intValue() &gt; Code.APIERROR.intValue()) &#123;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"Got user-level KeeperException when processing &#123;&#125; Error Path:&#123;&#125; Error:&#123;&#125;\"</span>,</span><br><span class=\"line\">                    request.toString(), e.getPath(), e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.setException(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// log at error level as we are returning a marshalling</span></span><br><span class=\"line\">        <span class=\"comment\">// error to the user</span></span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Failed to process \"</span> + request, e);</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        ByteBuffer bb = request.request;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bb != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            bb.rewind();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (bb.hasRemaining()) &#123;</span><br><span class=\"line\">                sb.append(Integer.toHexString(bb.get() &amp; <span class=\"number\">0xff</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"request buffer is null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Dumping request buffer: 0x\"</span> + sb.toString());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getHdr() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            request.getHdr().setType(OpCode.error);</span><br><span class=\"line\">            request.setTxn(<span class=\"keyword\">new</span> ErrorTxn(Code.MARSHALLINGERROR.intValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.zxid = zks.getZxid();</span><br><span class=\"line\">    nextProcessor.processRequest(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>run函数是对Thread类run函数的重写，其核心逻辑相对简单，即不断从队列中取出request进行处理，其会调用pRequest函数。</p>\n<p><code>pRequest</code>会确定请求类型，并根据请求类型不同生成不同的请求对象，然后调用<code>pRequest2Txn</code>函数。</p>\n<p><code>pRequest2Txn</code>会根据不同的请求类型进行不同的验证，如对创建节点而言，其会进行会话验证，ACL列表验证，节点路径验证及判断创建节点的类型（顺序节点、临时节点等）而进行不同操作，同时还会使父节点的子节点数目加1，之后会再调用<code>addChangeRecord</code>函数将ChangeRecord添加至ZooKeeperServer的outstandingChanges和outstandingChangesForPath中。</p>\n<p>在处理完后，交给下一个处理链来处理request。</p>\n<h3 id=\"5-2-SyncRequestProcessor\"><a href=\"#5-2-SyncRequestProcessor\" class=\"headerlink\" title=\"5.2 SyncRequestProcessor\"></a>5.2 SyncRequestProcessor</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// request.addRQRec(\"&gt;sync\");</span></span><br><span class=\"line\">    queuedRequests.add(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SyncRequestProcessor</code>同样将请求放入队列来异步处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> logCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// we do this in an attempt to ensure that not all of the servers</span></span><br><span class=\"line\">        <span class=\"comment\">// in the ensemble take a snapshot at the same time</span></span><br><span class=\"line\">        <span class=\"comment\">// 确保所有的服务器在同一时间不是使用的同一个快照</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> randRoll = r.nextInt(snapCount/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Request si = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (toFlush.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果待刷新的队列为空，用take方法，会阻塞</span></span><br><span class=\"line\">                si = queuedRequests.take();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果待刷新的队列不为空，用poll方法，如果队列里面没有内容，返回null。</span></span><br><span class=\"line\">                <span class=\"comment\">//如果返回null就刷新流到硬盘，否则继续处理请求。可以理解为空闲的时候flush</span></span><br><span class=\"line\">                si = queuedRequests.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (si == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    flush(toFlush);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (si == requestOfDeath) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (si != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将请求添加至日志文件，只有事务性请求返回true</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (zks.getZKDatabase().append(si)) &#123;</span><br><span class=\"line\">                    logCount++;</span><br><span class=\"line\">                    <span class=\"comment\">//文件过大则roll日志文件，并创建线程处理快照。</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logCount &gt; (snapCount / <span class=\"number\">2</span> + randRoll)) &#123;</span><br><span class=\"line\">                        randRoll = r.nextInt(snapCount/<span class=\"number\">2</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// roll the log</span></span><br><span class=\"line\">                        zks.getZKDatabase().rollLog();</span><br><span class=\"line\">                        <span class=\"comment\">// take a snapshot</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (snapInProcess != <span class=\"keyword\">null</span> &amp;&amp; snapInProcess.isAlive()) &#123;</span><br><span class=\"line\">                            LOG.warn(<span class=\"string\">\"Too busy to snap, skipping\"</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            snapInProcess = <span class=\"keyword\">new</span> ZooKeeperThread(<span class=\"string\">\"Snapshot Thread\"</span>) &#123;</span><br><span class=\"line\">                                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                            zks.takeSnapshot();</span><br><span class=\"line\">                                        &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">                                            LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;;</span><br><span class=\"line\">                            snapInProcess.start();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        logCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (toFlush.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// optimization for read heavy workloads</span></span><br><span class=\"line\">                    <span class=\"comment\">// iff this is a read, and there are no pending</span></span><br><span class=\"line\">                    <span class=\"comment\">// flushes (writes), then just pass this to the next</span></span><br><span class=\"line\">                    <span class=\"comment\">// processor</span></span><br><span class=\"line\">                    <span class=\"comment\">//查看此时toFlush是否为空，如果为空，说明近段时间读多写少，直接响应</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nextProcessor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        nextProcessor.processRequest(si);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (nextProcessor <span class=\"keyword\">instanceof</span> Flushable) &#123;</span><br><span class=\"line\">                            ((Flushable)nextProcessor).flush();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                toFlush.add(si);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (toFlush.size() &gt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">                    flush(toFlush);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        handleException(<span class=\"keyword\">this</span>.getName(), t);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        running = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"SyncRequestProcessor exited!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">(LinkedList&lt;Request&gt; toFlush)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> IOException, RequestProcessorException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (toFlush.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//刷新磁盘</span></span><br><span class=\"line\">    zks.getZKDatabase().commit();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!toFlush.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将请求交给下一个处理器处理</span></span><br><span class=\"line\">        Request i = toFlush.remove();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextProcessor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            nextProcessor.processRequest(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProcessor != <span class=\"keyword\">null</span> &amp;&amp; nextProcessor <span class=\"keyword\">instanceof</span> Flushable) &#123;</span><br><span class=\"line\">        ((Flushable)nextProcessor).flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SyncRequestProcessor</code>主要作用包含将事务性请求刷新到磁盘，并且对请求进行快照处理。</p>\n<h3 id=\"5-3-FinalRequestProcessor\"><a href=\"#5-3-FinalRequestProcessor\" class=\"headerlink\" title=\"5.3 FinalRequestProcessor\"></a>5.3 FinalRequestProcessor</h3><p><code>FinalRequestProcessor</code>主要是对DataTree的操作，先不写了。</p>\n"},{"layout":"post","title":"《剑桥英语在用》笔记","date":"2020-06-22T16:00:00.000Z","author":"Gary","_content":"\n[https://github.com/guhailin/EnglisnGrammar](https://github.com/guhailin/EnglisnGrammar)\n","source":"_posts/2020-06-23-《剑桥英语在用》笔记.md","raw":"---\nlayout:     post\ntitle:      \"《剑桥英语在用》笔记\"\ndate:       2020-06-23\nauthor:     \"Gary\"\ntags:\n---\n\n[https://github.com/guhailin/EnglisnGrammar](https://github.com/guhailin/EnglisnGrammar)\n","slug":"2020-06-23-《剑桥英语在用》笔记","published":1,"updated":"2020-06-23T08:24:50.378Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a800091fyt02pa8gq0","content":"<p><a href=\"https://github.com/guhailin/EnglisnGrammar\" target=\"_blank\" rel=\"noopener\">https://github.com/guhailin/EnglisnGrammar</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/guhailin/EnglisnGrammar\" target=\"_blank\" rel=\"noopener\">https://github.com/guhailin/EnglisnGrammar</a></p>\n"},{"layout":"post","title":"zookeeper集群启动流程、选举流程3.5.5","date":"2019-08-19T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n[toc]\n# zookeeper 集群启动流程、选举流程3.5.5\n\n## 1.QuorumPeerMain\n\nZookeeper的启动入口是`QuorumPeerMain`的`main`方法。启动时需要传入zoo.cfg文件参数。\n\n```java\n    public static void main(String[] args) {\n        QuorumPeerMain main = new QuorumPeerMain();\n        try {\n            main.initializeAndRun(args);\n        } catch (IllegalArgumentException e) {\n            LOG.error(\"Invalid arguments, exiting abnormally\", e);\n            LOG.info(USAGE);\n            System.err.println(USAGE);\n            System.exit(2);\n        } catch (ConfigException e) {\n            LOG.error(\"Invalid config, exiting abnormally\", e);\n            System.err.println(\"Invalid config, exiting abnormally\");\n            System.exit(2);\n        } catch (DatadirException e) {\n            LOG.error(\"Unable to access datadir, exiting abnormally\", e);\n            System.err.println(\"Unable to access datadir, exiting abnormally\");\n            System.exit(3);\n        } catch (AdminServerException e) {\n            LOG.error(\"Unable to start AdminServer, exiting abnormally\", e);\n            System.err.println(\"Unable to start AdminServer, exiting abnormally\");\n            System.exit(4);\n        } catch (Exception e) {\n            LOG.error(\"Unexpected exception, exiting abnormally\", e);\n            System.exit(1);\n        }\n        LOG.info(\"Exiting normally\");\n        System.exit(0);\n    }\n    \n    protected void initializeAndRun(String[] args)\n        throws ConfigException, IOException, AdminServerException\n    {\n        //解析配置文件\n        QuorumPeerConfig config = new QuorumPeerConfig();\n        if (args.length == 1) {\n            config.parse(args[0]);\n        }\n\n        // Start and schedule the the purge task\n        //定时清理日志文件\n        DatadirCleanupManager purgeMgr = new DatadirCleanupManager(config\n                .getDataDir(), config.getDataLogDir(), config\n                .getSnapRetainCount(), config.getPurgeInterval());\n        purgeMgr.start();\n        //单机模式使用ZooKeeperServerMain\n        if (args.length == 1 && config.isDistributed()) {\n            runFromConfig(config);\n        } else {\n            LOG.warn(\"Either no config or no quorum defined in config, running \"\n                    + \" in standalone mode\");\n            // there is only server in the quorum -- run as standalone\n            ZooKeeperServerMain.main(args);\n        }\n    }\n```\n\n解析配置文件，如果是单机模式使用ZooKeeperServerMain，否则调runFromConfig。\n\n```java\n    public void runFromConfig(QuorumPeerConfig config)\n            throws IOException, AdminServerException\n    {\n      try {\n          ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n          LOG.warn(\"Unable to register log4j JMX control\", e);\n      }\n\n      LOG.info(\"Starting quorum peer\");\n      try {\n          ServerCnxnFactory cnxnFactory = null;\n          ServerCnxnFactory secureCnxnFactory = null;\n          //初始化cnxnFactory，默认NIOServerCnxnFactory\n          if (config.getClientPortAddress() != null) {\n              cnxnFactory = ServerCnxnFactory.createFactory();\n              cnxnFactory.configure(config.getClientPortAddress(),\n                      config.getMaxClientCnxns(),\n                      false);\n          }\n          //初始化secureCnxnFactory\n          if (config.getSecureClientPortAddress() != null) {\n              secureCnxnFactory = ServerCnxnFactory.createFactory();\n              secureCnxnFactory.configure(config.getSecureClientPortAddress(),\n                      config.getMaxClientCnxns(),\n                      true);\n          }\n          //new QuorumPeer()，各种配置\n          quorumPeer = getQuorumPeer();\n          quorumPeer.setTxnFactory(new FileTxnSnapLog(\n                      config.getDataLogDir(),\n                      config.getDataDir()));\n          quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n          quorumPeer.enableLocalSessionsUpgrading(\n              config.isLocalSessionsUpgradingEnabled());\n          //quorumPeer.setQuorumPeers(config.getAllMembers());\n          quorumPeer.setElectionType(config.getElectionAlg());\n          quorumPeer.setMyid(config.getServerId());\n          quorumPeer.setTickTime(config.getTickTime());\n          quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n          quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n          quorumPeer.setInitLimit(config.getInitLimit());\n          quorumPeer.setSyncLimit(config.getSyncLimit());\n          quorumPeer.setConfigFileName(config.getConfigFilename());\n          quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n          quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n          if (config.getLastSeenQuorumVerifier()!=null) {\n              quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n          }\n          quorumPeer.initConfigInZKDatabase();\n          quorumPeer.setCnxnFactory(cnxnFactory);\n          quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n          quorumPeer.setSslQuorum(config.isSslQuorum());\n          quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n          quorumPeer.setLearnerType(config.getPeerType());\n          quorumPeer.setSyncEnabled(config.getSyncEnabled());\n          quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n          if (config.sslQuorumReloadCertFiles) {\n              quorumPeer.getX509Util().enableCertFileReloading();\n          }\n\n          // sets quorum sasl authentication configurations\n          quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n          if(quorumPeer.isQuorumSaslAuthEnabled()){\n              quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n              quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n              quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n              quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n              quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n          }\n          quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n          quorumPeer.initialize();\n          \n          quorumPeer.start();\n          //quorumPeer继承ZooKeeperThread，这里调用线程的join方法，阻塞直到线程执行结束。\n          quorumPeer.join();\n      } catch (InterruptedException e) {\n          // warn, but generally this is ok\n          LOG.warn(\"Quorum Peer interrupted\", e);\n      }\n    }\n```\n\n初始化`quorumPeer`并初始化各种配置，最后调用`initialize`和`start`方法。\n\n```java\n    public void initialize() throws SaslException {\n        // init quorum auth server & learner\n        if (isQuorumSaslAuthEnabled()) {\n            Set<String> authzHosts = new HashSet<String>();\n            for (QuorumServer qs : getView().values()) {\n                authzHosts.add(qs.hostname);\n            }\n            authServer = new SaslQuorumAuthServer(isQuorumServerSaslAuthRequired(),\n                    quorumServerLoginContext, authzHosts);\n            authLearner = new SaslQuorumAuthLearner(isQuorumLearnerSaslAuthRequired(),\n                    quorumServicePrincipal, quorumLearnerLoginContext);\n        } else {\n            authServer = new NullQuorumAuthServer();\n            authLearner = new NullQuorumAuthLearner();\n        }\n    }\n```\n\n看名字是初始化安全认证的服务，因为跟主流程无关就不细看了。\n\n```java\n    @Override\n    public synchronized void start() {\n        if (!getView().containsKey(myid)) {\n            throw new RuntimeException(\"My id \" + myid + \" not in the peer list\");\n         }\n         //加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch\n        loadDataBase();\n        //启动ServerCnxnFactory\n        startServerCnxnFactory();\n        try {\n            adminServer.start();\n        } catch (AdminServerException e) {\n            LOG.warn(\"Problem starting AdminServer\", e);\n            System.out.println(e);\n        }\n        //开启选举\n        startLeaderElection();\n        //启动线程\n        super.start();\n    }\n```\n\n`start`方法主要做的几件事情：\n\n1. 加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch。\n2. 启动ServerCnxnFactory\n3. `startLeaderElection`开启选举。\n4. 启动线程。\n\n```java\n    synchronized public void startLeaderElection() {\n       try {\n            //初始化默认looking状态，初始化自己的选票\n           if (getPeerState() == ServerState.LOOKING) {\n               currentVote = new Vote(myid, getLastLoggedZxid(), getCurrentEpoch());\n           }\n       } catch(IOException e) {\n           RuntimeException re = new RuntimeException(e.getMessage());\n           re.setStackTrace(e.getStackTrace());\n           throw re;\n       }\n        //electionType默认为3，这里已经废弃了。\n        if (electionType == 0) {\n            try {\n                udpSocket = new DatagramSocket(getQuorumAddress().getPort());\n                responder = new ResponderThread();\n                responder.start();\n            } catch (SocketException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        //创建选举算法,Election对象\n        this.electionAlg = createElectionAlgorithm(electionType);\n    }\n    \n    protected Election createElectionAlgorithm(int electionAlgorithm){\n        Election le=null;\n\n        switch (electionAlgorithm) {\n        case 0:\n            le = new LeaderElection(this);\n            break;\n        case 1:\n            le = new AuthFastLeaderElection(this);\n            break;\n        case 2:\n            le = new AuthFastLeaderElection(this, true);\n            break;\n        case 3:\n            //electionAlgorithm默认为3，所以使用FastLeaderElection选举算法\n            QuorumCnxManager qcm = createCnxnManager();\n            QuorumCnxManager oldQcm = qcmRef.getAndSet(qcm);\n            if (oldQcm != null) {\n                LOG.warn(\"Clobbering already-set QuorumCnxManager (restarting leader election?)\");\n                oldQcm.halt();\n            }\n            QuorumCnxManager.Listener listener = qcm.listener;\n            if(listener != null){\n                listener.start();\n                FastLeaderElection fle = new FastLeaderElection(this, qcm);\n                fle.start();\n                le = fle;\n            } else {\n                LOG.error(\"Null listener when initializing cnx manager\");\n            }\n            break;\n        default:\n            assert false;\n        }\n        return le;\n    }\n```\n\n\n在看最核心的`run`方法。\n\n```java\n    public void run() {\n    \n        ...\n\n        try {\n            /*\n             * Main loop\n             */\n            while (running) {\n                switch (getPeerState()) {\n                case LOOKING:\n                    LOG.info(\"LOOKING\");\n                    //如果开启了readonly模式，启动ReadOnlyZooKeeperServer\n                    if (Boolean.getBoolean(\"readonlymode.enabled\")) {\n                        LOG.info(\"Attempting to start ReadOnlyZooKeeperServer\");\n\n                        // Create read-only server but don't start it immediately\n                        final ReadOnlyZooKeeperServer roZk =\n                            new ReadOnlyZooKeeperServer(logFactory, this, this.zkDb);\n    \n                        // Instead of starting roZk immediately, wait some grace\n                        // period before we decide we're partitioned.\n                        //\n                        // Thread is used here because otherwise it would require\n                        // changes in each of election strategy classes which is\n                        // unnecessary code coupling.\n                        Thread roZkMgr = new Thread() {\n                            public void run() {\n                                try {\n                                    // lower-bound grace period to 2 secs\n                                    sleep(Math.max(2000, tickTime));\n                                    if (ServerState.LOOKING.equals(getPeerState())) {\n                                        roZk.startup();\n                                    }\n                                } catch (InterruptedException e) {\n                                    LOG.info(\"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started\");\n                                } catch (Exception e) {\n                                    LOG.error(\"FAILED to start ReadOnlyZooKeeperServer\", e);\n                                }\n                            }\n                        };\n                        try {\n                            roZkMgr.start();\n                            reconfigFlagClear();\n                            if (shuttingDownLE) {\n                                shuttingDownLE = false;\n                                startLeaderElection();\n                            }\n                            setCurrentVote(makeLEStrategy().lookForLeader());\n                        } catch (Exception e) {\n                            LOG.warn(\"Unexpected exception\", e);\n                            setPeerState(ServerState.LOOKING);\n                        } finally {\n                            // If the thread is in the the grace period, interrupt\n                            // to come out of waiting.\n                            roZkMgr.interrupt();\n                            roZk.shutdown();\n                        }\n                    } else {\n                        try {\n                           reconfigFlagClear();\n                            if (shuttingDownLE) {\n                               shuttingDownLE = false;\n                               startLeaderElection();\n                               }\n                            //选举\n                            setCurrentVote(makeLEStrategy().lookForLeader());\n                        } catch (Exception e) {\n                            LOG.warn(\"Unexpected exception\", e);\n                            setPeerState(ServerState.LOOKING);\n                        }                        \n                    }\n                    break;\n                case OBSERVING:\n                    try {\n                        LOG.info(\"OBSERVING\");\n                        setObserver(makeObserver(logFactory));\n                        observer.observeLeader();\n                    } catch (Exception e) {\n                        LOG.warn(\"Unexpected exception\",e );\n                    } finally {\n                        observer.shutdown();\n                        setObserver(null);  \n                       updateServerState();\n                    }\n                    break;\n                case FOLLOWING:\n                    try {\n                       LOG.info(\"FOLLOWING\");\n                        setFollower(makeFollower(logFactory));\n                        follower.followLeader();\n                    } catch (Exception e) {\n                       LOG.warn(\"Unexpected exception\",e);\n                    } finally {\n                       follower.shutdown();\n                       setFollower(null);\n                       updateServerState();\n                    }\n                    break;\n                case LEADING:\n                    LOG.info(\"LEADING\");\n                    try {\n                        setLeader(makeLeader(logFactory));\n                        leader.lead();\n                        setLeader(null);\n                    } catch (Exception e) {\n                        LOG.warn(\"Unexpected exception\",e);\n                    } finally {\n                        if (leader != null) {\n                            leader.shutdown(\"Forcing shutdown\");\n                            setLeader(null);\n                        }\n                        updateServerState();\n                    }\n                    break;\n                }\n                start_fle = Time.currentElapsedTime();\n            }\n        }\n        ...\n    }\n```\n\n`run`方法循环处理服务器的4种状态。\n\n## 2.FastLeaderElection\n\n当服务器处于looking状态时，会调用`FastLeaderElection`的`lookForLeader`开启新一轮的选举。`FastLeaderElection`有2个比较重要的内部类`WorkerReceiver`和`WorkerSender`，先看这两个内部类的代码。\n\n### 2.1 WorkerReceiver\n\n```java\nclass WorkerReceiver extends ZooKeeperThread  {\n            // 是否终止\n            volatile boolean stop;\n            // 服务器之间的连接\n            QuorumCnxManager manager;\n\n            WorkerReceiver(QuorumCnxManager manager) {\n                super(\"WorkerReceiver\");\n                this.stop = false;\n                this.manager = manager;\n            }\n\n            public void run() {\n\n                Message response;\n                while (!stop) {\n                    // Sleeps on receive\n                    try {\n                        // 从recvQueue中取出一个选举投票消息（从其他服务器发送过来）\n                        response = manager.pollRecvQueue(3000, TimeUnit.MILLISECONDS);\n                        // 无投票，跳过\n                        if(response == null) continue;\n\n                        ...\n                       \n                        /*\n                         * If it is from a non-voting server (such as an observer or\n                         * a non-voting follower), respond right away.\n                         */\n                        if(!validVoter(response.sid)) {\n                            //当前的投票者集合不包含服务器，获取自己的投票加入sendqueue\n                            Vote current = self.getCurrentVote();\n                            QuorumVerifier qv = self.getQuorumVerifier();\n                            ToSend notmsg = new ToSend(ToSend.mType.notification,\n                                    current.getId(),\n                                    current.getZxid(),\n                                    logicalclock.get(),\n                                    self.getPeerState(),\n                                    response.sid,\n                                    current.getPeerEpoch(),\n                                    qv.toString().getBytes());\n\n                            sendqueue.offer(notmsg);\n                        } else {\n                            // Receive new message\n                            if (LOG.isDebugEnabled()) {\n                                LOG.debug(\"Receive new notification message. My id = \"\n                                        + self.getId());\n                            }\n\n                            // State of peer that sent this message\n                            //获取对面服务器状态\n                            QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;\n                            switch (rstate) {\n                            case 0:\n                                ackstate = QuorumPeer.ServerState.LOOKING;\n                                break;\n                            case 1:\n                                ackstate = QuorumPeer.ServerState.FOLLOWING;\n                                break;\n                            case 2:\n                                ackstate = QuorumPeer.ServerState.LEADING;\n                                break;\n                            case 3:\n                                ackstate = QuorumPeer.ServerState.OBSERVING;\n                                break;\n                            default:\n                                continue;\n                            }\n\n                            n.leader = rleader;\n                            n.zxid = rzxid;\n                            n.electionEpoch = relectionEpoch;\n                            n.state = ackstate;\n                            n.sid = response.sid;\n                            n.peerEpoch = rpeerepoch;\n                            n.version = version;\n                            n.qv = rqv;\n                            /*\n                             * Print notification info\n                             */\n                            if(LOG.isInfoEnabled()){\n                                printNotification(n);\n                            }\n\n                            /*\n                             * If this server is looking, then send proposed leader\n                             */\n                            //自己为looking的状态下\n                            if(self.getPeerState() == QuorumPeer.ServerState.LOOKING){\n                                recvqueue.offer(n);\n\n                                /*\n                                 * Send a notification back if the peer that sent this\n                                 * message is also looking and its logical clock is\n                                 * lagging behind.\n                                 */\n                                 //推选者服务器为LOOKING状态&&选举周期小于逻辑时钟\n                                if((ackstate == QuorumPeer.ServerState.LOOKING)\n                                        && (n.electionEpoch < logicalclock.get())){\n                                    // 创建新的投票\n                                    Vote v = getVote();\n                                    QuorumVerifier qv = self.getQuorumVerifier();\n                                    // 构造新的发送消息（本服务器自己的投票）\n                                    ToSend notmsg = new ToSend(ToSend.mType.notification,\n                                            v.getId(),\n                                            v.getZxid(),\n                                            logicalclock.get(),\n                                            self.getPeerState(),\n                                            response.sid,\n                                            v.getPeerEpoch(),\n                                            qv.toString().getBytes());\n                                    // 将发送消息放置于队列，等待发送\n                                    sendqueue.offer(notmsg);\n                                }\n                            } else {\n                                /*\n                                 * If this server is not looking, but the one that sent the ack\n                                 * is looking, then send back what it believes to be the leader.\n                                 */\n                                // 本服务器状态不为LOOKING，推送服务器是LOOKING状态，发送自己的选票\n                                Vote current = self.getCurrentVote();\n                                if(ackstate == QuorumPeer.ServerState.LOOKING){\n                                    if(LOG.isDebugEnabled()){\n                                        LOG.debug(\"Sending new notification. My id ={} recipient={} zxid=0x{} leader={} config version = {}\",\n                                                self.getId(),\n                                                response.sid,\n                                                Long.toHexString(current.getZxid()),\n                                                current.getId(),\n                                                Long.toHexString(self.getQuorumVerifier().getVersion()));\n                                    }\n\n                                    QuorumVerifier qv = self.getQuorumVerifier();\n                                    ToSend notmsg = new ToSend(\n                                            ToSend.mType.notification,\n                                            current.getId(),\n                                            current.getZxid(),\n                                            current.getElectionEpoch(),\n                                            self.getPeerState(),\n                                            response.sid,\n                                            current.getPeerEpoch(),\n                                            qv.toString().getBytes());\n                                    sendqueue.offer(notmsg);\n                                }\n                            }\n                        }\n                    } catch (InterruptedException e) {\n                        LOG.warn(\"Interrupted Exception while waiting for new message\" +\n                                e.toString());\n                    }\n                }\n                LOG.info(\"WorkerReceiver is down\");\n            }\n        }\n```\n\nWorkerReceiver实现了Runnable接口，是选票接收器。其会不断地从QuorumCnxManager中获取其他服务器发来的选举消息，并将其转换成一个选票，然后保存到recvqueue中，在选票接收过程中，如果发现该外部选票的选举轮次小于当前服务器的，那么忽略该外部投票，同时立即发送自己的内部投票。\n\n### 2.2 WorkerSender\n\n```java\n        class WorkerSender extends ZooKeeperThread {\n            volatile boolean stop;\n            QuorumCnxManager manager;\n\n            WorkerSender(QuorumCnxManager manager){\n                super(\"WorkerSender\");\n                this.stop = false;\n                this.manager = manager;\n            }\n\n            public void run() {\n                while (!stop) {\n                    try {\n                        ToSend m = sendqueue.poll(3000, TimeUnit.MILLISECONDS);\n                        if(m == null) continue;\n\n                        process(m);\n                    } catch (InterruptedException e) {\n                        break;\n                    }\n                }\n                LOG.info(\"WorkerSender is down\");\n            }\n\n            /**\n             * Called by run() once there is a new message to send.\n             *\n             * @param m     message to send\n             */\n            void process(ToSend m) {\n                ByteBuffer requestBuffer = buildMsg(m.state.ordinal(),\n                                                    m.leader,\n                                                    m.zxid,\n                                                    m.electionEpoch,\n                                                    m.peerEpoch,\n                                                    m.configData);\n\n                manager.toSend(m.sid, requestBuffer);\n\n            }\n        }\n```\n\nWorkerSender也实现了Runnable接口，为选票发送器，其会不断地从sendqueue中获取待发送的选票，并将其传递到底层QuorumCnxManager中\n\n### 2.3 sendNotifications\n\n```java\n    /**\n     * Send notifications to all peers upon a change in our vote\n     */\n    private void sendNotifications() {\n        // 遍历投票参与者集合\n        for (long sid : self.getCurrentAndNextConfigVoters()) {\n            QuorumVerifier qv = self.getQuorumVerifier();\n            // 构造发送消息\n            ToSend notmsg = new ToSend(ToSend.mType.notification,\n                    proposedLeader,\n                    proposedZxid,\n                    logicalclock.get(),\n                    QuorumPeer.ServerState.LOOKING,\n                    sid,\n                    proposedEpoch, qv.toString().getBytes());\n            if(LOG.isDebugEnabled()){\n                LOG.debug(\"Sending Notification: \" + proposedLeader + \" (n.leader), 0x\"  +\n                      Long.toHexString(proposedZxid) + \" (n.zxid), 0x\" + Long.toHexString(logicalclock.get())  +\n                      \" (n.round), \" + sid + \" (recipient), \" + self.getId() +\n                      \" (myid), 0x\" + Long.toHexString(proposedEpoch) + \" (n.peerEpoch)\");\n            }\n            // 将发送消息放置于队列\n            sendqueue.offer(notmsg);\n        }\n    }\n```\n\n其会遍历所有的参与者投票集合，然后将自己的选票信息发送至上述所有的投票者集合，其并非同步发送，而是将ToSend消息放置于sendqueue中，之后由WorkerSender进行发送。\n\n### 2.4 totalOrderPredicate\n\n```java\n    /**\n     * Check if a pair (server id, zxid) succeeds our\n     * current vote.\n     *\n     * @param id    Server identifier\n     * @param zxid  Last zxid observed by the issuer of this vote\n     */\n    protected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) {\n        LOG.debug(\"id: \" + newId + \", proposed id: \" + curId + \", zxid: 0x\" +\n                Long.toHexString(newZxid) + \", proposed zxid: 0x\" + Long.toHexString(curZxid));\n        if(self.getQuorumVerifier().getWeight(newId) == 0){\n            return false;\n        }\n\n        /*\n         * We return true if one of the following three cases hold:\n         * 1- New epoch is higher\n         * 2- New epoch is the same as current epoch, but new zxid is higher\n         * 3- New epoch is the same as current epoch, new zxid is the same\n         *  as current zxid, but server id is higher.\n         */\n        // 1\\. 判断消息里的epoch是不是比当前的大，如果大则消息中id对应的服务器就是leader\n        // 2\\. 如果epoch相等则判断zxid，如果消息里的zxid大，则消息中id对应的服务器就是leader\n        // 3\\. 如果前面两个都相等那就比较服务器id，如果大，则其就是leader\n        return ((newEpoch > curEpoch) ||\n                ((newEpoch == curEpoch) &&\n                ((newZxid > curZxid) || ((newZxid == curZxid) && (newId > curId)))));\n    }\n```\n\n说明：该函数将接收的投票与自身投票进行PK，查看是否消息中包含的服务器id是否更优，其按照epoch、zxid、id的优先级进行PK。\n\n### 2.5 termPredicate\n\n```java\n    /**\n     * Termination predicate. Given a set of votes, determines if have\n     * sufficient to declare the end of the election round.\n     * \n     * @param votes\n     *            Set of votes\n     * @param vote\n     *            Identifier of the vote received last\n     */\n    protected boolean termPredicate(Map<Long, Vote> votes, Vote vote) {\n        SyncedLearnerTracker voteSet = new SyncedLearnerTracker();\n        voteSet.addQuorumVerifier(self.getQuorumVerifier());\n        if (self.getLastSeenQuorumVerifier() != null\n                && self.getLastSeenQuorumVerifier().getVersion() > self\n                        .getQuorumVerifier().getVersion()) {\n            voteSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());\n        }\n\n        /*\n         * First make the views consistent. Sometimes peers will have different\n         * zxids for a server depending on timing.\n         */\n        for (Map.Entry<Long, Vote> entry : votes.entrySet()) {\n            if (vote.equals(entry.getValue())) {\n                voteSet.addAck(entry.getKey());\n            }\n        }\n        //统计set，查看投某个id的票数是否超过一半\n        return voteSet.hasAllQuorums();\n    }\n```\n\n该函数用于判断Leader选举是否结束，即是否有一半以上的服务器选出了相同的Leader，其过程是将收到的选票与当前选票进行对比，选票相同的放入同一个集合，之后判断选票相同的集合是否超过了半数。\n\n### 2.6 checkLeader\n\n```java\n\n     * In the case there is a leader elected, and a quorum supporting\n     * this leader, we have to check if the leader has voted and acked\n     * that it is leading. We need this check to avoid that peers keep\n     * electing over and over a peer that has crashed and it is no\n     * longer leading.\n     *\n     * @param votes set of votes\n     * @param   leader  leader id\n     * @param   electionEpoch   epoch id\n     */\n    protected boolean checkLeader(\n            Map<Long, Vote> votes,\n            long leader,\n            long electionEpoch){\n\n        boolean predicate = true;\n\n        /*\n         * If everyone else thinks I'm the leader, I must be the leader.\n         * The other two checks are just for the case in which I'm not the\n         * leader. If I'm not the leader and I haven't received a message\n         * from leader stating that it is leading, then predicate is false.\n         */\n\n        if(leader != self.getId()){// 自己不为leader\n            if(votes.get(leader) == null) predicate = false;// 还未选出leader\n            else if(votes.get(leader).getState() != ServerState.LEADING) predicate = false;// 选出的leader还未给出ack信号，其他服务器还不知道leader\n        } else if(logicalclock.get() != electionEpoch) {// 逻辑时钟不等于选举周期\n            predicate = false;\n        }\n\n        return predicate;\n    }\n```\n\n### 2.7 lookForLeader\n\n```java\n    public Vote lookForLeader() throws InterruptedException {\n        try {\n            self.jmxLeaderElectionBean = new LeaderElectionBean();\n            MBeanRegistry.getInstance().register(\n                    self.jmxLeaderElectionBean, self.jmxLocalPeerBean);\n        } catch (Exception e) {\n            LOG.warn(\"Failed to register with JMX\", e);\n            self.jmxLeaderElectionBean = null;\n        }\n        if (self.start_fle == 0) {\n           self.start_fle = Time.currentElapsedTime();\n        }\n        try {\n            HashMap<Long, Vote> recvset = new HashMap<Long, Vote>();\n\n            HashMap<Long, Vote> outofelection = new HashMap<Long, Vote>();\n\n            int notTimeout = finalizeWait;\n\n            synchronized(this){\n                // 更新逻辑时钟，每进行一轮选举，都需要更新逻辑时钟\n                logicalclock.incrementAndGet();\n                // 更新选票\n                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());\n            }\n\n            LOG.info(\"New election. My id =  \" + self.getId() +\n                    \", proposed zxid=0x\" + Long.toHexString(proposedZxid));\n            // 向其他服务器发送自己的选票\n            sendNotifications();\n\n            /*\n             * Loop in which we exchange notifications until we find a leader\n             */\n\n            while ((self.getPeerState() == ServerState.LOOKING) &&\n                    (!stop)){// 本服务器状态为LOOKING并且还未选出leader\n                /*\n                 * Remove next notification from queue, times out after 2 times\n                 * the termination time\n                 */\n                 // 从recvqueue接收队列中取出投票\n                Notification n = recvqueue.poll(notTimeout,\n                        TimeUnit.MILLISECONDS);\n\n                /*\n                 * Sends more notifications if haven't received enough.\n                 * Otherwise processes new notification.\n                 */\n                if(n == null){// 如果没有收到足够多的选票，则发送选票\n                    if(manager.haveDelivered()){// manager已经发送了所有选票消息\n                        // 向所有其他服务器发送消息\n                        sendNotifications();\n                    } else {// 还未发送所有消息\n                        // 连接其他每个服务器\n                        manager.connectAll();\n                    }\n\n                    /*\n                     * Exponential backoff\n                     */\n                    int tmpTimeOut = notTimeout*2;\n                    notTimeout = (tmpTimeOut < maxNotificationInterval?\n                            tmpTimeOut : maxNotificationInterval);\n                    LOG.info(\"Notification time out: \" + notTimeout);\n                } \n                else if (validVoter(n.sid) && validVoter(n.leader)) {// 投票者集合中包含接收到消息中的服务器id\n                    /*\n                     * Only proceed if the vote comes from a replica in the current or next\n                     * voting view for a replica in the current or next voting view.\n                     */\n                    switch (n.state) {\n                    case LOOKING:\n                        // If notification > current, replace and send messages out\n                        if (n.electionEpoch > logicalclock.get()) {// 其选举周期大于逻辑时钟\n                            // 重新赋值逻辑时钟\n                            logicalclock.set(n.electionEpoch);\n                            recvset.clear();\n                            //投票PK，并更新自己的选票\n                            if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                                    getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {\n                                updateProposal(n.leader, n.zxid, n.peerEpoch);\n                            } else {\n                                updateProposal(getInitId(),\n                                        getInitLastLoggedZxid(),\n                                        getPeerEpoch());\n                            }\n                            //发送自己的投票结果\n                            sendNotifications();\n                        } else if (n.electionEpoch < logicalclock.get()) {// 选举周期小于逻辑时钟，不做处理\n                            if(LOG.isDebugEnabled()){\n                                LOG.debug(\"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x\"\n                                        + Long.toHexString(n.electionEpoch)\n                                        + \", logicalclock=0x\" + Long.toHexString(logicalclock.get()));\n                            }\n                            break;\n                        } else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                                proposedLeader, proposedZxid, proposedEpoch)) {//选举周期等于逻辑时钟，PK选票\n                            // 更新选票\n                            updateProposal(n.leader, n.zxid, n.peerEpoch);\n                            // 发送消息\n                            sendNotifications();\n                        }\n\n                        if(LOG.isDebugEnabled()){\n                            LOG.debug(\"Adding vote: from=\" + n.sid +\n                                    \", proposed leader=\" + n.leader +\n                                    \", proposed zxid=0x\" + Long.toHexString(n.zxid) +\n                                    \", proposed election epoch=0x\" + Long.toHexString(n.electionEpoch));\n                        }\n\n                        // recvset用于记录当前服务器在本轮次的Leader选举中收到的所有外部投票\n                        recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n\n                        if (termPredicate(recvset,\n                                new Vote(proposedLeader, proposedZxid,\n                                        logicalclock.get(), proposedEpoch))) {// 若能选出leader\n\n                            // Verify if there is any change in the proposed leader\n                            while((n = recvqueue.poll(finalizeWait,\n                                    TimeUnit.MILLISECONDS)) != null){// 遍历已经接收的投票集合\n                                if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                                        proposedLeader, proposedZxid, proposedEpoch)){// 能够选出较优的服务器\n                                    recvqueue.put(n);\n                                    break;\n                                }\n                            }\n\n                            /*\n                             * This predicate is true once we don't read any new\n                             * relevant message from the reception queue\n                             */\n                            if (n == null) {\n                                self.setPeerState((proposedLeader == self.getId()) ?\n                                        ServerState.LEADING: learningState());\n                                Vote endVote = new Vote(proposedLeader,\n                                        proposedZxid, logicalclock.get(), \n                                        proposedEpoch);\n                                leaveInstance(endVote);\n                                return endVote;\n                            }\n                        }\n                        break;\n                    case OBSERVING:\n                        LOG.debug(\"Notification from observer: \" + n.sid);\n                        break;\n                    case FOLLOWING:\n                    case LEADING:// 处于LEADING状态\n                        /*\n                         * Consider all notifications from the same epoch\n                         * together.\n                         */\n                        if(n.electionEpoch == logicalclock.get()){// 与逻辑时钟相等\n                            // 将该服务器和选票信息放入recvset中\n                            recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n                            // 判断是否完成了leader选举\n                            if(termPredicate(recvset, new Vote(n.version, n.leader,\n                                            n.zxid, n.electionEpoch, n.peerEpoch, n.state))\n                                            && checkLeader(outofelection, n.leader, n.electionEpoch)) {\n                                // 设置本服务器的状态\n                                self.setPeerState((n.leader == self.getId()) ?\n                                        ServerState.LEADING: learningState());\n                                // 创建投票信息\n                                Vote endVote = new Vote(n.leader, \n                                        n.zxid, n.electionEpoch, n.peerEpoch);\n                                leaveInstance(endVote);\n                                return endVote;\n                            }\n                        }\n\n                        /*\n                         * Before joining an established ensemble, verify that\n                         * a majority are following the same leader.\n                         */\n                        outofelection.put(n.sid, new Vote(n.version, n.leader, \n                                n.zxid, n.electionEpoch, n.peerEpoch, n.state));\n                        if (termPredicate(outofelection, new Vote(n.version, n.leader,\n                                n.zxid, n.electionEpoch, n.peerEpoch, n.state))\n                                && checkLeader(outofelection, n.leader, n.electionEpoch)) {\n                            synchronized(this){\n                                logicalclock.set(n.electionEpoch);\n                                self.setPeerState((n.leader == self.getId()) ?\n                                        ServerState.LEADING: learningState());\n                            }\n                            Vote endVote = new Vote(n.leader, n.zxid, \n                                    n.electionEpoch, n.peerEpoch);\n                            leaveInstance(endVote);\n                            return endVote;\n                        }\n                        break;\n                    default:\n                        LOG.warn(\"Notification state unrecoginized: \" + n.state\n                              + \" (n.state), \" + n.sid + \" (n.sid)\");\n                        break;\n                    }\n                } else {\n                    if (!validVoter(n.leader)) {\n                        LOG.warn(\"Ignoring notification for non-cluster member sid {} from sid {}\", n.leader, n.sid);\n                    }\n                    if (!validVoter(n.sid)) {\n                        LOG.warn(\"Ignoring notification for sid {} from non-quorum member sid {}\", n.leader, n.sid);\n                    }\n                }\n            }\n            return null;\n        } finally {\n            try {\n                if(self.jmxLeaderElectionBean != null){\n                    MBeanRegistry.getInstance().unregister(\n                            self.jmxLeaderElectionBean);\n                }\n            } catch (Exception e) {\n                LOG.warn(\"Failed to unregister with JMX\", e);\n            }\n            self.jmxLeaderElectionBean = null;\n            LOG.debug(\"Number of connection processing threads: {}\",\n                    manager.getConnectionThreadCount());\n        }\n    }\n```\n\n该函数用于开始新一轮的Leader选举。\n\n","source":"_posts/2019-08-20-zookeeper集群启动流程、选举流程3.5.5.md","raw":"---\nlayout:     post\ntitle:      \"zookeeper集群启动流程、选举流程3.5.5\"\ndate:       2019-08-20\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n[toc]\n# zookeeper 集群启动流程、选举流程3.5.5\n\n## 1.QuorumPeerMain\n\nZookeeper的启动入口是`QuorumPeerMain`的`main`方法。启动时需要传入zoo.cfg文件参数。\n\n```java\n    public static void main(String[] args) {\n        QuorumPeerMain main = new QuorumPeerMain();\n        try {\n            main.initializeAndRun(args);\n        } catch (IllegalArgumentException e) {\n            LOG.error(\"Invalid arguments, exiting abnormally\", e);\n            LOG.info(USAGE);\n            System.err.println(USAGE);\n            System.exit(2);\n        } catch (ConfigException e) {\n            LOG.error(\"Invalid config, exiting abnormally\", e);\n            System.err.println(\"Invalid config, exiting abnormally\");\n            System.exit(2);\n        } catch (DatadirException e) {\n            LOG.error(\"Unable to access datadir, exiting abnormally\", e);\n            System.err.println(\"Unable to access datadir, exiting abnormally\");\n            System.exit(3);\n        } catch (AdminServerException e) {\n            LOG.error(\"Unable to start AdminServer, exiting abnormally\", e);\n            System.err.println(\"Unable to start AdminServer, exiting abnormally\");\n            System.exit(4);\n        } catch (Exception e) {\n            LOG.error(\"Unexpected exception, exiting abnormally\", e);\n            System.exit(1);\n        }\n        LOG.info(\"Exiting normally\");\n        System.exit(0);\n    }\n    \n    protected void initializeAndRun(String[] args)\n        throws ConfigException, IOException, AdminServerException\n    {\n        //解析配置文件\n        QuorumPeerConfig config = new QuorumPeerConfig();\n        if (args.length == 1) {\n            config.parse(args[0]);\n        }\n\n        // Start and schedule the the purge task\n        //定时清理日志文件\n        DatadirCleanupManager purgeMgr = new DatadirCleanupManager(config\n                .getDataDir(), config.getDataLogDir(), config\n                .getSnapRetainCount(), config.getPurgeInterval());\n        purgeMgr.start();\n        //单机模式使用ZooKeeperServerMain\n        if (args.length == 1 && config.isDistributed()) {\n            runFromConfig(config);\n        } else {\n            LOG.warn(\"Either no config or no quorum defined in config, running \"\n                    + \" in standalone mode\");\n            // there is only server in the quorum -- run as standalone\n            ZooKeeperServerMain.main(args);\n        }\n    }\n```\n\n解析配置文件，如果是单机模式使用ZooKeeperServerMain，否则调runFromConfig。\n\n```java\n    public void runFromConfig(QuorumPeerConfig config)\n            throws IOException, AdminServerException\n    {\n      try {\n          ManagedUtil.registerLog4jMBeans();\n      } catch (JMException e) {\n          LOG.warn(\"Unable to register log4j JMX control\", e);\n      }\n\n      LOG.info(\"Starting quorum peer\");\n      try {\n          ServerCnxnFactory cnxnFactory = null;\n          ServerCnxnFactory secureCnxnFactory = null;\n          //初始化cnxnFactory，默认NIOServerCnxnFactory\n          if (config.getClientPortAddress() != null) {\n              cnxnFactory = ServerCnxnFactory.createFactory();\n              cnxnFactory.configure(config.getClientPortAddress(),\n                      config.getMaxClientCnxns(),\n                      false);\n          }\n          //初始化secureCnxnFactory\n          if (config.getSecureClientPortAddress() != null) {\n              secureCnxnFactory = ServerCnxnFactory.createFactory();\n              secureCnxnFactory.configure(config.getSecureClientPortAddress(),\n                      config.getMaxClientCnxns(),\n                      true);\n          }\n          //new QuorumPeer()，各种配置\n          quorumPeer = getQuorumPeer();\n          quorumPeer.setTxnFactory(new FileTxnSnapLog(\n                      config.getDataLogDir(),\n                      config.getDataDir()));\n          quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n          quorumPeer.enableLocalSessionsUpgrading(\n              config.isLocalSessionsUpgradingEnabled());\n          //quorumPeer.setQuorumPeers(config.getAllMembers());\n          quorumPeer.setElectionType(config.getElectionAlg());\n          quorumPeer.setMyid(config.getServerId());\n          quorumPeer.setTickTime(config.getTickTime());\n          quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n          quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n          quorumPeer.setInitLimit(config.getInitLimit());\n          quorumPeer.setSyncLimit(config.getSyncLimit());\n          quorumPeer.setConfigFileName(config.getConfigFilename());\n          quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n          quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n          if (config.getLastSeenQuorumVerifier()!=null) {\n              quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n          }\n          quorumPeer.initConfigInZKDatabase();\n          quorumPeer.setCnxnFactory(cnxnFactory);\n          quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n          quorumPeer.setSslQuorum(config.isSslQuorum());\n          quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n          quorumPeer.setLearnerType(config.getPeerType());\n          quorumPeer.setSyncEnabled(config.getSyncEnabled());\n          quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n          if (config.sslQuorumReloadCertFiles) {\n              quorumPeer.getX509Util().enableCertFileReloading();\n          }\n\n          // sets quorum sasl authentication configurations\n          quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n          if(quorumPeer.isQuorumSaslAuthEnabled()){\n              quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n              quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n              quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n              quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n              quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n          }\n          quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n          quorumPeer.initialize();\n          \n          quorumPeer.start();\n          //quorumPeer继承ZooKeeperThread，这里调用线程的join方法，阻塞直到线程执行结束。\n          quorumPeer.join();\n      } catch (InterruptedException e) {\n          // warn, but generally this is ok\n          LOG.warn(\"Quorum Peer interrupted\", e);\n      }\n    }\n```\n\n初始化`quorumPeer`并初始化各种配置，最后调用`initialize`和`start`方法。\n\n```java\n    public void initialize() throws SaslException {\n        // init quorum auth server & learner\n        if (isQuorumSaslAuthEnabled()) {\n            Set<String> authzHosts = new HashSet<String>();\n            for (QuorumServer qs : getView().values()) {\n                authzHosts.add(qs.hostname);\n            }\n            authServer = new SaslQuorumAuthServer(isQuorumServerSaslAuthRequired(),\n                    quorumServerLoginContext, authzHosts);\n            authLearner = new SaslQuorumAuthLearner(isQuorumLearnerSaslAuthRequired(),\n                    quorumServicePrincipal, quorumLearnerLoginContext);\n        } else {\n            authServer = new NullQuorumAuthServer();\n            authLearner = new NullQuorumAuthLearner();\n        }\n    }\n```\n\n看名字是初始化安全认证的服务，因为跟主流程无关就不细看了。\n\n```java\n    @Override\n    public synchronized void start() {\n        if (!getView().containsKey(myid)) {\n            throw new RuntimeException(\"My id \" + myid + \" not in the peer list\");\n         }\n         //加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch\n        loadDataBase();\n        //启动ServerCnxnFactory\n        startServerCnxnFactory();\n        try {\n            adminServer.start();\n        } catch (AdminServerException e) {\n            LOG.warn(\"Problem starting AdminServer\", e);\n            System.out.println(e);\n        }\n        //开启选举\n        startLeaderElection();\n        //启动线程\n        super.start();\n    }\n```\n\n`start`方法主要做的几件事情：\n\n1. 加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch。\n2. 启动ServerCnxnFactory\n3. `startLeaderElection`开启选举。\n4. 启动线程。\n\n```java\n    synchronized public void startLeaderElection() {\n       try {\n            //初始化默认looking状态，初始化自己的选票\n           if (getPeerState() == ServerState.LOOKING) {\n               currentVote = new Vote(myid, getLastLoggedZxid(), getCurrentEpoch());\n           }\n       } catch(IOException e) {\n           RuntimeException re = new RuntimeException(e.getMessage());\n           re.setStackTrace(e.getStackTrace());\n           throw re;\n       }\n        //electionType默认为3，这里已经废弃了。\n        if (electionType == 0) {\n            try {\n                udpSocket = new DatagramSocket(getQuorumAddress().getPort());\n                responder = new ResponderThread();\n                responder.start();\n            } catch (SocketException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        //创建选举算法,Election对象\n        this.electionAlg = createElectionAlgorithm(electionType);\n    }\n    \n    protected Election createElectionAlgorithm(int electionAlgorithm){\n        Election le=null;\n\n        switch (electionAlgorithm) {\n        case 0:\n            le = new LeaderElection(this);\n            break;\n        case 1:\n            le = new AuthFastLeaderElection(this);\n            break;\n        case 2:\n            le = new AuthFastLeaderElection(this, true);\n            break;\n        case 3:\n            //electionAlgorithm默认为3，所以使用FastLeaderElection选举算法\n            QuorumCnxManager qcm = createCnxnManager();\n            QuorumCnxManager oldQcm = qcmRef.getAndSet(qcm);\n            if (oldQcm != null) {\n                LOG.warn(\"Clobbering already-set QuorumCnxManager (restarting leader election?)\");\n                oldQcm.halt();\n            }\n            QuorumCnxManager.Listener listener = qcm.listener;\n            if(listener != null){\n                listener.start();\n                FastLeaderElection fle = new FastLeaderElection(this, qcm);\n                fle.start();\n                le = fle;\n            } else {\n                LOG.error(\"Null listener when initializing cnx manager\");\n            }\n            break;\n        default:\n            assert false;\n        }\n        return le;\n    }\n```\n\n\n在看最核心的`run`方法。\n\n```java\n    public void run() {\n    \n        ...\n\n        try {\n            /*\n             * Main loop\n             */\n            while (running) {\n                switch (getPeerState()) {\n                case LOOKING:\n                    LOG.info(\"LOOKING\");\n                    //如果开启了readonly模式，启动ReadOnlyZooKeeperServer\n                    if (Boolean.getBoolean(\"readonlymode.enabled\")) {\n                        LOG.info(\"Attempting to start ReadOnlyZooKeeperServer\");\n\n                        // Create read-only server but don't start it immediately\n                        final ReadOnlyZooKeeperServer roZk =\n                            new ReadOnlyZooKeeperServer(logFactory, this, this.zkDb);\n    \n                        // Instead of starting roZk immediately, wait some grace\n                        // period before we decide we're partitioned.\n                        //\n                        // Thread is used here because otherwise it would require\n                        // changes in each of election strategy classes which is\n                        // unnecessary code coupling.\n                        Thread roZkMgr = new Thread() {\n                            public void run() {\n                                try {\n                                    // lower-bound grace period to 2 secs\n                                    sleep(Math.max(2000, tickTime));\n                                    if (ServerState.LOOKING.equals(getPeerState())) {\n                                        roZk.startup();\n                                    }\n                                } catch (InterruptedException e) {\n                                    LOG.info(\"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started\");\n                                } catch (Exception e) {\n                                    LOG.error(\"FAILED to start ReadOnlyZooKeeperServer\", e);\n                                }\n                            }\n                        };\n                        try {\n                            roZkMgr.start();\n                            reconfigFlagClear();\n                            if (shuttingDownLE) {\n                                shuttingDownLE = false;\n                                startLeaderElection();\n                            }\n                            setCurrentVote(makeLEStrategy().lookForLeader());\n                        } catch (Exception e) {\n                            LOG.warn(\"Unexpected exception\", e);\n                            setPeerState(ServerState.LOOKING);\n                        } finally {\n                            // If the thread is in the the grace period, interrupt\n                            // to come out of waiting.\n                            roZkMgr.interrupt();\n                            roZk.shutdown();\n                        }\n                    } else {\n                        try {\n                           reconfigFlagClear();\n                            if (shuttingDownLE) {\n                               shuttingDownLE = false;\n                               startLeaderElection();\n                               }\n                            //选举\n                            setCurrentVote(makeLEStrategy().lookForLeader());\n                        } catch (Exception e) {\n                            LOG.warn(\"Unexpected exception\", e);\n                            setPeerState(ServerState.LOOKING);\n                        }                        \n                    }\n                    break;\n                case OBSERVING:\n                    try {\n                        LOG.info(\"OBSERVING\");\n                        setObserver(makeObserver(logFactory));\n                        observer.observeLeader();\n                    } catch (Exception e) {\n                        LOG.warn(\"Unexpected exception\",e );\n                    } finally {\n                        observer.shutdown();\n                        setObserver(null);  \n                       updateServerState();\n                    }\n                    break;\n                case FOLLOWING:\n                    try {\n                       LOG.info(\"FOLLOWING\");\n                        setFollower(makeFollower(logFactory));\n                        follower.followLeader();\n                    } catch (Exception e) {\n                       LOG.warn(\"Unexpected exception\",e);\n                    } finally {\n                       follower.shutdown();\n                       setFollower(null);\n                       updateServerState();\n                    }\n                    break;\n                case LEADING:\n                    LOG.info(\"LEADING\");\n                    try {\n                        setLeader(makeLeader(logFactory));\n                        leader.lead();\n                        setLeader(null);\n                    } catch (Exception e) {\n                        LOG.warn(\"Unexpected exception\",e);\n                    } finally {\n                        if (leader != null) {\n                            leader.shutdown(\"Forcing shutdown\");\n                            setLeader(null);\n                        }\n                        updateServerState();\n                    }\n                    break;\n                }\n                start_fle = Time.currentElapsedTime();\n            }\n        }\n        ...\n    }\n```\n\n`run`方法循环处理服务器的4种状态。\n\n## 2.FastLeaderElection\n\n当服务器处于looking状态时，会调用`FastLeaderElection`的`lookForLeader`开启新一轮的选举。`FastLeaderElection`有2个比较重要的内部类`WorkerReceiver`和`WorkerSender`，先看这两个内部类的代码。\n\n### 2.1 WorkerReceiver\n\n```java\nclass WorkerReceiver extends ZooKeeperThread  {\n            // 是否终止\n            volatile boolean stop;\n            // 服务器之间的连接\n            QuorumCnxManager manager;\n\n            WorkerReceiver(QuorumCnxManager manager) {\n                super(\"WorkerReceiver\");\n                this.stop = false;\n                this.manager = manager;\n            }\n\n            public void run() {\n\n                Message response;\n                while (!stop) {\n                    // Sleeps on receive\n                    try {\n                        // 从recvQueue中取出一个选举投票消息（从其他服务器发送过来）\n                        response = manager.pollRecvQueue(3000, TimeUnit.MILLISECONDS);\n                        // 无投票，跳过\n                        if(response == null) continue;\n\n                        ...\n                       \n                        /*\n                         * If it is from a non-voting server (such as an observer or\n                         * a non-voting follower), respond right away.\n                         */\n                        if(!validVoter(response.sid)) {\n                            //当前的投票者集合不包含服务器，获取自己的投票加入sendqueue\n                            Vote current = self.getCurrentVote();\n                            QuorumVerifier qv = self.getQuorumVerifier();\n                            ToSend notmsg = new ToSend(ToSend.mType.notification,\n                                    current.getId(),\n                                    current.getZxid(),\n                                    logicalclock.get(),\n                                    self.getPeerState(),\n                                    response.sid,\n                                    current.getPeerEpoch(),\n                                    qv.toString().getBytes());\n\n                            sendqueue.offer(notmsg);\n                        } else {\n                            // Receive new message\n                            if (LOG.isDebugEnabled()) {\n                                LOG.debug(\"Receive new notification message. My id = \"\n                                        + self.getId());\n                            }\n\n                            // State of peer that sent this message\n                            //获取对面服务器状态\n                            QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;\n                            switch (rstate) {\n                            case 0:\n                                ackstate = QuorumPeer.ServerState.LOOKING;\n                                break;\n                            case 1:\n                                ackstate = QuorumPeer.ServerState.FOLLOWING;\n                                break;\n                            case 2:\n                                ackstate = QuorumPeer.ServerState.LEADING;\n                                break;\n                            case 3:\n                                ackstate = QuorumPeer.ServerState.OBSERVING;\n                                break;\n                            default:\n                                continue;\n                            }\n\n                            n.leader = rleader;\n                            n.zxid = rzxid;\n                            n.electionEpoch = relectionEpoch;\n                            n.state = ackstate;\n                            n.sid = response.sid;\n                            n.peerEpoch = rpeerepoch;\n                            n.version = version;\n                            n.qv = rqv;\n                            /*\n                             * Print notification info\n                             */\n                            if(LOG.isInfoEnabled()){\n                                printNotification(n);\n                            }\n\n                            /*\n                             * If this server is looking, then send proposed leader\n                             */\n                            //自己为looking的状态下\n                            if(self.getPeerState() == QuorumPeer.ServerState.LOOKING){\n                                recvqueue.offer(n);\n\n                                /*\n                                 * Send a notification back if the peer that sent this\n                                 * message is also looking and its logical clock is\n                                 * lagging behind.\n                                 */\n                                 //推选者服务器为LOOKING状态&&选举周期小于逻辑时钟\n                                if((ackstate == QuorumPeer.ServerState.LOOKING)\n                                        && (n.electionEpoch < logicalclock.get())){\n                                    // 创建新的投票\n                                    Vote v = getVote();\n                                    QuorumVerifier qv = self.getQuorumVerifier();\n                                    // 构造新的发送消息（本服务器自己的投票）\n                                    ToSend notmsg = new ToSend(ToSend.mType.notification,\n                                            v.getId(),\n                                            v.getZxid(),\n                                            logicalclock.get(),\n                                            self.getPeerState(),\n                                            response.sid,\n                                            v.getPeerEpoch(),\n                                            qv.toString().getBytes());\n                                    // 将发送消息放置于队列，等待发送\n                                    sendqueue.offer(notmsg);\n                                }\n                            } else {\n                                /*\n                                 * If this server is not looking, but the one that sent the ack\n                                 * is looking, then send back what it believes to be the leader.\n                                 */\n                                // 本服务器状态不为LOOKING，推送服务器是LOOKING状态，发送自己的选票\n                                Vote current = self.getCurrentVote();\n                                if(ackstate == QuorumPeer.ServerState.LOOKING){\n                                    if(LOG.isDebugEnabled()){\n                                        LOG.debug(\"Sending new notification. My id ={} recipient={} zxid=0x{} leader={} config version = {}\",\n                                                self.getId(),\n                                                response.sid,\n                                                Long.toHexString(current.getZxid()),\n                                                current.getId(),\n                                                Long.toHexString(self.getQuorumVerifier().getVersion()));\n                                    }\n\n                                    QuorumVerifier qv = self.getQuorumVerifier();\n                                    ToSend notmsg = new ToSend(\n                                            ToSend.mType.notification,\n                                            current.getId(),\n                                            current.getZxid(),\n                                            current.getElectionEpoch(),\n                                            self.getPeerState(),\n                                            response.sid,\n                                            current.getPeerEpoch(),\n                                            qv.toString().getBytes());\n                                    sendqueue.offer(notmsg);\n                                }\n                            }\n                        }\n                    } catch (InterruptedException e) {\n                        LOG.warn(\"Interrupted Exception while waiting for new message\" +\n                                e.toString());\n                    }\n                }\n                LOG.info(\"WorkerReceiver is down\");\n            }\n        }\n```\n\nWorkerReceiver实现了Runnable接口，是选票接收器。其会不断地从QuorumCnxManager中获取其他服务器发来的选举消息，并将其转换成一个选票，然后保存到recvqueue中，在选票接收过程中，如果发现该外部选票的选举轮次小于当前服务器的，那么忽略该外部投票，同时立即发送自己的内部投票。\n\n### 2.2 WorkerSender\n\n```java\n        class WorkerSender extends ZooKeeperThread {\n            volatile boolean stop;\n            QuorumCnxManager manager;\n\n            WorkerSender(QuorumCnxManager manager){\n                super(\"WorkerSender\");\n                this.stop = false;\n                this.manager = manager;\n            }\n\n            public void run() {\n                while (!stop) {\n                    try {\n                        ToSend m = sendqueue.poll(3000, TimeUnit.MILLISECONDS);\n                        if(m == null) continue;\n\n                        process(m);\n                    } catch (InterruptedException e) {\n                        break;\n                    }\n                }\n                LOG.info(\"WorkerSender is down\");\n            }\n\n            /**\n             * Called by run() once there is a new message to send.\n             *\n             * @param m     message to send\n             */\n            void process(ToSend m) {\n                ByteBuffer requestBuffer = buildMsg(m.state.ordinal(),\n                                                    m.leader,\n                                                    m.zxid,\n                                                    m.electionEpoch,\n                                                    m.peerEpoch,\n                                                    m.configData);\n\n                manager.toSend(m.sid, requestBuffer);\n\n            }\n        }\n```\n\nWorkerSender也实现了Runnable接口，为选票发送器，其会不断地从sendqueue中获取待发送的选票，并将其传递到底层QuorumCnxManager中\n\n### 2.3 sendNotifications\n\n```java\n    /**\n     * Send notifications to all peers upon a change in our vote\n     */\n    private void sendNotifications() {\n        // 遍历投票参与者集合\n        for (long sid : self.getCurrentAndNextConfigVoters()) {\n            QuorumVerifier qv = self.getQuorumVerifier();\n            // 构造发送消息\n            ToSend notmsg = new ToSend(ToSend.mType.notification,\n                    proposedLeader,\n                    proposedZxid,\n                    logicalclock.get(),\n                    QuorumPeer.ServerState.LOOKING,\n                    sid,\n                    proposedEpoch, qv.toString().getBytes());\n            if(LOG.isDebugEnabled()){\n                LOG.debug(\"Sending Notification: \" + proposedLeader + \" (n.leader), 0x\"  +\n                      Long.toHexString(proposedZxid) + \" (n.zxid), 0x\" + Long.toHexString(logicalclock.get())  +\n                      \" (n.round), \" + sid + \" (recipient), \" + self.getId() +\n                      \" (myid), 0x\" + Long.toHexString(proposedEpoch) + \" (n.peerEpoch)\");\n            }\n            // 将发送消息放置于队列\n            sendqueue.offer(notmsg);\n        }\n    }\n```\n\n其会遍历所有的参与者投票集合，然后将自己的选票信息发送至上述所有的投票者集合，其并非同步发送，而是将ToSend消息放置于sendqueue中，之后由WorkerSender进行发送。\n\n### 2.4 totalOrderPredicate\n\n```java\n    /**\n     * Check if a pair (server id, zxid) succeeds our\n     * current vote.\n     *\n     * @param id    Server identifier\n     * @param zxid  Last zxid observed by the issuer of this vote\n     */\n    protected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) {\n        LOG.debug(\"id: \" + newId + \", proposed id: \" + curId + \", zxid: 0x\" +\n                Long.toHexString(newZxid) + \", proposed zxid: 0x\" + Long.toHexString(curZxid));\n        if(self.getQuorumVerifier().getWeight(newId) == 0){\n            return false;\n        }\n\n        /*\n         * We return true if one of the following three cases hold:\n         * 1- New epoch is higher\n         * 2- New epoch is the same as current epoch, but new zxid is higher\n         * 3- New epoch is the same as current epoch, new zxid is the same\n         *  as current zxid, but server id is higher.\n         */\n        // 1\\. 判断消息里的epoch是不是比当前的大，如果大则消息中id对应的服务器就是leader\n        // 2\\. 如果epoch相等则判断zxid，如果消息里的zxid大，则消息中id对应的服务器就是leader\n        // 3\\. 如果前面两个都相等那就比较服务器id，如果大，则其就是leader\n        return ((newEpoch > curEpoch) ||\n                ((newEpoch == curEpoch) &&\n                ((newZxid > curZxid) || ((newZxid == curZxid) && (newId > curId)))));\n    }\n```\n\n说明：该函数将接收的投票与自身投票进行PK，查看是否消息中包含的服务器id是否更优，其按照epoch、zxid、id的优先级进行PK。\n\n### 2.5 termPredicate\n\n```java\n    /**\n     * Termination predicate. Given a set of votes, determines if have\n     * sufficient to declare the end of the election round.\n     * \n     * @param votes\n     *            Set of votes\n     * @param vote\n     *            Identifier of the vote received last\n     */\n    protected boolean termPredicate(Map<Long, Vote> votes, Vote vote) {\n        SyncedLearnerTracker voteSet = new SyncedLearnerTracker();\n        voteSet.addQuorumVerifier(self.getQuorumVerifier());\n        if (self.getLastSeenQuorumVerifier() != null\n                && self.getLastSeenQuorumVerifier().getVersion() > self\n                        .getQuorumVerifier().getVersion()) {\n            voteSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());\n        }\n\n        /*\n         * First make the views consistent. Sometimes peers will have different\n         * zxids for a server depending on timing.\n         */\n        for (Map.Entry<Long, Vote> entry : votes.entrySet()) {\n            if (vote.equals(entry.getValue())) {\n                voteSet.addAck(entry.getKey());\n            }\n        }\n        //统计set，查看投某个id的票数是否超过一半\n        return voteSet.hasAllQuorums();\n    }\n```\n\n该函数用于判断Leader选举是否结束，即是否有一半以上的服务器选出了相同的Leader，其过程是将收到的选票与当前选票进行对比，选票相同的放入同一个集合，之后判断选票相同的集合是否超过了半数。\n\n### 2.6 checkLeader\n\n```java\n\n     * In the case there is a leader elected, and a quorum supporting\n     * this leader, we have to check if the leader has voted and acked\n     * that it is leading. We need this check to avoid that peers keep\n     * electing over and over a peer that has crashed and it is no\n     * longer leading.\n     *\n     * @param votes set of votes\n     * @param   leader  leader id\n     * @param   electionEpoch   epoch id\n     */\n    protected boolean checkLeader(\n            Map<Long, Vote> votes,\n            long leader,\n            long electionEpoch){\n\n        boolean predicate = true;\n\n        /*\n         * If everyone else thinks I'm the leader, I must be the leader.\n         * The other two checks are just for the case in which I'm not the\n         * leader. If I'm not the leader and I haven't received a message\n         * from leader stating that it is leading, then predicate is false.\n         */\n\n        if(leader != self.getId()){// 自己不为leader\n            if(votes.get(leader) == null) predicate = false;// 还未选出leader\n            else if(votes.get(leader).getState() != ServerState.LEADING) predicate = false;// 选出的leader还未给出ack信号，其他服务器还不知道leader\n        } else if(logicalclock.get() != electionEpoch) {// 逻辑时钟不等于选举周期\n            predicate = false;\n        }\n\n        return predicate;\n    }\n```\n\n### 2.7 lookForLeader\n\n```java\n    public Vote lookForLeader() throws InterruptedException {\n        try {\n            self.jmxLeaderElectionBean = new LeaderElectionBean();\n            MBeanRegistry.getInstance().register(\n                    self.jmxLeaderElectionBean, self.jmxLocalPeerBean);\n        } catch (Exception e) {\n            LOG.warn(\"Failed to register with JMX\", e);\n            self.jmxLeaderElectionBean = null;\n        }\n        if (self.start_fle == 0) {\n           self.start_fle = Time.currentElapsedTime();\n        }\n        try {\n            HashMap<Long, Vote> recvset = new HashMap<Long, Vote>();\n\n            HashMap<Long, Vote> outofelection = new HashMap<Long, Vote>();\n\n            int notTimeout = finalizeWait;\n\n            synchronized(this){\n                // 更新逻辑时钟，每进行一轮选举，都需要更新逻辑时钟\n                logicalclock.incrementAndGet();\n                // 更新选票\n                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());\n            }\n\n            LOG.info(\"New election. My id =  \" + self.getId() +\n                    \", proposed zxid=0x\" + Long.toHexString(proposedZxid));\n            // 向其他服务器发送自己的选票\n            sendNotifications();\n\n            /*\n             * Loop in which we exchange notifications until we find a leader\n             */\n\n            while ((self.getPeerState() == ServerState.LOOKING) &&\n                    (!stop)){// 本服务器状态为LOOKING并且还未选出leader\n                /*\n                 * Remove next notification from queue, times out after 2 times\n                 * the termination time\n                 */\n                 // 从recvqueue接收队列中取出投票\n                Notification n = recvqueue.poll(notTimeout,\n                        TimeUnit.MILLISECONDS);\n\n                /*\n                 * Sends more notifications if haven't received enough.\n                 * Otherwise processes new notification.\n                 */\n                if(n == null){// 如果没有收到足够多的选票，则发送选票\n                    if(manager.haveDelivered()){// manager已经发送了所有选票消息\n                        // 向所有其他服务器发送消息\n                        sendNotifications();\n                    } else {// 还未发送所有消息\n                        // 连接其他每个服务器\n                        manager.connectAll();\n                    }\n\n                    /*\n                     * Exponential backoff\n                     */\n                    int tmpTimeOut = notTimeout*2;\n                    notTimeout = (tmpTimeOut < maxNotificationInterval?\n                            tmpTimeOut : maxNotificationInterval);\n                    LOG.info(\"Notification time out: \" + notTimeout);\n                } \n                else if (validVoter(n.sid) && validVoter(n.leader)) {// 投票者集合中包含接收到消息中的服务器id\n                    /*\n                     * Only proceed if the vote comes from a replica in the current or next\n                     * voting view for a replica in the current or next voting view.\n                     */\n                    switch (n.state) {\n                    case LOOKING:\n                        // If notification > current, replace and send messages out\n                        if (n.electionEpoch > logicalclock.get()) {// 其选举周期大于逻辑时钟\n                            // 重新赋值逻辑时钟\n                            logicalclock.set(n.electionEpoch);\n                            recvset.clear();\n                            //投票PK，并更新自己的选票\n                            if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                                    getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {\n                                updateProposal(n.leader, n.zxid, n.peerEpoch);\n                            } else {\n                                updateProposal(getInitId(),\n                                        getInitLastLoggedZxid(),\n                                        getPeerEpoch());\n                            }\n                            //发送自己的投票结果\n                            sendNotifications();\n                        } else if (n.electionEpoch < logicalclock.get()) {// 选举周期小于逻辑时钟，不做处理\n                            if(LOG.isDebugEnabled()){\n                                LOG.debug(\"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x\"\n                                        + Long.toHexString(n.electionEpoch)\n                                        + \", logicalclock=0x\" + Long.toHexString(logicalclock.get()));\n                            }\n                            break;\n                        } else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                                proposedLeader, proposedZxid, proposedEpoch)) {//选举周期等于逻辑时钟，PK选票\n                            // 更新选票\n                            updateProposal(n.leader, n.zxid, n.peerEpoch);\n                            // 发送消息\n                            sendNotifications();\n                        }\n\n                        if(LOG.isDebugEnabled()){\n                            LOG.debug(\"Adding vote: from=\" + n.sid +\n                                    \", proposed leader=\" + n.leader +\n                                    \", proposed zxid=0x\" + Long.toHexString(n.zxid) +\n                                    \", proposed election epoch=0x\" + Long.toHexString(n.electionEpoch));\n                        }\n\n                        // recvset用于记录当前服务器在本轮次的Leader选举中收到的所有外部投票\n                        recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n\n                        if (termPredicate(recvset,\n                                new Vote(proposedLeader, proposedZxid,\n                                        logicalclock.get(), proposedEpoch))) {// 若能选出leader\n\n                            // Verify if there is any change in the proposed leader\n                            while((n = recvqueue.poll(finalizeWait,\n                                    TimeUnit.MILLISECONDS)) != null){// 遍历已经接收的投票集合\n                                if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,\n                                        proposedLeader, proposedZxid, proposedEpoch)){// 能够选出较优的服务器\n                                    recvqueue.put(n);\n                                    break;\n                                }\n                            }\n\n                            /*\n                             * This predicate is true once we don't read any new\n                             * relevant message from the reception queue\n                             */\n                            if (n == null) {\n                                self.setPeerState((proposedLeader == self.getId()) ?\n                                        ServerState.LEADING: learningState());\n                                Vote endVote = new Vote(proposedLeader,\n                                        proposedZxid, logicalclock.get(), \n                                        proposedEpoch);\n                                leaveInstance(endVote);\n                                return endVote;\n                            }\n                        }\n                        break;\n                    case OBSERVING:\n                        LOG.debug(\"Notification from observer: \" + n.sid);\n                        break;\n                    case FOLLOWING:\n                    case LEADING:// 处于LEADING状态\n                        /*\n                         * Consider all notifications from the same epoch\n                         * together.\n                         */\n                        if(n.electionEpoch == logicalclock.get()){// 与逻辑时钟相等\n                            // 将该服务器和选票信息放入recvset中\n                            recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));\n                            // 判断是否完成了leader选举\n                            if(termPredicate(recvset, new Vote(n.version, n.leader,\n                                            n.zxid, n.electionEpoch, n.peerEpoch, n.state))\n                                            && checkLeader(outofelection, n.leader, n.electionEpoch)) {\n                                // 设置本服务器的状态\n                                self.setPeerState((n.leader == self.getId()) ?\n                                        ServerState.LEADING: learningState());\n                                // 创建投票信息\n                                Vote endVote = new Vote(n.leader, \n                                        n.zxid, n.electionEpoch, n.peerEpoch);\n                                leaveInstance(endVote);\n                                return endVote;\n                            }\n                        }\n\n                        /*\n                         * Before joining an established ensemble, verify that\n                         * a majority are following the same leader.\n                         */\n                        outofelection.put(n.sid, new Vote(n.version, n.leader, \n                                n.zxid, n.electionEpoch, n.peerEpoch, n.state));\n                        if (termPredicate(outofelection, new Vote(n.version, n.leader,\n                                n.zxid, n.electionEpoch, n.peerEpoch, n.state))\n                                && checkLeader(outofelection, n.leader, n.electionEpoch)) {\n                            synchronized(this){\n                                logicalclock.set(n.electionEpoch);\n                                self.setPeerState((n.leader == self.getId()) ?\n                                        ServerState.LEADING: learningState());\n                            }\n                            Vote endVote = new Vote(n.leader, n.zxid, \n                                    n.electionEpoch, n.peerEpoch);\n                            leaveInstance(endVote);\n                            return endVote;\n                        }\n                        break;\n                    default:\n                        LOG.warn(\"Notification state unrecoginized: \" + n.state\n                              + \" (n.state), \" + n.sid + \" (n.sid)\");\n                        break;\n                    }\n                } else {\n                    if (!validVoter(n.leader)) {\n                        LOG.warn(\"Ignoring notification for non-cluster member sid {} from sid {}\", n.leader, n.sid);\n                    }\n                    if (!validVoter(n.sid)) {\n                        LOG.warn(\"Ignoring notification for sid {} from non-quorum member sid {}\", n.leader, n.sid);\n                    }\n                }\n            }\n            return null;\n        } finally {\n            try {\n                if(self.jmxLeaderElectionBean != null){\n                    MBeanRegistry.getInstance().unregister(\n                            self.jmxLeaderElectionBean);\n                }\n            } catch (Exception e) {\n                LOG.warn(\"Failed to unregister with JMX\", e);\n            }\n            self.jmxLeaderElectionBean = null;\n            LOG.debug(\"Number of connection processing threads: {}\",\n                    manager.getConnectionThreadCount());\n        }\n    }\n```\n\n该函数用于开始新一轮的Leader选举。\n\n","slug":"2019-08-20-zookeeper集群启动流程、选举流程3.5.5","published":1,"updated":"2019-08-20T13:11:13.695Z","comments":1,"photos":[],"link":"","_id":"ckbroc4a9000a1fythec97v8m","content":"<p>[toc]</p>\n<h1 id=\"zookeeper-集群启动流程、选举流程3-5-5\"><a href=\"#zookeeper-集群启动流程、选举流程3-5-5\" class=\"headerlink\" title=\"zookeeper 集群启动流程、选举流程3.5.5\"></a>zookeeper 集群启动流程、选举流程3.5.5</h1><h2 id=\"1-QuorumPeerMain\"><a href=\"#1-QuorumPeerMain\" class=\"headerlink\" title=\"1.QuorumPeerMain\"></a>1.QuorumPeerMain</h2><p>Zookeeper的启动入口是<code>QuorumPeerMain</code>的<code>main</code>方法。启动时需要传入zoo.cfg文件参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    QuorumPeerMain main = <span class=\"keyword\">new</span> QuorumPeerMain();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        main.initializeAndRun(args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Invalid arguments, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        LOG.info(USAGE);</span><br><span class=\"line\">        System.err.println(USAGE);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ConfigException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Invalid config, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Invalid config, exiting abnormally\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (DatadirException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unable to access datadir, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Unable to access datadir, exiting abnormally\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AdminServerException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unable to start AdminServer, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Unable to start AdminServer, exiting abnormally\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unexpected exception, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Exiting normally\"</span>);</span><br><span class=\"line\">    System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeAndRun</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ConfigException, IOException, AdminServerException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//解析配置文件</span></span><br><span class=\"line\">    QuorumPeerConfig config = <span class=\"keyword\">new</span> QuorumPeerConfig();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        config.parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Start and schedule the the purge task</span></span><br><span class=\"line\">    <span class=\"comment\">//定时清理日志文件</span></span><br><span class=\"line\">    DatadirCleanupManager purgeMgr = <span class=\"keyword\">new</span> DatadirCleanupManager(config</span><br><span class=\"line\">            .getDataDir(), config.getDataLogDir(), config</span><br><span class=\"line\">            .getSnapRetainCount(), config.getPurgeInterval());</span><br><span class=\"line\">    purgeMgr.start();</span><br><span class=\"line\">    <span class=\"comment\">//单机模式使用ZooKeeperServerMain</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length == <span class=\"number\">1</span> &amp;&amp; config.isDistributed()) &#123;</span><br><span class=\"line\">        runFromConfig(config);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Either no config or no quorum defined in config, running \"</span></span><br><span class=\"line\">                + <span class=\"string\">\" in standalone mode\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// there is only server in the quorum -- run as standalone</span></span><br><span class=\"line\">        ZooKeeperServerMain.main(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析配置文件，如果是单机模式使用ZooKeeperServerMain，否则调runFromConfig。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runFromConfig</span><span class=\"params\">(QuorumPeerConfig config)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IOException, AdminServerException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ManagedUtil.registerLog4jMBeans();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (JMException e) &#123;</span><br><span class=\"line\">      LOG.warn(<span class=\"string\">\"Unable to register log4j JMX control\"</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  LOG.info(<span class=\"string\">\"Starting quorum peer\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ServerCnxnFactory cnxnFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      ServerCnxnFactory secureCnxnFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      <span class=\"comment\">//初始化cnxnFactory，默认NIOServerCnxnFactory</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.getClientPortAddress() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class=\"line\">          cnxnFactory.configure(config.getClientPortAddress(),</span><br><span class=\"line\">                  config.getMaxClientCnxns(),</span><br><span class=\"line\">                  <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//初始化secureCnxnFactory</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.getSecureClientPortAddress() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class=\"line\">          secureCnxnFactory.configure(config.getSecureClientPortAddress(),</span><br><span class=\"line\">                  config.getMaxClientCnxns(),</span><br><span class=\"line\">                  <span class=\"keyword\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//new QuorumPeer()，各种配置</span></span><br><span class=\"line\">      quorumPeer = getQuorumPeer();</span><br><span class=\"line\">      quorumPeer.setTxnFactory(<span class=\"keyword\">new</span> FileTxnSnapLog(</span><br><span class=\"line\">                  config.getDataLogDir(),</span><br><span class=\"line\">                  config.getDataDir()));</span><br><span class=\"line\">      quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());</span><br><span class=\"line\">      quorumPeer.enableLocalSessionsUpgrading(</span><br><span class=\"line\">          config.isLocalSessionsUpgradingEnabled());</span><br><span class=\"line\">      <span class=\"comment\">//quorumPeer.setQuorumPeers(config.getAllMembers());</span></span><br><span class=\"line\">      quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class=\"line\">      quorumPeer.setMyid(config.getServerId());</span><br><span class=\"line\">      quorumPeer.setTickTime(config.getTickTime());</span><br><span class=\"line\">      quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class=\"line\">      quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class=\"line\">      quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class=\"line\">      quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class=\"line\">      quorumPeer.setConfigFileName(config.getConfigFilename());</span><br><span class=\"line\">      quorumPeer.setZKDatabase(<span class=\"keyword\">new</span> ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class=\"line\">      quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.getLastSeenQuorumVerifier()!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      quorumPeer.initConfigInZKDatabase();</span><br><span class=\"line\">      quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class=\"line\">      quorumPeer.setSecureCnxnFactory(secureCnxnFactory);</span><br><span class=\"line\">      quorumPeer.setSslQuorum(config.isSslQuorum());</span><br><span class=\"line\">      quorumPeer.setUsePortUnification(config.shouldUsePortUnification());</span><br><span class=\"line\">      quorumPeer.setLearnerType(config.getPeerType());</span><br><span class=\"line\">      quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class=\"line\">      quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.sslQuorumReloadCertFiles) &#123;</span><br><span class=\"line\">          quorumPeer.getX509Util().enableCertFileReloading();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// sets quorum sasl authentication configurations</span></span><br><span class=\"line\">      quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(quorumPeer.isQuorumSaslAuthEnabled())&#123;</span><br><span class=\"line\">          quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class=\"line\">          quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class=\"line\">          quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class=\"line\">          quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class=\"line\">          quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class=\"line\">      quorumPeer.initialize();</span><br><span class=\"line\">      </span><br><span class=\"line\">      quorumPeer.start();</span><br><span class=\"line\">      <span class=\"comment\">//quorumPeer继承ZooKeeperThread，这里调用线程的join方法，阻塞直到线程执行结束。</span></span><br><span class=\"line\">      quorumPeer.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// warn, but generally this is ok</span></span><br><span class=\"line\">      LOG.warn(<span class=\"string\">\"Quorum Peer interrupted\"</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化<code>quorumPeer</code>并初始化各种配置，最后调用<code>initialize</code>和<code>start</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SaslException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init quorum auth server &amp; learner</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isQuorumSaslAuthEnabled()) &#123;</span><br><span class=\"line\">        Set&lt;String&gt; authzHosts = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (QuorumServer qs : getView().values()) &#123;</span><br><span class=\"line\">            authzHosts.add(qs.hostname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        authServer = <span class=\"keyword\">new</span> SaslQuorumAuthServer(isQuorumServerSaslAuthRequired(),</span><br><span class=\"line\">                quorumServerLoginContext, authzHosts);</span><br><span class=\"line\">        authLearner = <span class=\"keyword\">new</span> SaslQuorumAuthLearner(isQuorumLearnerSaslAuthRequired(),</span><br><span class=\"line\">                quorumServicePrincipal, quorumLearnerLoginContext);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        authServer = <span class=\"keyword\">new</span> NullQuorumAuthServer();</span><br><span class=\"line\">        authLearner = <span class=\"keyword\">new</span> NullQuorumAuthLearner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看名字是初始化安全认证的服务，因为跟主流程无关就不细看了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!getView().containsKey(myid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"My id \"</span> + myid + <span class=\"string\">\" not in the peer list\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch</span></span><br><span class=\"line\">    loadDataBase();</span><br><span class=\"line\">    <span class=\"comment\">//启动ServerCnxnFactory</span></span><br><span class=\"line\">    startServerCnxnFactory();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        adminServer.start();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AdminServerException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Problem starting AdminServer\"</span>, e);</span><br><span class=\"line\">        System.out.println(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//开启选举</span></span><br><span class=\"line\">    startLeaderElection();</span><br><span class=\"line\">    <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>start</code>方法主要做的几件事情：</p>\n<ol>\n<li>加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch。</li>\n<li>启动ServerCnxnFactory</li>\n<li><code>startLeaderElection</code>开启选举。</li>\n<li>启动线程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startLeaderElection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化默认looking状态，初始化自己的选票</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (getPeerState() == ServerState.LOOKING) &#123;</span><br><span class=\"line\">           currentVote = <span class=\"keyword\">new</span> Vote(myid, getLastLoggedZxid(), getCurrentEpoch());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">       RuntimeException re = <span class=\"keyword\">new</span> RuntimeException(e.getMessage());</span><br><span class=\"line\">       re.setStackTrace(e.getStackTrace());</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> re;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//electionType默认为3，这里已经废弃了。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (electionType == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            udpSocket = <span class=\"keyword\">new</span> DatagramSocket(getQuorumAddress().getPort());</span><br><span class=\"line\">            responder = <span class=\"keyword\">new</span> ResponderThread();</span><br><span class=\"line\">            responder.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SocketException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建选举算法,Election对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.electionAlg = createElectionAlgorithm(electionType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Election <span class=\"title\">createElectionAlgorithm</span><span class=\"params\">(<span class=\"keyword\">int</span> electionAlgorithm)</span></span>&#123;</span><br><span class=\"line\">    Election le=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (electionAlgorithm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        le = <span class=\"keyword\">new</span> LeaderElection(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        le = <span class=\"keyword\">new</span> AuthFastLeaderElection(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        le = <span class=\"keyword\">new</span> AuthFastLeaderElection(<span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\">//electionAlgorithm默认为3，所以使用FastLeaderElection选举算法</span></span><br><span class=\"line\">        QuorumCnxManager qcm = createCnxnManager();</span><br><span class=\"line\">        QuorumCnxManager oldQcm = qcmRef.getAndSet(qcm);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldQcm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Clobbering already-set QuorumCnxManager (restarting leader election?)\"</span>);</span><br><span class=\"line\">            oldQcm.halt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QuorumCnxManager.Listener listener = qcm.listener;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(listener != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            listener.start();</span><br><span class=\"line\">            FastLeaderElection fle = <span class=\"keyword\">new</span> FastLeaderElection(<span class=\"keyword\">this</span>, qcm);</span><br><span class=\"line\">            fle.start();</span><br><span class=\"line\">            le = fle;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"Null listener when initializing cnx manager\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> le;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>在看最核心的<code>run</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Main loop</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (getPeerState()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOOKING:</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"LOOKING\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//如果开启了readonly模式，启动ReadOnlyZooKeeperServer</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Boolean.getBoolean(<span class=\"string\">\"readonlymode.enabled\"</span>)) &#123;</span><br><span class=\"line\">                    LOG.info(<span class=\"string\">\"Attempting to start ReadOnlyZooKeeperServer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Create read-only server but don't start it immediately</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> ReadOnlyZooKeeperServer roZk =</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> ReadOnlyZooKeeperServer(logFactory, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.zkDb);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Instead of starting roZk immediately, wait some grace</span></span><br><span class=\"line\">                    <span class=\"comment\">// period before we decide we're partitioned.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// Thread is used here because otherwise it would require</span></span><br><span class=\"line\">                    <span class=\"comment\">// changes in each of election strategy classes which is</span></span><br><span class=\"line\">                    <span class=\"comment\">// unnecessary code coupling.</span></span><br><span class=\"line\">                    Thread roZkMgr = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// lower-bound grace period to 2 secs</span></span><br><span class=\"line\">                                sleep(Math.max(<span class=\"number\">2000</span>, tickTime));</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (ServerState.LOOKING.equals(getPeerState())) &#123;</span><br><span class=\"line\">                                    roZk.startup();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                                LOG.info(<span class=\"string\">\"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started\"</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                                LOG.error(<span class=\"string\">\"FAILED to start ReadOnlyZooKeeperServer\"</span>, e);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        roZkMgr.start();</span><br><span class=\"line\">                        reconfigFlagClear();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (shuttingDownLE) &#123;</span><br><span class=\"line\">                            shuttingDownLE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            startLeaderElection();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">                        setPeerState(ServerState.LOOKING);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// If the thread is in the the grace period, interrupt</span></span><br><span class=\"line\">                        <span class=\"comment\">// to come out of waiting.</span></span><br><span class=\"line\">                        roZkMgr.interrupt();</span><br><span class=\"line\">                        roZk.shutdown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                       reconfigFlagClear();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (shuttingDownLE) &#123;</span><br><span class=\"line\">                           shuttingDownLE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                           startLeaderElection();</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//选举</span></span><br><span class=\"line\">                        setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">                        setPeerState(ServerState.LOOKING);</span><br><span class=\"line\">                    &#125;                        </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OBSERVING:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    LOG.info(<span class=\"string\">\"OBSERVING\"</span>);</span><br><span class=\"line\">                    setObserver(makeObserver(logFactory));</span><br><span class=\"line\">                    observer.observeLeader();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>,e );</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    observer.shutdown();</span><br><span class=\"line\">                    setObserver(<span class=\"keyword\">null</span>);  </span><br><span class=\"line\">                   updateServerState();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> FOLLOWING:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   LOG.info(<span class=\"string\">\"FOLLOWING\"</span>);</span><br><span class=\"line\">                    setFollower(makeFollower(logFactory));</span><br><span class=\"line\">                    follower.followLeader();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                   LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>,e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                   follower.shutdown();</span><br><span class=\"line\">                   setFollower(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                   updateServerState();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LEADING:</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"LEADING\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    setLeader(makeLeader(logFactory));</span><br><span class=\"line\">                    leader.lead();</span><br><span class=\"line\">                    setLeader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>,e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (leader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        leader.shutdown(<span class=\"string\">\"Forcing shutdown\"</span>);</span><br><span class=\"line\">                        setLeader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    updateServerState();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start_fle = Time.currentElapsedTime();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>run</code>方法循环处理服务器的4种状态。</p>\n<h2 id=\"2-FastLeaderElection\"><a href=\"#2-FastLeaderElection\" class=\"headerlink\" title=\"2.FastLeaderElection\"></a>2.FastLeaderElection</h2><p>当服务器处于looking状态时，会调用<code>FastLeaderElection</code>的<code>lookForLeader</code>开启新一轮的选举。<code>FastLeaderElection</code>有2个比较重要的内部类<code>WorkerReceiver</code>和<code>WorkerSender</code>，先看这两个内部类的代码。</p>\n<h3 id=\"2-1-WorkerReceiver\"><a href=\"#2-1-WorkerReceiver\" class=\"headerlink\" title=\"2.1 WorkerReceiver\"></a>2.1 WorkerReceiver</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZooKeeperThread</span>  </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 是否终止</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop;</span><br><span class=\"line\">            <span class=\"comment\">// 服务器之间的连接</span></span><br><span class=\"line\">            QuorumCnxManager manager;</span><br><span class=\"line\"></span><br><span class=\"line\">            WorkerReceiver(QuorumCnxManager manager) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>(<span class=\"string\">\"WorkerReceiver\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.manager = manager;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                Message response;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Sleeps on receive</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 从recvQueue中取出一个选举投票消息（从其他服务器发送过来）</span></span><br><span class=\"line\">                        response = manager.pollRecvQueue(<span class=\"number\">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                        <span class=\"comment\">// 无投票，跳过</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(response == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                       </span><br><span class=\"line\">                        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                         * If it is from a non-voting server (such as an observer or</span></span><br><span class=\"line\"><span class=\"comment\">                         * a non-voting follower), respond right away.</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!validVoter(response.sid)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//当前的投票者集合不包含服务器，获取自己的投票加入sendqueue</span></span><br><span class=\"line\">                            Vote current = self.getCurrentVote();</span><br><span class=\"line\">                            QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">                            ToSend notmsg = <span class=\"keyword\">new</span> ToSend(ToSend.mType.notification,</span><br><span class=\"line\">                                    current.getId(),</span><br><span class=\"line\">                                    current.getZxid(),</span><br><span class=\"line\">                                    logicalclock.get(),</span><br><span class=\"line\">                                    self.getPeerState(),</span><br><span class=\"line\">                                    response.sid,</span><br><span class=\"line\">                                    current.getPeerEpoch(),</span><br><span class=\"line\">                                    qv.toString().getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">                            sendqueue.offer(notmsg);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// Receive new message</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">                                LOG.debug(<span class=\"string\">\"Receive new notification message. My id = \"</span></span><br><span class=\"line\">                                        + self.getId());</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// State of peer that sent this message</span></span><br><span class=\"line\">                            <span class=\"comment\">//获取对面服务器状态</span></span><br><span class=\"line\">                            QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class=\"line\">                            <span class=\"keyword\">switch</span> (rstate) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.FOLLOWING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.LEADING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.OBSERVING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            n.leader = rleader;</span><br><span class=\"line\">                            n.zxid = rzxid;</span><br><span class=\"line\">                            n.electionEpoch = relectionEpoch;</span><br><span class=\"line\">                            n.state = ackstate;</span><br><span class=\"line\">                            n.sid = response.sid;</span><br><span class=\"line\">                            n.peerEpoch = rpeerepoch;</span><br><span class=\"line\">                            n.version = version;</span><br><span class=\"line\">                            n.qv = rqv;</span><br><span class=\"line\">                            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                             * Print notification info</span></span><br><span class=\"line\"><span class=\"comment\">                             */</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(LOG.isInfoEnabled())&#123;</span><br><span class=\"line\">                                printNotification(n);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                             * If this server is looking, then send proposed leader</span></span><br><span class=\"line\"><span class=\"comment\">                             */</span></span><br><span class=\"line\">                            <span class=\"comment\">//自己为looking的状态下</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(self.getPeerState() == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class=\"line\">                                recvqueue.offer(n);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                                 * Send a notification back if the peer that sent this</span></span><br><span class=\"line\"><span class=\"comment\">                                 * message is also looking and its logical clock is</span></span><br><span class=\"line\"><span class=\"comment\">                                 * lagging behind.</span></span><br><span class=\"line\"><span class=\"comment\">                                 */</span></span><br><span class=\"line\">                                 <span class=\"comment\">//推选者服务器为LOOKING状态&amp;&amp;选举周期小于逻辑时钟</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span>((ackstate == QuorumPeer.ServerState.LOOKING)</span><br><span class=\"line\">                                        &amp;&amp; (n.electionEpoch &lt; logicalclock.get()))&#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 创建新的投票</span></span><br><span class=\"line\">                                    Vote v = getVote();</span><br><span class=\"line\">                                    QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">                                    <span class=\"comment\">// 构造新的发送消息（本服务器自己的投票）</span></span><br><span class=\"line\">                                    ToSend notmsg = <span class=\"keyword\">new</span> ToSend(ToSend.mType.notification,</span><br><span class=\"line\">                                            v.getId(),</span><br><span class=\"line\">                                            v.getZxid(),</span><br><span class=\"line\">                                            logicalclock.get(),</span><br><span class=\"line\">                                            self.getPeerState(),</span><br><span class=\"line\">                                            response.sid,</span><br><span class=\"line\">                                            v.getPeerEpoch(),</span><br><span class=\"line\">                                            qv.toString().getBytes());</span><br><span class=\"line\">                                    <span class=\"comment\">// 将发送消息放置于队列，等待发送</span></span><br><span class=\"line\">                                    sendqueue.offer(notmsg);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                                 * If this server is not looking, but the one that sent the ack</span></span><br><span class=\"line\"><span class=\"comment\">                                 * is looking, then send back what it believes to be the leader.</span></span><br><span class=\"line\"><span class=\"comment\">                                 */</span></span><br><span class=\"line\">                                <span class=\"comment\">// 本服务器状态不为LOOKING，推送服务器是LOOKING状态，发送自己的选票</span></span><br><span class=\"line\">                                Vote current = self.getCurrentVote();</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(ackstate == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">                                        LOG.debug(<span class=\"string\">\"Sending new notification. My id =&#123;&#125; recipient=&#123;&#125; zxid=0x&#123;&#125; leader=&#123;&#125; config version = &#123;&#125;\"</span>,</span><br><span class=\"line\">                                                self.getId(),</span><br><span class=\"line\">                                                response.sid,</span><br><span class=\"line\">                                                Long.toHexString(current.getZxid()),</span><br><span class=\"line\">                                                current.getId(),</span><br><span class=\"line\">                                                Long.toHexString(self.getQuorumVerifier().getVersion()));</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">                                    ToSend notmsg = <span class=\"keyword\">new</span> ToSend(</span><br><span class=\"line\">                                            ToSend.mType.notification,</span><br><span class=\"line\">                                            current.getId(),</span><br><span class=\"line\">                                            current.getZxid(),</span><br><span class=\"line\">                                            current.getElectionEpoch(),</span><br><span class=\"line\">                                            self.getPeerState(),</span><br><span class=\"line\">                                            response.sid,</span><br><span class=\"line\">                                            current.getPeerEpoch(),</span><br><span class=\"line\">                                            qv.toString().getBytes());</span><br><span class=\"line\">                                    sendqueue.offer(notmsg);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Interrupted Exception while waiting for new message\"</span> +</span><br><span class=\"line\">                                e.toString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"WorkerReceiver is down\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>WorkerReceiver实现了Runnable接口，是选票接收器。其会不断地从QuorumCnxManager中获取其他服务器发来的选举消息，并将其转换成一个选票，然后保存到recvqueue中，在选票接收过程中，如果发现该外部选票的选举轮次小于当前服务器的，那么忽略该外部投票，同时立即发送自己的内部投票。</p>\n<h3 id=\"2-2-WorkerSender\"><a href=\"#2-2-WorkerSender\" class=\"headerlink\" title=\"2.2 WorkerSender\"></a>2.2 WorkerSender</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerSender</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZooKeeperThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop;</span><br><span class=\"line\">    QuorumCnxManager manager;</span><br><span class=\"line\"></span><br><span class=\"line\">    WorkerSender(QuorumCnxManager manager)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"WorkerSender\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.manager = manager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ToSend m = sendqueue.poll(<span class=\"number\">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(m == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                process(m);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"WorkerSender is down\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called by run() once there is a new message to send.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> m     message to send</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(ToSend m)</span> </span>&#123;</span><br><span class=\"line\">        ByteBuffer requestBuffer = buildMsg(m.state.ordinal(),</span><br><span class=\"line\">                                            m.leader,</span><br><span class=\"line\">                                            m.zxid,</span><br><span class=\"line\">                                            m.electionEpoch,</span><br><span class=\"line\">                                            m.peerEpoch,</span><br><span class=\"line\">                                            m.configData);</span><br><span class=\"line\"></span><br><span class=\"line\">        manager.toSend(m.sid, requestBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WorkerSender也实现了Runnable接口，为选票发送器，其会不断地从sendqueue中获取待发送的选票，并将其传递到底层QuorumCnxManager中</p>\n<h3 id=\"2-3-sendNotifications\"><a href=\"#2-3-sendNotifications\" class=\"headerlink\" title=\"2.3 sendNotifications\"></a>2.3 sendNotifications</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Send notifications to all peers upon a change in our vote</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendNotifications</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历投票参与者集合</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> sid : self.getCurrentAndNextConfigVoters()) &#123;</span><br><span class=\"line\">        QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">        <span class=\"comment\">// 构造发送消息</span></span><br><span class=\"line\">        ToSend notmsg = <span class=\"keyword\">new</span> ToSend(ToSend.mType.notification,</span><br><span class=\"line\">                proposedLeader,</span><br><span class=\"line\">                proposedZxid,</span><br><span class=\"line\">                logicalclock.get(),</span><br><span class=\"line\">                QuorumPeer.ServerState.LOOKING,</span><br><span class=\"line\">                sid,</span><br><span class=\"line\">                proposedEpoch, qv.toString().getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Sending Notification: \"</span> + proposedLeader + <span class=\"string\">\" (n.leader), 0x\"</span>  +</span><br><span class=\"line\">                  Long.toHexString(proposedZxid) + <span class=\"string\">\" (n.zxid), 0x\"</span> + Long.toHexString(logicalclock.get())  +</span><br><span class=\"line\">                  <span class=\"string\">\" (n.round), \"</span> + sid + <span class=\"string\">\" (recipient), \"</span> + self.getId() +</span><br><span class=\"line\">                  <span class=\"string\">\" (myid), 0x\"</span> + Long.toHexString(proposedEpoch) + <span class=\"string\">\" (n.peerEpoch)\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将发送消息放置于队列</span></span><br><span class=\"line\">        sendqueue.offer(notmsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其会遍历所有的参与者投票集合，然后将自己的选票信息发送至上述所有的投票者集合，其并非同步发送，而是将ToSend消息放置于sendqueue中，之后由WorkerSender进行发送。</p>\n<h3 id=\"2-4-totalOrderPredicate\"><a href=\"#2-4-totalOrderPredicate\" class=\"headerlink\" title=\"2.4 totalOrderPredicate\"></a>2.4 totalOrderPredicate</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if a pair (server id, zxid) succeeds our</span></span><br><span class=\"line\"><span class=\"comment\"> * current vote.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id    Server identifier</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> zxid  Last zxid observed by the issuer of this vote</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">totalOrderPredicate</span><span class=\"params\">(<span class=\"keyword\">long</span> newId, <span class=\"keyword\">long</span> newZxid, <span class=\"keyword\">long</span> newEpoch, <span class=\"keyword\">long</span> curId, <span class=\"keyword\">long</span> curZxid, <span class=\"keyword\">long</span> curEpoch)</span> </span>&#123;</span><br><span class=\"line\">    LOG.debug(<span class=\"string\">\"id: \"</span> + newId + <span class=\"string\">\", proposed id: \"</span> + curId + <span class=\"string\">\", zxid: 0x\"</span> +</span><br><span class=\"line\">            Long.toHexString(newZxid) + <span class=\"string\">\", proposed zxid: 0x\"</span> + Long.toHexString(curZxid));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.getQuorumVerifier().getWeight(newId) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * We return true if one of the following three cases hold:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1- New epoch is higher</span></span><br><span class=\"line\"><span class=\"comment\">     * 2- New epoch is the same as current epoch, but new zxid is higher</span></span><br><span class=\"line\"><span class=\"comment\">     * 3- New epoch is the same as current epoch, new zxid is the same</span></span><br><span class=\"line\"><span class=\"comment\">     *  as current zxid, but server id is higher.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 1\\. 判断消息里的epoch是不是比当前的大，如果大则消息中id对应的服务器就是leader</span></span><br><span class=\"line\">    <span class=\"comment\">// 2\\. 如果epoch相等则判断zxid，如果消息里的zxid大，则消息中id对应的服务器就是leader</span></span><br><span class=\"line\">    <span class=\"comment\">// 3\\. 如果前面两个都相等那就比较服务器id，如果大，则其就是leader</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((newEpoch &gt; curEpoch) ||</span><br><span class=\"line\">            ((newEpoch == curEpoch) &amp;&amp;</span><br><span class=\"line\">            ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：该函数将接收的投票与自身投票进行PK，查看是否消息中包含的服务器id是否更优，其按照epoch、zxid、id的优先级进行PK。</p>\n<h3 id=\"2-5-termPredicate\"><a href=\"#2-5-termPredicate\" class=\"headerlink\" title=\"2.5 termPredicate\"></a>2.5 termPredicate</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Termination predicate. Given a set of votes, determines if have</span></span><br><span class=\"line\"><span class=\"comment\"> * sufficient to declare the end of the election round.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> votes</span></span><br><span class=\"line\"><span class=\"comment\"> *            Set of votes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> vote</span></span><br><span class=\"line\"><span class=\"comment\"> *            Identifier of the vote received last</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">termPredicate</span><span class=\"params\">(Map&lt;Long, Vote&gt; votes, Vote vote)</span> </span>&#123;</span><br><span class=\"line\">    SyncedLearnerTracker voteSet = <span class=\"keyword\">new</span> SyncedLearnerTracker();</span><br><span class=\"line\">    voteSet.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.getLastSeenQuorumVerifier() != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; self.getLastSeenQuorumVerifier().getVersion() &gt; self</span><br><span class=\"line\">                    .getQuorumVerifier().getVersion()) &#123;</span><br><span class=\"line\">        voteSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * First make the views consistent. Sometimes peers will have different</span></span><br><span class=\"line\"><span class=\"comment\">     * zxids for a server depending on timing.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;Long, Vote&gt; entry : votes.entrySet()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vote.equals(entry.getValue())) &#123;</span><br><span class=\"line\">            voteSet.addAck(entry.getKey());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//统计set，查看投某个id的票数是否超过一半</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> voteSet.hasAllQuorums();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数用于判断Leader选举是否结束，即是否有一半以上的服务器选出了相同的Leader，其过程是将收到的选票与当前选票进行对比，选票相同的放入同一个集合，之后判断选票相同的集合是否超过了半数。</p>\n<h3 id=\"2-6-checkLeader\"><a href=\"#2-6-checkLeader\" class=\"headerlink\" title=\"2.6 checkLeader\"></a>2.6 checkLeader</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> * In the <span class=\"keyword\">case</span> there is a leader elected, and a quorum supporting</span><br><span class=\"line\"> * <span class=\"keyword\">this</span> leader, we have to check <span class=\"keyword\">if</span> the leader has voted and acked</span><br><span class=\"line\"> * that it is leading. We need <span class=\"keyword\">this</span> check to avoid that peers keep</span><br><span class=\"line\"> * electing over and over a peer that has crashed and it is no</span><br><span class=\"line\"> * longer leading.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"meta\">@param</span> votes set of votes</span><br><span class=\"line\"> * <span class=\"meta\">@param</span>   leader  leader id</span><br><span class=\"line\"> * <span class=\"meta\">@param</span>   electionEpoch   epoch id</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkLeader</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;Long, Vote&gt; votes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> leader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> electionEpoch)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> predicate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If everyone else thinks I'm the leader, I must be the leader.</span></span><br><span class=\"line\"><span class=\"comment\">     * The other two checks are just for the case in which I'm not the</span></span><br><span class=\"line\"><span class=\"comment\">     * leader. If I'm not the leader and I haven't received a message</span></span><br><span class=\"line\"><span class=\"comment\">     * from leader stating that it is leading, then predicate is false.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(leader != self.getId())&#123;<span class=\"comment\">// 自己不为leader</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(votes.get(leader) == <span class=\"keyword\">null</span>) predicate = <span class=\"keyword\">false</span>;<span class=\"comment\">// 还未选出leader</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(votes.get(leader).getState() != ServerState.LEADING) predicate = <span class=\"keyword\">false</span>;<span class=\"comment\">// 选出的leader还未给出ack信号，其他服务器还不知道leader</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(logicalclock.get() != electionEpoch) &#123;<span class=\"comment\">// 逻辑时钟不等于选举周期</span></span><br><span class=\"line\">        predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> predicate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-lookForLeader\"><a href=\"#2-7-lookForLeader\" class=\"headerlink\" title=\"2.7 lookForLeader\"></a>2.7 lookForLeader</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Vote <span class=\"title\">lookForLeader</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        self.jmxLeaderElectionBean = <span class=\"keyword\">new</span> LeaderElectionBean();</span><br><span class=\"line\">        MBeanRegistry.getInstance().register(</span><br><span class=\"line\">                self.jmxLeaderElectionBean, self.jmxLocalPeerBean);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Failed to register with JMX\"</span>, e);</span><br><span class=\"line\">        self.jmxLeaderElectionBean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.start_fle == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       self.start_fle = Time.currentElapsedTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        HashMap&lt;Long, Vote&gt; recvset = <span class=\"keyword\">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Long, Vote&gt; outofelection = <span class=\"keyword\">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> notTimeout = finalizeWait;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新逻辑时钟，每进行一轮选举，都需要更新逻辑时钟</span></span><br><span class=\"line\">            logicalclock.incrementAndGet();</span><br><span class=\"line\">            <span class=\"comment\">// 更新选票</span></span><br><span class=\"line\">            updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"New election. My id =  \"</span> + self.getId() +</span><br><span class=\"line\">                <span class=\"string\">\", proposed zxid=0x\"</span> + Long.toHexString(proposedZxid));</span><br><span class=\"line\">        <span class=\"comment\">// 向其他服务器发送自己的选票</span></span><br><span class=\"line\">        sendNotifications();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Loop in which we exchange notifications until we find a leader</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((self.getPeerState() == ServerState.LOOKING) &amp;&amp;</span><br><span class=\"line\">                (!stop))&#123;<span class=\"comment\">// 本服务器状态为LOOKING并且还未选出leader</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Remove next notification from queue, times out after 2 times</span></span><br><span class=\"line\"><span class=\"comment\">             * the termination time</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">             <span class=\"comment\">// 从recvqueue接收队列中取出投票</span></span><br><span class=\"line\">            Notification n = recvqueue.poll(notTimeout,</span><br><span class=\"line\">                    TimeUnit.MILLISECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Sends more notifications if haven't received enough.</span></span><br><span class=\"line\"><span class=\"comment\">             * Otherwise processes new notification.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">// 如果没有收到足够多的选票，则发送选票</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(manager.haveDelivered())&#123;<span class=\"comment\">// manager已经发送了所有选票消息</span></span><br><span class=\"line\">                    <span class=\"comment\">// 向所有其他服务器发送消息</span></span><br><span class=\"line\">                    sendNotifications();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 还未发送所有消息</span></span><br><span class=\"line\">                    <span class=\"comment\">// 连接其他每个服务器</span></span><br><span class=\"line\">                    manager.connectAll();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Exponential backoff</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmpTimeOut = notTimeout*<span class=\"number\">2</span>;</span><br><span class=\"line\">                notTimeout = (tmpTimeOut &lt; maxNotificationInterval?</span><br><span class=\"line\">                        tmpTimeOut : maxNotificationInterval);</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"Notification time out: \"</span> + notTimeout);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validVoter(n.sid) &amp;&amp; validVoter(n.leader)) &#123;<span class=\"comment\">// 投票者集合中包含接收到消息中的服务器id</span></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Only proceed if the vote comes from a replica in the current or next</span></span><br><span class=\"line\"><span class=\"comment\">                 * voting view for a replica in the current or next voting view.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (n.state) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LOOKING:</span><br><span class=\"line\">                    <span class=\"comment\">// If notification &gt; current, replace and send messages out</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (n.electionEpoch &gt; logicalclock.get()) &#123;<span class=\"comment\">// 其选举周期大于逻辑时钟</span></span><br><span class=\"line\">                        <span class=\"comment\">// 重新赋值逻辑时钟</span></span><br><span class=\"line\">                        logicalclock.set(n.electionEpoch);</span><br><span class=\"line\">                        recvset.clear();</span><br><span class=\"line\">                        <span class=\"comment\">//投票PK，并更新自己的选票</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                                getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class=\"line\">                            updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            updateProposal(getInitId(),</span><br><span class=\"line\">                                    getInitLastLoggedZxid(),</span><br><span class=\"line\">                                    getPeerEpoch());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//发送自己的投票结果</span></span><br><span class=\"line\">                        sendNotifications();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n.electionEpoch &lt; logicalclock.get()) &#123;<span class=\"comment\">// 选举周期小于逻辑时钟，不做处理</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">                            LOG.debug(<span class=\"string\">\"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x\"</span></span><br><span class=\"line\">                                    + Long.toHexString(n.electionEpoch)</span><br><span class=\"line\">                                    + <span class=\"string\">\", logicalclock=0x\"</span> + Long.toHexString(logicalclock.get()));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                            proposedLeader, proposedZxid, proposedEpoch)) &#123;<span class=\"comment\">//选举周期等于逻辑时钟，PK选票</span></span><br><span class=\"line\">                        <span class=\"comment\">// 更新选票</span></span><br><span class=\"line\">                        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">                        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">                        sendNotifications();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">                        LOG.debug(<span class=\"string\">\"Adding vote: from=\"</span> + n.sid +</span><br><span class=\"line\">                                <span class=\"string\">\", proposed leader=\"</span> + n.leader +</span><br><span class=\"line\">                                <span class=\"string\">\", proposed zxid=0x\"</span> + Long.toHexString(n.zxid) +</span><br><span class=\"line\">                                <span class=\"string\">\", proposed election epoch=0x\"</span> + Long.toHexString(n.electionEpoch));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// recvset用于记录当前服务器在本轮次的Leader选举中收到的所有外部投票</span></span><br><span class=\"line\">                    recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (termPredicate(recvset,</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Vote(proposedLeader, proposedZxid,</span><br><span class=\"line\">                                    logicalclock.get(), proposedEpoch))) &#123;<span class=\"comment\">// 若能选出leader</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Verify if there is any change in the proposed leader</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>((n = recvqueue.poll(finalizeWait,</span><br><span class=\"line\">                                TimeUnit.MILLISECONDS)) != <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">// 遍历已经接收的投票集合</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                                    proposedLeader, proposedZxid, proposedEpoch))&#123;<span class=\"comment\">// 能够选出较优的服务器</span></span><br><span class=\"line\">                                recvqueue.put(n);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                         * This predicate is true once we don't read any new</span></span><br><span class=\"line\"><span class=\"comment\">                         * relevant message from the reception queue</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            self.setPeerState((proposedLeader == self.getId()) ?</span><br><span class=\"line\">                                    ServerState.LEADING: learningState());</span><br><span class=\"line\">                            Vote endVote = <span class=\"keyword\">new</span> Vote(proposedLeader,</span><br><span class=\"line\">                                    proposedZxid, logicalclock.get(), </span><br><span class=\"line\">                                    proposedEpoch);</span><br><span class=\"line\">                            leaveInstance(endVote);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> OBSERVING:</span><br><span class=\"line\">                    LOG.debug(<span class=\"string\">\"Notification from observer: \"</span> + n.sid);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> FOLLOWING:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LEADING:<span class=\"comment\">// 处于LEADING状态</span></span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                     * Consider all notifications from the same epoch</span></span><br><span class=\"line\"><span class=\"comment\">                     * together.</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(n.electionEpoch == logicalclock.get())&#123;<span class=\"comment\">// 与逻辑时钟相等</span></span><br><span class=\"line\">                        <span class=\"comment\">// 将该服务器和选票信息放入recvset中</span></span><br><span class=\"line\">                        recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\">                        <span class=\"comment\">// 判断是否完成了leader选举</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(termPredicate(recvset, <span class=\"keyword\">new</span> Vote(n.version, n.leader,</span><br><span class=\"line\">                                        n.zxid, n.electionEpoch, n.peerEpoch, n.state))</span><br><span class=\"line\">                                        &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 设置本服务器的状态</span></span><br><span class=\"line\">                            self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">                                    ServerState.LEADING: learningState());</span><br><span class=\"line\">                            <span class=\"comment\">// 创建投票信息</span></span><br><span class=\"line\">                            Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, </span><br><span class=\"line\">                                    n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">                            leaveInstance(endVote);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                     * Before joining an established ensemble, verify that</span></span><br><span class=\"line\"><span class=\"comment\">                     * a majority are following the same leader.</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    outofelection.put(n.sid, <span class=\"keyword\">new</span> Vote(n.version, n.leader, </span><br><span class=\"line\">                            n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (termPredicate(outofelection, <span class=\"keyword\">new</span> Vote(n.version, n.leader,</span><br><span class=\"line\">                            n.zxid, n.electionEpoch, n.peerEpoch, n.state))</span><br><span class=\"line\">                            &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">                            logicalclock.set(n.electionEpoch);</span><br><span class=\"line\">                            self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">                                    ServerState.LEADING: learningState());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, </span><br><span class=\"line\">                                n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">                        leaveInstance(endVote);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Notification state unrecoginized: \"</span> + n.state</span><br><span class=\"line\">                          + <span class=\"string\">\" (n.state), \"</span> + n.sid + <span class=\"string\">\" (n.sid)\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!validVoter(n.leader)) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Ignoring notification for non-cluster member sid &#123;&#125; from sid &#123;&#125;\"</span>, n.leader, n.sid);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!validVoter(n.sid)) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Ignoring notification for sid &#123;&#125; from non-quorum member sid &#123;&#125;\"</span>, n.leader, n.sid);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(self.jmxLeaderElectionBean != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                MBeanRegistry.getInstance().unregister(</span><br><span class=\"line\">                        self.jmxLeaderElectionBean);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Failed to unregister with JMX\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.jmxLeaderElectionBean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Number of connection processing threads: &#123;&#125;\"</span>,</span><br><span class=\"line\">                manager.getConnectionThreadCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数用于开始新一轮的Leader选举。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"zookeeper-集群启动流程、选举流程3-5-5\"><a href=\"#zookeeper-集群启动流程、选举流程3-5-5\" class=\"headerlink\" title=\"zookeeper 集群启动流程、选举流程3.5.5\"></a>zookeeper 集群启动流程、选举流程3.5.5</h1><h2 id=\"1-QuorumPeerMain\"><a href=\"#1-QuorumPeerMain\" class=\"headerlink\" title=\"1.QuorumPeerMain\"></a>1.QuorumPeerMain</h2><p>Zookeeper的启动入口是<code>QuorumPeerMain</code>的<code>main</code>方法。启动时需要传入zoo.cfg文件参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    QuorumPeerMain main = <span class=\"keyword\">new</span> QuorumPeerMain();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        main.initializeAndRun(args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Invalid arguments, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        LOG.info(USAGE);</span><br><span class=\"line\">        System.err.println(USAGE);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ConfigException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Invalid config, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Invalid config, exiting abnormally\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (DatadirException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unable to access datadir, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Unable to access datadir, exiting abnormally\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AdminServerException e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unable to start AdminServer, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"Unable to start AdminServer, exiting abnormally\"</span>);</span><br><span class=\"line\">        System.exit(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        LOG.error(<span class=\"string\">\"Unexpected exception, exiting abnormally\"</span>, e);</span><br><span class=\"line\">        System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Exiting normally\"</span>);</span><br><span class=\"line\">    System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeAndRun</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ConfigException, IOException, AdminServerException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//解析配置文件</span></span><br><span class=\"line\">    QuorumPeerConfig config = <span class=\"keyword\">new</span> QuorumPeerConfig();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        config.parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Start and schedule the the purge task</span></span><br><span class=\"line\">    <span class=\"comment\">//定时清理日志文件</span></span><br><span class=\"line\">    DatadirCleanupManager purgeMgr = <span class=\"keyword\">new</span> DatadirCleanupManager(config</span><br><span class=\"line\">            .getDataDir(), config.getDataLogDir(), config</span><br><span class=\"line\">            .getSnapRetainCount(), config.getPurgeInterval());</span><br><span class=\"line\">    purgeMgr.start();</span><br><span class=\"line\">    <span class=\"comment\">//单机模式使用ZooKeeperServerMain</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length == <span class=\"number\">1</span> &amp;&amp; config.isDistributed()) &#123;</span><br><span class=\"line\">        runFromConfig(config);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Either no config or no quorum defined in config, running \"</span></span><br><span class=\"line\">                + <span class=\"string\">\" in standalone mode\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// there is only server in the quorum -- run as standalone</span></span><br><span class=\"line\">        ZooKeeperServerMain.main(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析配置文件，如果是单机模式使用ZooKeeperServerMain，否则调runFromConfig。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runFromConfig</span><span class=\"params\">(QuorumPeerConfig config)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IOException, AdminServerException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ManagedUtil.registerLog4jMBeans();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (JMException e) &#123;</span><br><span class=\"line\">      LOG.warn(<span class=\"string\">\"Unable to register log4j JMX control\"</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  LOG.info(<span class=\"string\">\"Starting quorum peer\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ServerCnxnFactory cnxnFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      ServerCnxnFactory secureCnxnFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      <span class=\"comment\">//初始化cnxnFactory，默认NIOServerCnxnFactory</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.getClientPortAddress() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class=\"line\">          cnxnFactory.configure(config.getClientPortAddress(),</span><br><span class=\"line\">                  config.getMaxClientCnxns(),</span><br><span class=\"line\">                  <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//初始化secureCnxnFactory</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.getSecureClientPortAddress() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          secureCnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class=\"line\">          secureCnxnFactory.configure(config.getSecureClientPortAddress(),</span><br><span class=\"line\">                  config.getMaxClientCnxns(),</span><br><span class=\"line\">                  <span class=\"keyword\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//new QuorumPeer()，各种配置</span></span><br><span class=\"line\">      quorumPeer = getQuorumPeer();</span><br><span class=\"line\">      quorumPeer.setTxnFactory(<span class=\"keyword\">new</span> FileTxnSnapLog(</span><br><span class=\"line\">                  config.getDataLogDir(),</span><br><span class=\"line\">                  config.getDataDir()));</span><br><span class=\"line\">      quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());</span><br><span class=\"line\">      quorumPeer.enableLocalSessionsUpgrading(</span><br><span class=\"line\">          config.isLocalSessionsUpgradingEnabled());</span><br><span class=\"line\">      <span class=\"comment\">//quorumPeer.setQuorumPeers(config.getAllMembers());</span></span><br><span class=\"line\">      quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class=\"line\">      quorumPeer.setMyid(config.getServerId());</span><br><span class=\"line\">      quorumPeer.setTickTime(config.getTickTime());</span><br><span class=\"line\">      quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class=\"line\">      quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class=\"line\">      quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class=\"line\">      quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class=\"line\">      quorumPeer.setConfigFileName(config.getConfigFilename());</span><br><span class=\"line\">      quorumPeer.setZKDatabase(<span class=\"keyword\">new</span> ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class=\"line\">      quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.getLastSeenQuorumVerifier()!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      quorumPeer.initConfigInZKDatabase();</span><br><span class=\"line\">      quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class=\"line\">      quorumPeer.setSecureCnxnFactory(secureCnxnFactory);</span><br><span class=\"line\">      quorumPeer.setSslQuorum(config.isSslQuorum());</span><br><span class=\"line\">      quorumPeer.setUsePortUnification(config.shouldUsePortUnification());</span><br><span class=\"line\">      quorumPeer.setLearnerType(config.getPeerType());</span><br><span class=\"line\">      quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class=\"line\">      quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.sslQuorumReloadCertFiles) &#123;</span><br><span class=\"line\">          quorumPeer.getX509Util().enableCertFileReloading();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// sets quorum sasl authentication configurations</span></span><br><span class=\"line\">      quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(quorumPeer.isQuorumSaslAuthEnabled())&#123;</span><br><span class=\"line\">          quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class=\"line\">          quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class=\"line\">          quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class=\"line\">          quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class=\"line\">          quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class=\"line\">      quorumPeer.initialize();</span><br><span class=\"line\">      </span><br><span class=\"line\">      quorumPeer.start();</span><br><span class=\"line\">      <span class=\"comment\">//quorumPeer继承ZooKeeperThread，这里调用线程的join方法，阻塞直到线程执行结束。</span></span><br><span class=\"line\">      quorumPeer.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// warn, but generally this is ok</span></span><br><span class=\"line\">      LOG.warn(<span class=\"string\">\"Quorum Peer interrupted\"</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化<code>quorumPeer</code>并初始化各种配置，最后调用<code>initialize</code>和<code>start</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SaslException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init quorum auth server &amp; learner</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isQuorumSaslAuthEnabled()) &#123;</span><br><span class=\"line\">        Set&lt;String&gt; authzHosts = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (QuorumServer qs : getView().values()) &#123;</span><br><span class=\"line\">            authzHosts.add(qs.hostname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        authServer = <span class=\"keyword\">new</span> SaslQuorumAuthServer(isQuorumServerSaslAuthRequired(),</span><br><span class=\"line\">                quorumServerLoginContext, authzHosts);</span><br><span class=\"line\">        authLearner = <span class=\"keyword\">new</span> SaslQuorumAuthLearner(isQuorumLearnerSaslAuthRequired(),</span><br><span class=\"line\">                quorumServicePrincipal, quorumLearnerLoginContext);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        authServer = <span class=\"keyword\">new</span> NullQuorumAuthServer();</span><br><span class=\"line\">        authLearner = <span class=\"keyword\">new</span> NullQuorumAuthLearner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看名字是初始化安全认证的服务，因为跟主流程无关就不细看了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!getView().containsKey(myid)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"My id \"</span> + myid + <span class=\"string\">\" not in the peer list\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch</span></span><br><span class=\"line\">    loadDataBase();</span><br><span class=\"line\">    <span class=\"comment\">//启动ServerCnxnFactory</span></span><br><span class=\"line\">    startServerCnxnFactory();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        adminServer.start();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AdminServerException e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Problem starting AdminServer\"</span>, e);</span><br><span class=\"line\">        System.out.println(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//开启选举</span></span><br><span class=\"line\">    startLeaderElection();</span><br><span class=\"line\">    <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>start</code>方法主要做的几件事情：</p>\n<ol>\n<li>加载数据库，从snapshot恢复数据，从文件读取currentEpoch和acceptedEpoch。</li>\n<li>启动ServerCnxnFactory</li>\n<li><code>startLeaderElection</code>开启选举。</li>\n<li>启动线程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startLeaderElection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化默认looking状态，初始化自己的选票</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (getPeerState() == ServerState.LOOKING) &#123;</span><br><span class=\"line\">           currentVote = <span class=\"keyword\">new</span> Vote(myid, getLastLoggedZxid(), getCurrentEpoch());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">       RuntimeException re = <span class=\"keyword\">new</span> RuntimeException(e.getMessage());</span><br><span class=\"line\">       re.setStackTrace(e.getStackTrace());</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> re;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//electionType默认为3，这里已经废弃了。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (electionType == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            udpSocket = <span class=\"keyword\">new</span> DatagramSocket(getQuorumAddress().getPort());</span><br><span class=\"line\">            responder = <span class=\"keyword\">new</span> ResponderThread();</span><br><span class=\"line\">            responder.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SocketException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建选举算法,Election对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.electionAlg = createElectionAlgorithm(electionType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Election <span class=\"title\">createElectionAlgorithm</span><span class=\"params\">(<span class=\"keyword\">int</span> electionAlgorithm)</span></span>&#123;</span><br><span class=\"line\">    Election le=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (electionAlgorithm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        le = <span class=\"keyword\">new</span> LeaderElection(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        le = <span class=\"keyword\">new</span> AuthFastLeaderElection(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        le = <span class=\"keyword\">new</span> AuthFastLeaderElection(<span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\">//electionAlgorithm默认为3，所以使用FastLeaderElection选举算法</span></span><br><span class=\"line\">        QuorumCnxManager qcm = createCnxnManager();</span><br><span class=\"line\">        QuorumCnxManager oldQcm = qcmRef.getAndSet(qcm);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldQcm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Clobbering already-set QuorumCnxManager (restarting leader election?)\"</span>);</span><br><span class=\"line\">            oldQcm.halt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QuorumCnxManager.Listener listener = qcm.listener;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(listener != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            listener.start();</span><br><span class=\"line\">            FastLeaderElection fle = <span class=\"keyword\">new</span> FastLeaderElection(<span class=\"keyword\">this</span>, qcm);</span><br><span class=\"line\">            fle.start();</span><br><span class=\"line\">            le = fle;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"Null listener when initializing cnx manager\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> le;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>在看最核心的<code>run</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Main loop</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (running) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (getPeerState()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOOKING:</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"LOOKING\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//如果开启了readonly模式，启动ReadOnlyZooKeeperServer</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Boolean.getBoolean(<span class=\"string\">\"readonlymode.enabled\"</span>)) &#123;</span><br><span class=\"line\">                    LOG.info(<span class=\"string\">\"Attempting to start ReadOnlyZooKeeperServer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Create read-only server but don't start it immediately</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> ReadOnlyZooKeeperServer roZk =</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> ReadOnlyZooKeeperServer(logFactory, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.zkDb);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Instead of starting roZk immediately, wait some grace</span></span><br><span class=\"line\">                    <span class=\"comment\">// period before we decide we're partitioned.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// Thread is used here because otherwise it would require</span></span><br><span class=\"line\">                    <span class=\"comment\">// changes in each of election strategy classes which is</span></span><br><span class=\"line\">                    <span class=\"comment\">// unnecessary code coupling.</span></span><br><span class=\"line\">                    Thread roZkMgr = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// lower-bound grace period to 2 secs</span></span><br><span class=\"line\">                                sleep(Math.max(<span class=\"number\">2000</span>, tickTime));</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (ServerState.LOOKING.equals(getPeerState())) &#123;</span><br><span class=\"line\">                                    roZk.startup();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                                LOG.info(<span class=\"string\">\"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started\"</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                                LOG.error(<span class=\"string\">\"FAILED to start ReadOnlyZooKeeperServer\"</span>, e);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        roZkMgr.start();</span><br><span class=\"line\">                        reconfigFlagClear();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (shuttingDownLE) &#123;</span><br><span class=\"line\">                            shuttingDownLE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            startLeaderElection();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">                        setPeerState(ServerState.LOOKING);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// If the thread is in the the grace period, interrupt</span></span><br><span class=\"line\">                        <span class=\"comment\">// to come out of waiting.</span></span><br><span class=\"line\">                        roZkMgr.interrupt();</span><br><span class=\"line\">                        roZk.shutdown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                       reconfigFlagClear();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (shuttingDownLE) &#123;</span><br><span class=\"line\">                           shuttingDownLE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                           startLeaderElection();</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//选举</span></span><br><span class=\"line\">                        setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>, e);</span><br><span class=\"line\">                        setPeerState(ServerState.LOOKING);</span><br><span class=\"line\">                    &#125;                        </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OBSERVING:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    LOG.info(<span class=\"string\">\"OBSERVING\"</span>);</span><br><span class=\"line\">                    setObserver(makeObserver(logFactory));</span><br><span class=\"line\">                    observer.observeLeader();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>,e );</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    observer.shutdown();</span><br><span class=\"line\">                    setObserver(<span class=\"keyword\">null</span>);  </span><br><span class=\"line\">                   updateServerState();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> FOLLOWING:</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   LOG.info(<span class=\"string\">\"FOLLOWING\"</span>);</span><br><span class=\"line\">                    setFollower(makeFollower(logFactory));</span><br><span class=\"line\">                    follower.followLeader();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                   LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>,e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                   follower.shutdown();</span><br><span class=\"line\">                   setFollower(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                   updateServerState();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LEADING:</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"LEADING\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    setLeader(makeLeader(logFactory));</span><br><span class=\"line\">                    leader.lead();</span><br><span class=\"line\">                    setLeader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Unexpected exception\"</span>,e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (leader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        leader.shutdown(<span class=\"string\">\"Forcing shutdown\"</span>);</span><br><span class=\"line\">                        setLeader(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    updateServerState();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start_fle = Time.currentElapsedTime();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>run</code>方法循环处理服务器的4种状态。</p>\n<h2 id=\"2-FastLeaderElection\"><a href=\"#2-FastLeaderElection\" class=\"headerlink\" title=\"2.FastLeaderElection\"></a>2.FastLeaderElection</h2><p>当服务器处于looking状态时，会调用<code>FastLeaderElection</code>的<code>lookForLeader</code>开启新一轮的选举。<code>FastLeaderElection</code>有2个比较重要的内部类<code>WorkerReceiver</code>和<code>WorkerSender</code>，先看这两个内部类的代码。</p>\n<h3 id=\"2-1-WorkerReceiver\"><a href=\"#2-1-WorkerReceiver\" class=\"headerlink\" title=\"2.1 WorkerReceiver\"></a>2.1 WorkerReceiver</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZooKeeperThread</span>  </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 是否终止</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop;</span><br><span class=\"line\">            <span class=\"comment\">// 服务器之间的连接</span></span><br><span class=\"line\">            QuorumCnxManager manager;</span><br><span class=\"line\"></span><br><span class=\"line\">            WorkerReceiver(QuorumCnxManager manager) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>(<span class=\"string\">\"WorkerReceiver\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.manager = manager;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                Message response;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Sleeps on receive</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 从recvQueue中取出一个选举投票消息（从其他服务器发送过来）</span></span><br><span class=\"line\">                        response = manager.pollRecvQueue(<span class=\"number\">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                        <span class=\"comment\">// 无投票，跳过</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(response == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                       </span><br><span class=\"line\">                        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                         * If it is from a non-voting server (such as an observer or</span></span><br><span class=\"line\"><span class=\"comment\">                         * a non-voting follower), respond right away.</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!validVoter(response.sid)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//当前的投票者集合不包含服务器，获取自己的投票加入sendqueue</span></span><br><span class=\"line\">                            Vote current = self.getCurrentVote();</span><br><span class=\"line\">                            QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">                            ToSend notmsg = <span class=\"keyword\">new</span> ToSend(ToSend.mType.notification,</span><br><span class=\"line\">                                    current.getId(),</span><br><span class=\"line\">                                    current.getZxid(),</span><br><span class=\"line\">                                    logicalclock.get(),</span><br><span class=\"line\">                                    self.getPeerState(),</span><br><span class=\"line\">                                    response.sid,</span><br><span class=\"line\">                                    current.getPeerEpoch(),</span><br><span class=\"line\">                                    qv.toString().getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">                            sendqueue.offer(notmsg);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// Receive new message</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class=\"line\">                                LOG.debug(<span class=\"string\">\"Receive new notification message. My id = \"</span></span><br><span class=\"line\">                                        + self.getId());</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// State of peer that sent this message</span></span><br><span class=\"line\">                            <span class=\"comment\">//获取对面服务器状态</span></span><br><span class=\"line\">                            QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class=\"line\">                            <span class=\"keyword\">switch</span> (rstate) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.FOLLOWING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.LEADING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                                ackstate = QuorumPeer.ServerState.OBSERVING;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            n.leader = rleader;</span><br><span class=\"line\">                            n.zxid = rzxid;</span><br><span class=\"line\">                            n.electionEpoch = relectionEpoch;</span><br><span class=\"line\">                            n.state = ackstate;</span><br><span class=\"line\">                            n.sid = response.sid;</span><br><span class=\"line\">                            n.peerEpoch = rpeerepoch;</span><br><span class=\"line\">                            n.version = version;</span><br><span class=\"line\">                            n.qv = rqv;</span><br><span class=\"line\">                            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                             * Print notification info</span></span><br><span class=\"line\"><span class=\"comment\">                             */</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(LOG.isInfoEnabled())&#123;</span><br><span class=\"line\">                                printNotification(n);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                             * If this server is looking, then send proposed leader</span></span><br><span class=\"line\"><span class=\"comment\">                             */</span></span><br><span class=\"line\">                            <span class=\"comment\">//自己为looking的状态下</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(self.getPeerState() == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class=\"line\">                                recvqueue.offer(n);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                                 * Send a notification back if the peer that sent this</span></span><br><span class=\"line\"><span class=\"comment\">                                 * message is also looking and its logical clock is</span></span><br><span class=\"line\"><span class=\"comment\">                                 * lagging behind.</span></span><br><span class=\"line\"><span class=\"comment\">                                 */</span></span><br><span class=\"line\">                                 <span class=\"comment\">//推选者服务器为LOOKING状态&amp;&amp;选举周期小于逻辑时钟</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span>((ackstate == QuorumPeer.ServerState.LOOKING)</span><br><span class=\"line\">                                        &amp;&amp; (n.electionEpoch &lt; logicalclock.get()))&#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 创建新的投票</span></span><br><span class=\"line\">                                    Vote v = getVote();</span><br><span class=\"line\">                                    QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">                                    <span class=\"comment\">// 构造新的发送消息（本服务器自己的投票）</span></span><br><span class=\"line\">                                    ToSend notmsg = <span class=\"keyword\">new</span> ToSend(ToSend.mType.notification,</span><br><span class=\"line\">                                            v.getId(),</span><br><span class=\"line\">                                            v.getZxid(),</span><br><span class=\"line\">                                            logicalclock.get(),</span><br><span class=\"line\">                                            self.getPeerState(),</span><br><span class=\"line\">                                            response.sid,</span><br><span class=\"line\">                                            v.getPeerEpoch(),</span><br><span class=\"line\">                                            qv.toString().getBytes());</span><br><span class=\"line\">                                    <span class=\"comment\">// 将发送消息放置于队列，等待发送</span></span><br><span class=\"line\">                                    sendqueue.offer(notmsg);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                                 * If this server is not looking, but the one that sent the ack</span></span><br><span class=\"line\"><span class=\"comment\">                                 * is looking, then send back what it believes to be the leader.</span></span><br><span class=\"line\"><span class=\"comment\">                                 */</span></span><br><span class=\"line\">                                <span class=\"comment\">// 本服务器状态不为LOOKING，推送服务器是LOOKING状态，发送自己的选票</span></span><br><span class=\"line\">                                Vote current = self.getCurrentVote();</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(ackstate == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">                                        LOG.debug(<span class=\"string\">\"Sending new notification. My id =&#123;&#125; recipient=&#123;&#125; zxid=0x&#123;&#125; leader=&#123;&#125; config version = &#123;&#125;\"</span>,</span><br><span class=\"line\">                                                self.getId(),</span><br><span class=\"line\">                                                response.sid,</span><br><span class=\"line\">                                                Long.toHexString(current.getZxid()),</span><br><span class=\"line\">                                                current.getId(),</span><br><span class=\"line\">                                                Long.toHexString(self.getQuorumVerifier().getVersion()));</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">                                    ToSend notmsg = <span class=\"keyword\">new</span> ToSend(</span><br><span class=\"line\">                                            ToSend.mType.notification,</span><br><span class=\"line\">                                            current.getId(),</span><br><span class=\"line\">                                            current.getZxid(),</span><br><span class=\"line\">                                            current.getElectionEpoch(),</span><br><span class=\"line\">                                            self.getPeerState(),</span><br><span class=\"line\">                                            response.sid,</span><br><span class=\"line\">                                            current.getPeerEpoch(),</span><br><span class=\"line\">                                            qv.toString().getBytes());</span><br><span class=\"line\">                                    sendqueue.offer(notmsg);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        LOG.warn(<span class=\"string\">\"Interrupted Exception while waiting for new message\"</span> +</span><br><span class=\"line\">                                e.toString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"WorkerReceiver is down\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>WorkerReceiver实现了Runnable接口，是选票接收器。其会不断地从QuorumCnxManager中获取其他服务器发来的选举消息，并将其转换成一个选票，然后保存到recvqueue中，在选票接收过程中，如果发现该外部选票的选举轮次小于当前服务器的，那么忽略该外部投票，同时立即发送自己的内部投票。</p>\n<h3 id=\"2-2-WorkerSender\"><a href=\"#2-2-WorkerSender\" class=\"headerlink\" title=\"2.2 WorkerSender\"></a>2.2 WorkerSender</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerSender</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZooKeeperThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop;</span><br><span class=\"line\">    QuorumCnxManager manager;</span><br><span class=\"line\"></span><br><span class=\"line\">    WorkerSender(QuorumCnxManager manager)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"WorkerSender\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.manager = manager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ToSend m = sendqueue.poll(<span class=\"number\">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(m == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                process(m);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"WorkerSender is down\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Called by run() once there is a new message to send.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> m     message to send</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(ToSend m)</span> </span>&#123;</span><br><span class=\"line\">        ByteBuffer requestBuffer = buildMsg(m.state.ordinal(),</span><br><span class=\"line\">                                            m.leader,</span><br><span class=\"line\">                                            m.zxid,</span><br><span class=\"line\">                                            m.electionEpoch,</span><br><span class=\"line\">                                            m.peerEpoch,</span><br><span class=\"line\">                                            m.configData);</span><br><span class=\"line\"></span><br><span class=\"line\">        manager.toSend(m.sid, requestBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WorkerSender也实现了Runnable接口，为选票发送器，其会不断地从sendqueue中获取待发送的选票，并将其传递到底层QuorumCnxManager中</p>\n<h3 id=\"2-3-sendNotifications\"><a href=\"#2-3-sendNotifications\" class=\"headerlink\" title=\"2.3 sendNotifications\"></a>2.3 sendNotifications</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Send notifications to all peers upon a change in our vote</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendNotifications</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历投票参与者集合</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> sid : self.getCurrentAndNextConfigVoters()) &#123;</span><br><span class=\"line\">        QuorumVerifier qv = self.getQuorumVerifier();</span><br><span class=\"line\">        <span class=\"comment\">// 构造发送消息</span></span><br><span class=\"line\">        ToSend notmsg = <span class=\"keyword\">new</span> ToSend(ToSend.mType.notification,</span><br><span class=\"line\">                proposedLeader,</span><br><span class=\"line\">                proposedZxid,</span><br><span class=\"line\">                logicalclock.get(),</span><br><span class=\"line\">                QuorumPeer.ServerState.LOOKING,</span><br><span class=\"line\">                sid,</span><br><span class=\"line\">                proposedEpoch, qv.toString().getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">            LOG.debug(<span class=\"string\">\"Sending Notification: \"</span> + proposedLeader + <span class=\"string\">\" (n.leader), 0x\"</span>  +</span><br><span class=\"line\">                  Long.toHexString(proposedZxid) + <span class=\"string\">\" (n.zxid), 0x\"</span> + Long.toHexString(logicalclock.get())  +</span><br><span class=\"line\">                  <span class=\"string\">\" (n.round), \"</span> + sid + <span class=\"string\">\" (recipient), \"</span> + self.getId() +</span><br><span class=\"line\">                  <span class=\"string\">\" (myid), 0x\"</span> + Long.toHexString(proposedEpoch) + <span class=\"string\">\" (n.peerEpoch)\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将发送消息放置于队列</span></span><br><span class=\"line\">        sendqueue.offer(notmsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其会遍历所有的参与者投票集合，然后将自己的选票信息发送至上述所有的投票者集合，其并非同步发送，而是将ToSend消息放置于sendqueue中，之后由WorkerSender进行发送。</p>\n<h3 id=\"2-4-totalOrderPredicate\"><a href=\"#2-4-totalOrderPredicate\" class=\"headerlink\" title=\"2.4 totalOrderPredicate\"></a>2.4 totalOrderPredicate</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if a pair (server id, zxid) succeeds our</span></span><br><span class=\"line\"><span class=\"comment\"> * current vote.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id    Server identifier</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> zxid  Last zxid observed by the issuer of this vote</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">totalOrderPredicate</span><span class=\"params\">(<span class=\"keyword\">long</span> newId, <span class=\"keyword\">long</span> newZxid, <span class=\"keyword\">long</span> newEpoch, <span class=\"keyword\">long</span> curId, <span class=\"keyword\">long</span> curZxid, <span class=\"keyword\">long</span> curEpoch)</span> </span>&#123;</span><br><span class=\"line\">    LOG.debug(<span class=\"string\">\"id: \"</span> + newId + <span class=\"string\">\", proposed id: \"</span> + curId + <span class=\"string\">\", zxid: 0x\"</span> +</span><br><span class=\"line\">            Long.toHexString(newZxid) + <span class=\"string\">\", proposed zxid: 0x\"</span> + Long.toHexString(curZxid));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.getQuorumVerifier().getWeight(newId) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * We return true if one of the following three cases hold:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1- New epoch is higher</span></span><br><span class=\"line\"><span class=\"comment\">     * 2- New epoch is the same as current epoch, but new zxid is higher</span></span><br><span class=\"line\"><span class=\"comment\">     * 3- New epoch is the same as current epoch, new zxid is the same</span></span><br><span class=\"line\"><span class=\"comment\">     *  as current zxid, but server id is higher.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 1\\. 判断消息里的epoch是不是比当前的大，如果大则消息中id对应的服务器就是leader</span></span><br><span class=\"line\">    <span class=\"comment\">// 2\\. 如果epoch相等则判断zxid，如果消息里的zxid大，则消息中id对应的服务器就是leader</span></span><br><span class=\"line\">    <span class=\"comment\">// 3\\. 如果前面两个都相等那就比较服务器id，如果大，则其就是leader</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((newEpoch &gt; curEpoch) ||</span><br><span class=\"line\">            ((newEpoch == curEpoch) &amp;&amp;</span><br><span class=\"line\">            ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：该函数将接收的投票与自身投票进行PK，查看是否消息中包含的服务器id是否更优，其按照epoch、zxid、id的优先级进行PK。</p>\n<h3 id=\"2-5-termPredicate\"><a href=\"#2-5-termPredicate\" class=\"headerlink\" title=\"2.5 termPredicate\"></a>2.5 termPredicate</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Termination predicate. Given a set of votes, determines if have</span></span><br><span class=\"line\"><span class=\"comment\"> * sufficient to declare the end of the election round.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> votes</span></span><br><span class=\"line\"><span class=\"comment\"> *            Set of votes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> vote</span></span><br><span class=\"line\"><span class=\"comment\"> *            Identifier of the vote received last</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">termPredicate</span><span class=\"params\">(Map&lt;Long, Vote&gt; votes, Vote vote)</span> </span>&#123;</span><br><span class=\"line\">    SyncedLearnerTracker voteSet = <span class=\"keyword\">new</span> SyncedLearnerTracker();</span><br><span class=\"line\">    voteSet.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.getLastSeenQuorumVerifier() != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; self.getLastSeenQuorumVerifier().getVersion() &gt; self</span><br><span class=\"line\">                    .getQuorumVerifier().getVersion()) &#123;</span><br><span class=\"line\">        voteSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * First make the views consistent. Sometimes peers will have different</span></span><br><span class=\"line\"><span class=\"comment\">     * zxids for a server depending on timing.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;Long, Vote&gt; entry : votes.entrySet()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vote.equals(entry.getValue())) &#123;</span><br><span class=\"line\">            voteSet.addAck(entry.getKey());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//统计set，查看投某个id的票数是否超过一半</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> voteSet.hasAllQuorums();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数用于判断Leader选举是否结束，即是否有一半以上的服务器选出了相同的Leader，其过程是将收到的选票与当前选票进行对比，选票相同的放入同一个集合，之后判断选票相同的集合是否超过了半数。</p>\n<h3 id=\"2-6-checkLeader\"><a href=\"#2-6-checkLeader\" class=\"headerlink\" title=\"2.6 checkLeader\"></a>2.6 checkLeader</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> * In the <span class=\"keyword\">case</span> there is a leader elected, and a quorum supporting</span><br><span class=\"line\"> * <span class=\"keyword\">this</span> leader, we have to check <span class=\"keyword\">if</span> the leader has voted and acked</span><br><span class=\"line\"> * that it is leading. We need <span class=\"keyword\">this</span> check to avoid that peers keep</span><br><span class=\"line\"> * electing over and over a peer that has crashed and it is no</span><br><span class=\"line\"> * longer leading.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"meta\">@param</span> votes set of votes</span><br><span class=\"line\"> * <span class=\"meta\">@param</span>   leader  leader id</span><br><span class=\"line\"> * <span class=\"meta\">@param</span>   electionEpoch   epoch id</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkLeader</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;Long, Vote&gt; votes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> leader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> electionEpoch)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> predicate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If everyone else thinks I'm the leader, I must be the leader.</span></span><br><span class=\"line\"><span class=\"comment\">     * The other two checks are just for the case in which I'm not the</span></span><br><span class=\"line\"><span class=\"comment\">     * leader. If I'm not the leader and I haven't received a message</span></span><br><span class=\"line\"><span class=\"comment\">     * from leader stating that it is leading, then predicate is false.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(leader != self.getId())&#123;<span class=\"comment\">// 自己不为leader</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(votes.get(leader) == <span class=\"keyword\">null</span>) predicate = <span class=\"keyword\">false</span>;<span class=\"comment\">// 还未选出leader</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(votes.get(leader).getState() != ServerState.LEADING) predicate = <span class=\"keyword\">false</span>;<span class=\"comment\">// 选出的leader还未给出ack信号，其他服务器还不知道leader</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(logicalclock.get() != electionEpoch) &#123;<span class=\"comment\">// 逻辑时钟不等于选举周期</span></span><br><span class=\"line\">        predicate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> predicate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-lookForLeader\"><a href=\"#2-7-lookForLeader\" class=\"headerlink\" title=\"2.7 lookForLeader\"></a>2.7 lookForLeader</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Vote <span class=\"title\">lookForLeader</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        self.jmxLeaderElectionBean = <span class=\"keyword\">new</span> LeaderElectionBean();</span><br><span class=\"line\">        MBeanRegistry.getInstance().register(</span><br><span class=\"line\">                self.jmxLeaderElectionBean, self.jmxLocalPeerBean);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Failed to register with JMX\"</span>, e);</span><br><span class=\"line\">        self.jmxLeaderElectionBean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.start_fle == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       self.start_fle = Time.currentElapsedTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        HashMap&lt;Long, Vote&gt; recvset = <span class=\"keyword\">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Long, Vote&gt; outofelection = <span class=\"keyword\">new</span> HashMap&lt;Long, Vote&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> notTimeout = finalizeWait;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新逻辑时钟，每进行一轮选举，都需要更新逻辑时钟</span></span><br><span class=\"line\">            logicalclock.incrementAndGet();</span><br><span class=\"line\">            <span class=\"comment\">// 更新选票</span></span><br><span class=\"line\">            updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"New election. My id =  \"</span> + self.getId() +</span><br><span class=\"line\">                <span class=\"string\">\", proposed zxid=0x\"</span> + Long.toHexString(proposedZxid));</span><br><span class=\"line\">        <span class=\"comment\">// 向其他服务器发送自己的选票</span></span><br><span class=\"line\">        sendNotifications();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Loop in which we exchange notifications until we find a leader</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((self.getPeerState() == ServerState.LOOKING) &amp;&amp;</span><br><span class=\"line\">                (!stop))&#123;<span class=\"comment\">// 本服务器状态为LOOKING并且还未选出leader</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Remove next notification from queue, times out after 2 times</span></span><br><span class=\"line\"><span class=\"comment\">             * the termination time</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">             <span class=\"comment\">// 从recvqueue接收队列中取出投票</span></span><br><span class=\"line\">            Notification n = recvqueue.poll(notTimeout,</span><br><span class=\"line\">                    TimeUnit.MILLISECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Sends more notifications if haven't received enough.</span></span><br><span class=\"line\"><span class=\"comment\">             * Otherwise processes new notification.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">// 如果没有收到足够多的选票，则发送选票</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(manager.haveDelivered())&#123;<span class=\"comment\">// manager已经发送了所有选票消息</span></span><br><span class=\"line\">                    <span class=\"comment\">// 向所有其他服务器发送消息</span></span><br><span class=\"line\">                    sendNotifications();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 还未发送所有消息</span></span><br><span class=\"line\">                    <span class=\"comment\">// 连接其他每个服务器</span></span><br><span class=\"line\">                    manager.connectAll();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Exponential backoff</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmpTimeOut = notTimeout*<span class=\"number\">2</span>;</span><br><span class=\"line\">                notTimeout = (tmpTimeOut &lt; maxNotificationInterval?</span><br><span class=\"line\">                        tmpTimeOut : maxNotificationInterval);</span><br><span class=\"line\">                LOG.info(<span class=\"string\">\"Notification time out: \"</span> + notTimeout);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validVoter(n.sid) &amp;&amp; validVoter(n.leader)) &#123;<span class=\"comment\">// 投票者集合中包含接收到消息中的服务器id</span></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * Only proceed if the vote comes from a replica in the current or next</span></span><br><span class=\"line\"><span class=\"comment\">                 * voting view for a replica in the current or next voting view.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (n.state) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LOOKING:</span><br><span class=\"line\">                    <span class=\"comment\">// If notification &gt; current, replace and send messages out</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (n.electionEpoch &gt; logicalclock.get()) &#123;<span class=\"comment\">// 其选举周期大于逻辑时钟</span></span><br><span class=\"line\">                        <span class=\"comment\">// 重新赋值逻辑时钟</span></span><br><span class=\"line\">                        logicalclock.set(n.electionEpoch);</span><br><span class=\"line\">                        recvset.clear();</span><br><span class=\"line\">                        <span class=\"comment\">//投票PK，并更新自己的选票</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                                getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) &#123;</span><br><span class=\"line\">                            updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            updateProposal(getInitId(),</span><br><span class=\"line\">                                    getInitLastLoggedZxid(),</span><br><span class=\"line\">                                    getPeerEpoch());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//发送自己的投票结果</span></span><br><span class=\"line\">                        sendNotifications();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n.electionEpoch &lt; logicalclock.get()) &#123;<span class=\"comment\">// 选举周期小于逻辑时钟，不做处理</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">                            LOG.debug(<span class=\"string\">\"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x\"</span></span><br><span class=\"line\">                                    + Long.toHexString(n.electionEpoch)</span><br><span class=\"line\">                                    + <span class=\"string\">\", logicalclock=0x\"</span> + Long.toHexString(logicalclock.get()));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                            proposedLeader, proposedZxid, proposedEpoch)) &#123;<span class=\"comment\">//选举周期等于逻辑时钟，PK选票</span></span><br><span class=\"line\">                        <span class=\"comment\">// 更新选票</span></span><br><span class=\"line\">                        updateProposal(n.leader, n.zxid, n.peerEpoch);</span><br><span class=\"line\">                        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">                        sendNotifications();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class=\"line\">                        LOG.debug(<span class=\"string\">\"Adding vote: from=\"</span> + n.sid +</span><br><span class=\"line\">                                <span class=\"string\">\", proposed leader=\"</span> + n.leader +</span><br><span class=\"line\">                                <span class=\"string\">\", proposed zxid=0x\"</span> + Long.toHexString(n.zxid) +</span><br><span class=\"line\">                                <span class=\"string\">\", proposed election epoch=0x\"</span> + Long.toHexString(n.electionEpoch));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// recvset用于记录当前服务器在本轮次的Leader选举中收到的所有外部投票</span></span><br><span class=\"line\">                    recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (termPredicate(recvset,</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Vote(proposedLeader, proposedZxid,</span><br><span class=\"line\">                                    logicalclock.get(), proposedEpoch))) &#123;<span class=\"comment\">// 若能选出leader</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Verify if there is any change in the proposed leader</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>((n = recvqueue.poll(finalizeWait,</span><br><span class=\"line\">                                TimeUnit.MILLISECONDS)) != <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">// 遍历已经接收的投票集合</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,</span><br><span class=\"line\">                                    proposedLeader, proposedZxid, proposedEpoch))&#123;<span class=\"comment\">// 能够选出较优的服务器</span></span><br><span class=\"line\">                                recvqueue.put(n);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                         * This predicate is true once we don't read any new</span></span><br><span class=\"line\"><span class=\"comment\">                         * relevant message from the reception queue</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            self.setPeerState((proposedLeader == self.getId()) ?</span><br><span class=\"line\">                                    ServerState.LEADING: learningState());</span><br><span class=\"line\">                            Vote endVote = <span class=\"keyword\">new</span> Vote(proposedLeader,</span><br><span class=\"line\">                                    proposedZxid, logicalclock.get(), </span><br><span class=\"line\">                                    proposedEpoch);</span><br><span class=\"line\">                            leaveInstance(endVote);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> OBSERVING:</span><br><span class=\"line\">                    LOG.debug(<span class=\"string\">\"Notification from observer: \"</span> + n.sid);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> FOLLOWING:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LEADING:<span class=\"comment\">// 处于LEADING状态</span></span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                     * Consider all notifications from the same epoch</span></span><br><span class=\"line\"><span class=\"comment\">                     * together.</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(n.electionEpoch == logicalclock.get())&#123;<span class=\"comment\">// 与逻辑时钟相等</span></span><br><span class=\"line\">                        <span class=\"comment\">// 将该服务器和选票信息放入recvset中</span></span><br><span class=\"line\">                        recvset.put(n.sid, <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));</span><br><span class=\"line\">                        <span class=\"comment\">// 判断是否完成了leader选举</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(termPredicate(recvset, <span class=\"keyword\">new</span> Vote(n.version, n.leader,</span><br><span class=\"line\">                                        n.zxid, n.electionEpoch, n.peerEpoch, n.state))</span><br><span class=\"line\">                                        &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 设置本服务器的状态</span></span><br><span class=\"line\">                            self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">                                    ServerState.LEADING: learningState());</span><br><span class=\"line\">                            <span class=\"comment\">// 创建投票信息</span></span><br><span class=\"line\">                            Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, </span><br><span class=\"line\">                                    n.zxid, n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">                            leaveInstance(endVote);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                     * Before joining an established ensemble, verify that</span></span><br><span class=\"line\"><span class=\"comment\">                     * a majority are following the same leader.</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    outofelection.put(n.sid, <span class=\"keyword\">new</span> Vote(n.version, n.leader, </span><br><span class=\"line\">                            n.zxid, n.electionEpoch, n.peerEpoch, n.state));</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (termPredicate(outofelection, <span class=\"keyword\">new</span> Vote(n.version, n.leader,</span><br><span class=\"line\">                            n.zxid, n.electionEpoch, n.peerEpoch, n.state))</span><br><span class=\"line\">                            &amp;&amp; checkLeader(outofelection, n.leader, n.electionEpoch)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">                            logicalclock.set(n.electionEpoch);</span><br><span class=\"line\">                            self.setPeerState((n.leader == self.getId()) ?</span><br><span class=\"line\">                                    ServerState.LEADING: learningState());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Vote endVote = <span class=\"keyword\">new</span> Vote(n.leader, n.zxid, </span><br><span class=\"line\">                                n.electionEpoch, n.peerEpoch);</span><br><span class=\"line\">                        leaveInstance(endVote);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> endVote;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Notification state unrecoginized: \"</span> + n.state</span><br><span class=\"line\">                          + <span class=\"string\">\" (n.state), \"</span> + n.sid + <span class=\"string\">\" (n.sid)\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!validVoter(n.leader)) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Ignoring notification for non-cluster member sid &#123;&#125; from sid &#123;&#125;\"</span>, n.leader, n.sid);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!validVoter(n.sid)) &#123;</span><br><span class=\"line\">                    LOG.warn(<span class=\"string\">\"Ignoring notification for sid &#123;&#125; from non-quorum member sid &#123;&#125;\"</span>, n.leader, n.sid);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(self.jmxLeaderElectionBean != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                MBeanRegistry.getInstance().unregister(</span><br><span class=\"line\">                        self.jmxLeaderElectionBean);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOG.warn(<span class=\"string\">\"Failed to unregister with JMX\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.jmxLeaderElectionBean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        LOG.debug(<span class=\"string\">\"Number of connection processing threads: &#123;&#125;\"</span>,</span><br><span class=\"line\">                manager.getConnectionThreadCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数用于开始新一轮的Leader选举。</p>\n"},{"layout":"post","title":"feign10.12源码解析","date":"2020-07-29T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n# feign10.12源码解析\n\n[toc]\n\n## 时序图\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20200728215948.png)\n\n\n\n\n\n## 主要组件\n\n### Contract\n\nContract用于解析method源数据、参数类型和注解等。\n\n默认使用feign.Contract.Default。注册处理了@Headers，@RequestLine，@Body，@Param等注解。\n\n```java\npublic Default() {\n      super.registerClassAnnotation(Headers.class, (header, data) -> {\n        final String[] headersOnType = header.value();\n        checkState(headersOnType.length > 0, \"Headers annotation was empty on type %s.\",\n            data.configKey());\n        final Map<String, Collection<String>> headers = toMap(headersOnType);\n        headers.putAll(data.template().headers());\n        data.template().headers(null); // to clear\n        data.template().headers(headers);\n      });\n      super.registerMethodAnnotation(RequestLine.class, (ann, data) -> {\n        final String requestLine = ann.value();\n        checkState(emptyToNull(requestLine) != null,\n            \"RequestLine annotation was empty on method %s.\", data.configKey());\n\n        final Matcher requestLineMatcher = REQUEST_LINE_PATTERN.matcher(requestLine);\n        if (!requestLineMatcher.find()) {\n          throw new IllegalStateException(String.format(\n              \"RequestLine annotation didn't start with an HTTP verb on method %s\",\n              data.configKey()));\n        } else {\n          data.template().method(HttpMethod.valueOf(requestLineMatcher.group(1)));\n          data.template().uri(requestLineMatcher.group(2));\n        }\n        data.template().decodeSlash(ann.decodeSlash());\n        data.template()\n            .collectionFormat(ann.collectionFormat());\n      });\n      super.regodAnnotation(Body.class, (ann, data) -> {\n        final String body = ann.value();\n        checkState(emptyToNull(body) != null, \"Body annotation was empty on method %s.\",\n            data.configKey());\n        if (body.indexOf('{') == -1) {\n          data.template().body(body);\n        } else {\n          data.template().bodyTemplate(body);\n        }\n      });\n  ...\n  ...\n```\n\n对于我们平常使用的Spring来说，使用的是SpringMVC的注解。在spring-cloud-openfeign-core中，Spring提供了`SpringMvcContract`，注册了SpringMVC的注解。\n\n### Encoder和Decoder\n\nEncoder和Decoder主要对Request和Responde的编码和解码\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20200728221404.png)\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20200728215900.png)\n\n\n\n\n\n### Client\n\nClient用于执行最终的http请求。\n\n```java\npublic interface Client {\n\n  /**\n   * Executes a request against its {@link Request#url() url} and returns a response.\n   *\n   * @param request safe to replay.\n   * @param options options to apply to this request.\n   * @return connected response, {@link Response.Body} is absent or unread.\n   * @throws IOException on a network error connecting to {@link Request#url()}.\n   */\n  Response execute(Request request, Options options) throws IOException;\n}\n```\n\n默认使用的是Client.Default，通过源码可以看到默认是使用HttpURLConnection来请求http的。\n\n```java\nclass Default implements Client {\n     @Override\n    public Response execute(Request request, Options options) throws IOException {\n      HttpURLConnection connection = convertAndSend(request, options);\n      return convertResponse(connection, request);\n    } \n}\n```\n\nFeign对HttpClient和OkHttp的支持。\n\n```java\npublic final class ApacheHttpClient implements Client {\n  private final HttpClient client;\n\n  public ApacheHttpClient() {\n    this(HttpClientBuilder.create().build());\n  }\n  @Override\n  public Response execute(Request request, Request.Options options) throws IOException {\n    HttpUriRequest httpUriRequest;\n    try {\n      httpUriRequest = toHttpUriRequest(request, options);\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URL '\" + request.url() + \"' couldn't be parsed into a URI\", e);\n    }\n    HttpResponse httpResponse = client.execute(httpUriRequest);\n    return toFeignResponse(httpResponse, request);\n  }\n}\n```\n\n```java\npublic final class OkHttpClient implements Client {\n  private final okhttp3.OkHttpClient delegate;\n\n  public OkHttpClient() {\n    this(new okhttp3.OkHttpClient());\n  }\n\n  public OkHttpClient(okhttp3.OkHttpClient delegate) {\n    this.delegate = delegate;\n  }\n  @Override\n  public feign.Response execute(feign.Request input, feign.Request.Options options)\n      throws IOException {\n    okhttp3.OkHttpClient requestScoped;\n    if (delegate.connectTimeoutMillis() != options.connectTimeoutMillis()\n        || delegate.readTimeoutMillis() != options.readTimeoutMillis()\n        || delegate.followRedirects() != options.isFollowRedirects()) {\n      requestScoped = delegate.newBuilder()\n          .connectTimeout(options.connectTimeoutMillis(), TimeUnit.MILLISECONDS)\n          .readTimeout(options.readTimeoutMillis(), TimeUnit.MILLISECONDS)\n          .followRedirects(options.isFollowRedirects())\n          .build();\n    } else {\n      requestScoped = delegate;\n    }\n    Request request = toOkHttpRequest(input);\n    Response response = requestScoped.newCall(request).execute();\n    return toFeignResponse(response, input).toBuilder().request(input).build();\n  }\n}\n```\n\n### Target\n\nTarget比较没什么存在感，但是却关系到最后的Request生成。\n\n```java\npublic interface Target<T> {\n  public Request apply(RequestTemplate input);\n}\n```\n\n默认使用`feign.Target.HardCodedTarget`，用于将baseuri和请求的path进行拼接。\n\n```java\npublic static class HardCodedTarget<T> implements Target<T> {\n     @Override\n    public Request apply(RequestTemplate input) {\n      if (input.url().indexOf(\"http\") != 0) {\n        input.target(url());\n      }\n      return input.request();\n    } \n}\n```\n\n在feign源码中，还有另外一个实现类`LoadBalancingTarget`。\n\n```java\npublic class LoadBalancingTarget<T> implements Target<T> {\n   @Override\n  public Request apply(RequestTemplate input) {\n    Server currentServer = lb.chooseServer(null);\n    String url = format(\"%s://%s%s\", scheme, currentServer.getHostPort(), path);\n    input.target(url);\n    try {\n      return input.request();\n    } finally {\n      lb.getLoadBalancerStats().incrementNumRequests(currentServer);\n    }\n  } \n}\n```\n\n\n\n### Capability\n\n在feign客户端构建过程中，对以上组件都可以进行能力加强\n\n```java\n    public Feign build() {\n      // Capability 能力加强\n      Client client = Capability.enrich(this.client, capabilities);\n      Retryer retryer = Capability.enrich(this.retryer, capabilities);\n      List<RequestInterceptor> requestInterceptors = this.requestInterceptors.stream()\n          .map(ri -> Capability.enrich(ri, capabilities))\n          .collect(Collectors.toList());\n      Logger logger = Capability.enrich(this.logger, capabilities);\n      Contract contract = Capability.enrich(this.contract, capabilities);\n      Options options = Capability.enrich(this.options, capabilities);\n      Encoder encoder = Capability.enrich(this.encoder, capabilities);\n      Decoder decoder = Capability.enrich(this.decoder, capabilities);\n      InvocationHandlerFactory invocationHandlerFactory =\n          Capability.enrich(this.invocationHandlerFactory, capabilities);\n      QueryMapEncoder queryMapEncoder = Capability.enrich(this.queryMapEncoder, capabilities);\n\n      ...\n       \n    }\n  }\n```\n\n\n\n```java\n  static <E> E enrich(E componentToEnrich, List<Capability> capabilities) {\n    return capabilities.stream()\n        .reduce(\n            componentToEnrich,\n            (component, capability) -> invoke(component, capability),\n            (component, enrichedComponent) -> enrichedComponent);\n  }\n\n  static <E> E invoke(E target, Capability capability) {\n    return Arrays.stream(capability.getClass().getMethods())\n      \t//找到方法名为\"enrich\"，并且返回类型相等的方法.\n        .filter(method -> method.getName().equals(\"enrich\"))\n        .filter(method -> method.getReturnType().isInstance(target))\n        .findFirst()\n        .map(method -> {\n          try {\n            return (E) method.invoke(capability, target);\n          } catch (IllegalAccessException | IllegalArgumentException\n              | InvocationTargetException e) {\n            throw new RuntimeException(\"Unable to enrich \" + target, e);\n          }\n        })\n        .orElse(target);\n  }\n```\n\n在feign源码中有这些实现类`HystrixCapability`,`Metrics4Capability`,`Metrics5Capability`,`MicrometerCapability`.\n\n```java\npublic final class HystrixCapability implements Capability {\n\n  private SetterFactory setterFactory = new SetterFactory.Default();\n  private final Map<Class, Object> fallbacks = new HashMap<>();\n\n  /**\n   * Allows you to override hystrix properties such as thread pools and command keys.\n   */\n  public HystrixCapability setterFactory(SetterFactory setterFactory) {\n    this.setterFactory = setterFactory;\n    return this;\n  }\n\n  @Override\n  public Contract enrich(Contract contract) {\n    return new HystrixDelegatingContract(contract);\n  }\n\n  @Override\n  public InvocationHandlerFactory enrich(InvocationHandlerFactory invocationHandlerFactory) {\n    return (target, dispatch) -> new HystrixInvocationHandler(target, dispatch, setterFactory,\n        fallbacks.containsKey(target.type())\n            ? new FallbackFactory.Default<>(fallbacks.get(target.type()))\n            : null);\n  }\n\n  public <E> Capability fallback(Class<E> api, E fallback) {\n    fallbacks.put(api, fallback);\n\n    return this;\n  }\n\n}\n\n```\n\n\n\n\n\n\n\n## Spring整合\n\n在spring-cloud-openfeign-core下，提供了Spring和feign的整合.\n\nFeignClientFactoryBean：创建feign代理类\n\nSpringMvcContract：解析methodMetaData\n\nFeignClientsConfiguration：配置feign的一些组件\n\nFeignAutoConfiguration：配置httpclient\n\n","source":"_posts/2020-07-30-feign10.12源码解析.md","raw":"---\nlayout:     post\ntitle:      \"feign10.12源码解析\"\ndate:       2020-07-30\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n# feign10.12源码解析\n\n[toc]\n\n## 时序图\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20200728215948.png)\n\n\n\n\n\n## 主要组件\n\n### Contract\n\nContract用于解析method源数据、参数类型和注解等。\n\n默认使用feign.Contract.Default。注册处理了@Headers，@RequestLine，@Body，@Param等注解。\n\n```java\npublic Default() {\n      super.registerClassAnnotation(Headers.class, (header, data) -> {\n        final String[] headersOnType = header.value();\n        checkState(headersOnType.length > 0, \"Headers annotation was empty on type %s.\",\n            data.configKey());\n        final Map<String, Collection<String>> headers = toMap(headersOnType);\n        headers.putAll(data.template().headers());\n        data.template().headers(null); // to clear\n        data.template().headers(headers);\n      });\n      super.registerMethodAnnotation(RequestLine.class, (ann, data) -> {\n        final String requestLine = ann.value();\n        checkState(emptyToNull(requestLine) != null,\n            \"RequestLine annotation was empty on method %s.\", data.configKey());\n\n        final Matcher requestLineMatcher = REQUEST_LINE_PATTERN.matcher(requestLine);\n        if (!requestLineMatcher.find()) {\n          throw new IllegalStateException(String.format(\n              \"RequestLine annotation didn't start with an HTTP verb on method %s\",\n              data.configKey()));\n        } else {\n          data.template().method(HttpMethod.valueOf(requestLineMatcher.group(1)));\n          data.template().uri(requestLineMatcher.group(2));\n        }\n        data.template().decodeSlash(ann.decodeSlash());\n        data.template()\n            .collectionFormat(ann.collectionFormat());\n      });\n      super.regodAnnotation(Body.class, (ann, data) -> {\n        final String body = ann.value();\n        checkState(emptyToNull(body) != null, \"Body annotation was empty on method %s.\",\n            data.configKey());\n        if (body.indexOf('{') == -1) {\n          data.template().body(body);\n        } else {\n          data.template().bodyTemplate(body);\n        }\n      });\n  ...\n  ...\n```\n\n对于我们平常使用的Spring来说，使用的是SpringMVC的注解。在spring-cloud-openfeign-core中，Spring提供了`SpringMvcContract`，注册了SpringMVC的注解。\n\n### Encoder和Decoder\n\nEncoder和Decoder主要对Request和Responde的编码和解码\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20200728221404.png)\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20200728215900.png)\n\n\n\n\n\n### Client\n\nClient用于执行最终的http请求。\n\n```java\npublic interface Client {\n\n  /**\n   * Executes a request against its {@link Request#url() url} and returns a response.\n   *\n   * @param request safe to replay.\n   * @param options options to apply to this request.\n   * @return connected response, {@link Response.Body} is absent or unread.\n   * @throws IOException on a network error connecting to {@link Request#url()}.\n   */\n  Response execute(Request request, Options options) throws IOException;\n}\n```\n\n默认使用的是Client.Default，通过源码可以看到默认是使用HttpURLConnection来请求http的。\n\n```java\nclass Default implements Client {\n     @Override\n    public Response execute(Request request, Options options) throws IOException {\n      HttpURLConnection connection = convertAndSend(request, options);\n      return convertResponse(connection, request);\n    } \n}\n```\n\nFeign对HttpClient和OkHttp的支持。\n\n```java\npublic final class ApacheHttpClient implements Client {\n  private final HttpClient client;\n\n  public ApacheHttpClient() {\n    this(HttpClientBuilder.create().build());\n  }\n  @Override\n  public Response execute(Request request, Request.Options options) throws IOException {\n    HttpUriRequest httpUriRequest;\n    try {\n      httpUriRequest = toHttpUriRequest(request, options);\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URL '\" + request.url() + \"' couldn't be parsed into a URI\", e);\n    }\n    HttpResponse httpResponse = client.execute(httpUriRequest);\n    return toFeignResponse(httpResponse, request);\n  }\n}\n```\n\n```java\npublic final class OkHttpClient implements Client {\n  private final okhttp3.OkHttpClient delegate;\n\n  public OkHttpClient() {\n    this(new okhttp3.OkHttpClient());\n  }\n\n  public OkHttpClient(okhttp3.OkHttpClient delegate) {\n    this.delegate = delegate;\n  }\n  @Override\n  public feign.Response execute(feign.Request input, feign.Request.Options options)\n      throws IOException {\n    okhttp3.OkHttpClient requestScoped;\n    if (delegate.connectTimeoutMillis() != options.connectTimeoutMillis()\n        || delegate.readTimeoutMillis() != options.readTimeoutMillis()\n        || delegate.followRedirects() != options.isFollowRedirects()) {\n      requestScoped = delegate.newBuilder()\n          .connectTimeout(options.connectTimeoutMillis(), TimeUnit.MILLISECONDS)\n          .readTimeout(options.readTimeoutMillis(), TimeUnit.MILLISECONDS)\n          .followRedirects(options.isFollowRedirects())\n          .build();\n    } else {\n      requestScoped = delegate;\n    }\n    Request request = toOkHttpRequest(input);\n    Response response = requestScoped.newCall(request).execute();\n    return toFeignResponse(response, input).toBuilder().request(input).build();\n  }\n}\n```\n\n### Target\n\nTarget比较没什么存在感，但是却关系到最后的Request生成。\n\n```java\npublic interface Target<T> {\n  public Request apply(RequestTemplate input);\n}\n```\n\n默认使用`feign.Target.HardCodedTarget`，用于将baseuri和请求的path进行拼接。\n\n```java\npublic static class HardCodedTarget<T> implements Target<T> {\n     @Override\n    public Request apply(RequestTemplate input) {\n      if (input.url().indexOf(\"http\") != 0) {\n        input.target(url());\n      }\n      return input.request();\n    } \n}\n```\n\n在feign源码中，还有另外一个实现类`LoadBalancingTarget`。\n\n```java\npublic class LoadBalancingTarget<T> implements Target<T> {\n   @Override\n  public Request apply(RequestTemplate input) {\n    Server currentServer = lb.chooseServer(null);\n    String url = format(\"%s://%s%s\", scheme, currentServer.getHostPort(), path);\n    input.target(url);\n    try {\n      return input.request();\n    } finally {\n      lb.getLoadBalancerStats().incrementNumRequests(currentServer);\n    }\n  } \n}\n```\n\n\n\n### Capability\n\n在feign客户端构建过程中，对以上组件都可以进行能力加强\n\n```java\n    public Feign build() {\n      // Capability 能力加强\n      Client client = Capability.enrich(this.client, capabilities);\n      Retryer retryer = Capability.enrich(this.retryer, capabilities);\n      List<RequestInterceptor> requestInterceptors = this.requestInterceptors.stream()\n          .map(ri -> Capability.enrich(ri, capabilities))\n          .collect(Collectors.toList());\n      Logger logger = Capability.enrich(this.logger, capabilities);\n      Contract contract = Capability.enrich(this.contract, capabilities);\n      Options options = Capability.enrich(this.options, capabilities);\n      Encoder encoder = Capability.enrich(this.encoder, capabilities);\n      Decoder decoder = Capability.enrich(this.decoder, capabilities);\n      InvocationHandlerFactory invocationHandlerFactory =\n          Capability.enrich(this.invocationHandlerFactory, capabilities);\n      QueryMapEncoder queryMapEncoder = Capability.enrich(this.queryMapEncoder, capabilities);\n\n      ...\n       \n    }\n  }\n```\n\n\n\n```java\n  static <E> E enrich(E componentToEnrich, List<Capability> capabilities) {\n    return capabilities.stream()\n        .reduce(\n            componentToEnrich,\n            (component, capability) -> invoke(component, capability),\n            (component, enrichedComponent) -> enrichedComponent);\n  }\n\n  static <E> E invoke(E target, Capability capability) {\n    return Arrays.stream(capability.getClass().getMethods())\n      \t//找到方法名为\"enrich\"，并且返回类型相等的方法.\n        .filter(method -> method.getName().equals(\"enrich\"))\n        .filter(method -> method.getReturnType().isInstance(target))\n        .findFirst()\n        .map(method -> {\n          try {\n            return (E) method.invoke(capability, target);\n          } catch (IllegalAccessException | IllegalArgumentException\n              | InvocationTargetException e) {\n            throw new RuntimeException(\"Unable to enrich \" + target, e);\n          }\n        })\n        .orElse(target);\n  }\n```\n\n在feign源码中有这些实现类`HystrixCapability`,`Metrics4Capability`,`Metrics5Capability`,`MicrometerCapability`.\n\n```java\npublic final class HystrixCapability implements Capability {\n\n  private SetterFactory setterFactory = new SetterFactory.Default();\n  private final Map<Class, Object> fallbacks = new HashMap<>();\n\n  /**\n   * Allows you to override hystrix properties such as thread pools and command keys.\n   */\n  public HystrixCapability setterFactory(SetterFactory setterFactory) {\n    this.setterFactory = setterFactory;\n    return this;\n  }\n\n  @Override\n  public Contract enrich(Contract contract) {\n    return new HystrixDelegatingContract(contract);\n  }\n\n  @Override\n  public InvocationHandlerFactory enrich(InvocationHandlerFactory invocationHandlerFactory) {\n    return (target, dispatch) -> new HystrixInvocationHandler(target, dispatch, setterFactory,\n        fallbacks.containsKey(target.type())\n            ? new FallbackFactory.Default<>(fallbacks.get(target.type()))\n            : null);\n  }\n\n  public <E> Capability fallback(Class<E> api, E fallback) {\n    fallbacks.put(api, fallback);\n\n    return this;\n  }\n\n}\n\n```\n\n\n\n\n\n\n\n## Spring整合\n\n在spring-cloud-openfeign-core下，提供了Spring和feign的整合.\n\nFeignClientFactoryBean：创建feign代理类\n\nSpringMvcContract：解析methodMetaData\n\nFeignClientsConfiguration：配置feign的一些组件\n\nFeignAutoConfiguration：配置httpclient\n\n","slug":"2020-07-30-feign10.12源码解析","published":1,"updated":"2020-07-30T10:51:16.056Z","comments":1,"photos":[],"link":"","_id":"ckd8oi5c40000vkytdhvz0dnl","content":"<h1 id=\"feign10-12源码解析\"><a href=\"#feign10-12源码解析\" class=\"headerlink\" title=\"feign10.12源码解析\"></a>feign10.12源码解析</h1><p>[toc]</p>\n<h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><p><img src= \"/img/loading.gif\" data-src=\"https://raw.githubusercontent.com/guhailin/pic/master/20200728215948.png\" alt=\"\"></p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><h3 id=\"Contract\"><a href=\"#Contract\" class=\"headerlink\" title=\"Contract\"></a>Contract</h3><p>Contract用于解析method源数据、参数类型和注解等。</p>\n<p>默认使用feign.Contract.Default。注册处理了@Headers，@RequestLine，@Body，@Param等注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Default</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.registerClassAnnotation(Headers<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">header</span>, <span class=\"title\">data</span>) -&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String[] headersOnType = header.value();</span><br><span class=\"line\">        checkState(headersOnType.length &gt; <span class=\"number\">0</span>, <span class=\"string\">\"Headers annotation was empty on type %s.\"</span>,</span><br><span class=\"line\">            data.configKey());</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;String, Collection&lt;String&gt;&gt; headers = toMap(headersOnType);</span><br><span class=\"line\">        headers.putAll(data.template().headers());</span><br><span class=\"line\">        data.template().headers(<span class=\"keyword\">null</span>); <span class=\"comment\">// to clear</span></span><br><span class=\"line\">        data.template().headers(headers);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.registerMethodAnnotation(RequestLine<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">ann</span>, <span class=\"title\">data</span>) -&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String requestLine = ann.value();</span><br><span class=\"line\">        checkState(emptyToNull(requestLine) != <span class=\"keyword\">null</span>,</span><br><span class=\"line\">            <span class=\"string\">\"RequestLine annotation was empty on method %s.\"</span>, data.configKey());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Matcher requestLineMatcher = REQUEST_LINE_PATTERN.matcher(requestLine);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!requestLineMatcher.find()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(String.format(</span><br><span class=\"line\">              <span class=\"string\">\"RequestLine annotation didn't start with an HTTP verb on method %s\"</span>,</span><br><span class=\"line\">              data.configKey()));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          data.template().method(HttpMethod.valueOf(requestLineMatcher.group(<span class=\"number\">1</span>)));</span><br><span class=\"line\">          data.template().uri(requestLineMatcher.group(<span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        data.template().decodeSlash(ann.decodeSlash());</span><br><span class=\"line\">        data.template()</span><br><span class=\"line\">            .collectionFormat(ann.collectionFormat());</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.regodAnnotation(Body<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">ann</span>, <span class=\"title\">data</span>) -&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String body = ann.value();</span><br><span class=\"line\">        checkState(emptyToNull(body) != <span class=\"keyword\">null</span>, <span class=\"string\">\"Body annotation was empty on method %s.\"</span>,</span><br><span class=\"line\">            data.configKey());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body.indexOf(<span class=\"string\">'&#123;'</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          data.template().body(body);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          data.template().bodyTemplate(body);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>对于我们平常使用的Spring来说，使用的是SpringMVC的注解。在spring-cloud-openfeign-core中，Spring提供了<code>SpringMvcContract</code>，注册了SpringMVC的注解。</p>\n<h3 id=\"Encoder和Decoder\"><a href=\"#Encoder和Decoder\" class=\"headerlink\" title=\"Encoder和Decoder\"></a>Encoder和Decoder</h3><p>Encoder和Decoder主要对Request和Responde的编码和解码</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://raw.githubusercontent.com/guhailin/pic/master/20200728221404.png\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://raw.githubusercontent.com/guhailin/pic/master/20200728215900.png\" alt=\"\"></p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><p>Client用于执行最终的http请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Executes a request against its &#123;<span class=\"doctag\">@link</span> Request#url() url&#125; and returns a response.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> request safe to replay.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> options options to apply to this request.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> connected response, &#123;<span class=\"doctag\">@link</span> Response.Body&#125; is absent or unread.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> IOException on a network error connecting to &#123;<span class=\"doctag\">@link</span> Request#url()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\">Response <span class=\"title\">execute</span><span class=\"params\">(Request request, Options options)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认使用的是Client.Default，通过源码可以看到默认是使用HttpURLConnection来请求http的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Default</span> <span class=\"keyword\">implements</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">execute</span><span class=\"params\">(Request request, Options options)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">      HttpURLConnection connection = convertAndSend(request, options);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> convertResponse(connection, request);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feign对HttpClient和OkHttp的支持。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApacheHttpClient</span> <span class=\"keyword\">implements</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApacheHttpClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(HttpClientBuilder.create().build());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">execute</span><span class=\"params\">(Request request, Request.Options options)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    HttpUriRequest httpUriRequest;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      httpUriRequest = toHttpUriRequest(request, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (URISyntaxException e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"URL '\"</span> + request.url() + <span class=\"string\">\"' couldn't be parsed into a URI\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    HttpResponse httpResponse = client.execute(httpUriRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toFeignResponse(httpResponse, request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OkHttpClient</span> <span class=\"keyword\">implements</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> okhttp3.OkHttpClient delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OkHttpClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"keyword\">new</span> okhttp3.OkHttpClient());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OkHttpClient</span><span class=\"params\">(okhttp3.OkHttpClient delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = delegate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> feign.<span class=\"function\">Response <span class=\"title\">execute</span><span class=\"params\">(feign.Request input, feign.Request.Options options)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    okhttp3.OkHttpClient requestScoped;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.connectTimeoutMillis() != options.connectTimeoutMillis()</span><br><span class=\"line\">        || delegate.readTimeoutMillis() != options.readTimeoutMillis()</span><br><span class=\"line\">        || delegate.followRedirects() != options.isFollowRedirects()) &#123;</span><br><span class=\"line\">      requestScoped = delegate.newBuilder()</span><br><span class=\"line\">          .connectTimeout(options.connectTimeoutMillis(), TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .readTimeout(options.readTimeoutMillis(), TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .followRedirects(options.isFollowRedirects())</span><br><span class=\"line\">          .build();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      requestScoped = delegate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Request request = toOkHttpRequest(input);</span><br><span class=\"line\">    Response response = requestScoped.newCall(request).execute();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toFeignResponse(response, input).toBuilder().request(input).build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>Target比较没什么存在感，但是却关系到最后的Request生成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Target</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate input)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认使用<code>feign.Target.HardCodedTarget</code>，用于将baseuri和请求的path进行拼接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HardCodedTarget</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Target</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate input)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (input.url().indexOf(<span class=\"string\">\"http\"</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        input.target(url());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> input.request();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在feign源码中，还有另外一个实现类<code>LoadBalancingTarget</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadBalancingTarget</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Target</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate input)</span> </span>&#123;</span><br><span class=\"line\">    Server currentServer = lb.chooseServer(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    String url = format(<span class=\"string\">\"%s://%s%s\"</span>, scheme, currentServer.getHostPort(), path);</span><br><span class=\"line\">    input.target(url);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> input.request();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      lb.getLoadBalancerStats().incrementNumRequests(currentServer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Capability\"><a href=\"#Capability\" class=\"headerlink\" title=\"Capability\"></a>Capability</h3><p>在feign客户端构建过程中，对以上组件都可以进行能力加强</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Feign <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Capability 能力加强</span></span><br><span class=\"line\">    Client client = Capability.enrich(<span class=\"keyword\">this</span>.client, capabilities);</span><br><span class=\"line\">    Retryer retryer = Capability.enrich(<span class=\"keyword\">this</span>.retryer, capabilities);</span><br><span class=\"line\">    List&lt;RequestInterceptor&gt; requestInterceptors = <span class=\"keyword\">this</span>.requestInterceptors.stream()</span><br><span class=\"line\">        .map(ri -&gt; Capability.enrich(ri, capabilities))</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">    Logger logger = Capability.enrich(<span class=\"keyword\">this</span>.logger, capabilities);</span><br><span class=\"line\">    Contract contract = Capability.enrich(<span class=\"keyword\">this</span>.contract, capabilities);</span><br><span class=\"line\">    Options options = Capability.enrich(<span class=\"keyword\">this</span>.options, capabilities);</span><br><span class=\"line\">    Encoder encoder = Capability.enrich(<span class=\"keyword\">this</span>.encoder, capabilities);</span><br><span class=\"line\">    Decoder decoder = Capability.enrich(<span class=\"keyword\">this</span>.decoder, capabilities);</span><br><span class=\"line\">    InvocationHandlerFactory invocationHandlerFactory =</span><br><span class=\"line\">        Capability.enrich(<span class=\"keyword\">this</span>.invocationHandlerFactory, capabilities);</span><br><span class=\"line\">    QueryMapEncoder queryMapEncoder = Capability.enrich(<span class=\"keyword\">this</span>.queryMapEncoder, capabilities);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;E&gt; <span class=\"function\">E <span class=\"title\">enrich</span><span class=\"params\">(E componentToEnrich, List&lt;Capability&gt; capabilities)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> capabilities.stream()</span><br><span class=\"line\">      .reduce(</span><br><span class=\"line\">          componentToEnrich,</span><br><span class=\"line\">          (component, capability) -&gt; invoke(component, capability),</span><br><span class=\"line\">          (component, enrichedComponent) -&gt; enrichedComponent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;E&gt; <span class=\"function\">E <span class=\"title\">invoke</span><span class=\"params\">(E target, Capability capability)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Arrays.stream(capability.getClass().getMethods())</span><br><span class=\"line\">    \t<span class=\"comment\">//找到方法名为\"enrich\"，并且返回类型相等的方法.</span></span><br><span class=\"line\">      .filter(method -&gt; method.getName().equals(<span class=\"string\">\"enrich\"</span>))</span><br><span class=\"line\">      .filter(method -&gt; method.getReturnType().isInstance(target))</span><br><span class=\"line\">      .findFirst()</span><br><span class=\"line\">      .map(method -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (E) method.invoke(capability, target);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | IllegalArgumentException</span><br><span class=\"line\">            | InvocationTargetException e) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to enrich \"</span> + target, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .orElse(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在feign源码中有这些实现类<code>HystrixCapability</code>,<code>Metrics4Capability</code>,<code>Metrics5Capability</code>,<code>MicrometerCapability</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCapability</span> <span class=\"keyword\">implements</span> <span class=\"title\">Capability</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> SetterFactory setterFactory = <span class=\"keyword\">new</span> SetterFactory.Default();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Class, Object&gt; fallbacks = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Allows you to override hystrix properties such as thread pools and command keys.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> HystrixCapability <span class=\"title\">setterFactory</span><span class=\"params\">(SetterFactory setterFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setterFactory = setterFactory;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Contract <span class=\"title\">enrich</span><span class=\"params\">(Contract contract)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixDelegatingContract(contract);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> InvocationHandlerFactory <span class=\"title\">enrich</span><span class=\"params\">(InvocationHandlerFactory invocationHandlerFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (target, dispatch) -&gt; <span class=\"keyword\">new</span> HystrixInvocationHandler(target, dispatch, setterFactory,</span><br><span class=\"line\">        fallbacks.containsKey(target.type())</span><br><span class=\"line\">            ? <span class=\"keyword\">new</span> FallbackFactory.Default&lt;&gt;(fallbacks.get(target.type()))</span><br><span class=\"line\">            : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\">Capability <span class=\"title\">fallback</span><span class=\"params\">(Class&lt;E&gt; api, E fallback)</span> </span>&#123;</span><br><span class=\"line\">    fallbacks.put(api, fallback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Spring整合\"><a href=\"#Spring整合\" class=\"headerlink\" title=\"Spring整合\"></a>Spring整合</h2><p>在spring-cloud-openfeign-core下，提供了Spring和feign的整合.</p>\n<p>FeignClientFactoryBean：创建feign代理类</p>\n<p>SpringMvcContract：解析methodMetaData</p>\n<p>FeignClientsConfiguration：配置feign的一些组件</p>\n<p>FeignAutoConfiguration：配置httpclient</p>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h1 id=\"feign10-12源码解析\"><a href=\"#feign10-12源码解析\" class=\"headerlink\" title=\"feign10.12源码解析\"></a>feign10.12源码解析</h1><p>[toc]</p>\n<h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><p><img src=\"https://raw.githubusercontent.com/guhailin/pic/master/20200728215948.png\" alt=\"\"></p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><h3 id=\"Contract\"><a href=\"#Contract\" class=\"headerlink\" title=\"Contract\"></a>Contract</h3><p>Contract用于解析method源数据、参数类型和注解等。</p>\n<p>默认使用feign.Contract.Default。注册处理了@Headers，@RequestLine，@Body，@Param等注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Default</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.registerClassAnnotation(Headers<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">header</span>, <span class=\"title\">data</span>) -&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String[] headersOnType = header.value();</span><br><span class=\"line\">        checkState(headersOnType.length &gt; <span class=\"number\">0</span>, <span class=\"string\">\"Headers annotation was empty on type %s.\"</span>,</span><br><span class=\"line\">            data.configKey());</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;String, Collection&lt;String&gt;&gt; headers = toMap(headersOnType);</span><br><span class=\"line\">        headers.putAll(data.template().headers());</span><br><span class=\"line\">        data.template().headers(<span class=\"keyword\">null</span>); <span class=\"comment\">// to clear</span></span><br><span class=\"line\">        data.template().headers(headers);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.registerMethodAnnotation(RequestLine<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">ann</span>, <span class=\"title\">data</span>) -&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String requestLine = ann.value();</span><br><span class=\"line\">        checkState(emptyToNull(requestLine) != <span class=\"keyword\">null</span>,</span><br><span class=\"line\">            <span class=\"string\">\"RequestLine annotation was empty on method %s.\"</span>, data.configKey());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Matcher requestLineMatcher = REQUEST_LINE_PATTERN.matcher(requestLine);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!requestLineMatcher.find()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(String.format(</span><br><span class=\"line\">              <span class=\"string\">\"RequestLine annotation didn't start with an HTTP verb on method %s\"</span>,</span><br><span class=\"line\">              data.configKey()));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          data.template().method(HttpMethod.valueOf(requestLineMatcher.group(<span class=\"number\">1</span>)));</span><br><span class=\"line\">          data.template().uri(requestLineMatcher.group(<span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        data.template().decodeSlash(ann.decodeSlash());</span><br><span class=\"line\">        data.template()</span><br><span class=\"line\">            .collectionFormat(ann.collectionFormat());</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.regodAnnotation(Body<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">ann</span>, <span class=\"title\">data</span>) -&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String body = ann.value();</span><br><span class=\"line\">        checkState(emptyToNull(body) != <span class=\"keyword\">null</span>, <span class=\"string\">\"Body annotation was empty on method %s.\"</span>,</span><br><span class=\"line\">            data.configKey());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body.indexOf(<span class=\"string\">'&#123;'</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          data.template().body(body);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          data.template().bodyTemplate(body);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>对于我们平常使用的Spring来说，使用的是SpringMVC的注解。在spring-cloud-openfeign-core中，Spring提供了<code>SpringMvcContract</code>，注册了SpringMVC的注解。</p>\n<h3 id=\"Encoder和Decoder\"><a href=\"#Encoder和Decoder\" class=\"headerlink\" title=\"Encoder和Decoder\"></a>Encoder和Decoder</h3><p>Encoder和Decoder主要对Request和Responde的编码和解码</p>\n<p><img src=\"https://raw.githubusercontent.com/guhailin/pic/master/20200728221404.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/guhailin/pic/master/20200728215900.png\" alt=\"\"></p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><p>Client用于执行最终的http请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Executes a request against its &#123;<span class=\"doctag\">@link</span> Request#url() url&#125; and returns a response.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> request safe to replay.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> options options to apply to this request.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> connected response, &#123;<span class=\"doctag\">@link</span> Response.Body&#125; is absent or unread.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> IOException on a network error connecting to &#123;<span class=\"doctag\">@link</span> Request#url()&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\">Response <span class=\"title\">execute</span><span class=\"params\">(Request request, Options options)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认使用的是Client.Default，通过源码可以看到默认是使用HttpURLConnection来请求http的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Default</span> <span class=\"keyword\">implements</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">execute</span><span class=\"params\">(Request request, Options options)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">      HttpURLConnection connection = convertAndSend(request, options);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> convertResponse(connection, request);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feign对HttpClient和OkHttp的支持。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApacheHttpClient</span> <span class=\"keyword\">implements</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApacheHttpClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(HttpClientBuilder.create().build());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">execute</span><span class=\"params\">(Request request, Request.Options options)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    HttpUriRequest httpUriRequest;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      httpUriRequest = toHttpUriRequest(request, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (URISyntaxException e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"URL '\"</span> + request.url() + <span class=\"string\">\"' couldn't be parsed into a URI\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    HttpResponse httpResponse = client.execute(httpUriRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toFeignResponse(httpResponse, request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OkHttpClient</span> <span class=\"keyword\">implements</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> okhttp3.OkHttpClient delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OkHttpClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"keyword\">new</span> okhttp3.OkHttpClient());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OkHttpClient</span><span class=\"params\">(okhttp3.OkHttpClient delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = delegate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> feign.<span class=\"function\">Response <span class=\"title\">execute</span><span class=\"params\">(feign.Request input, feign.Request.Options options)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    okhttp3.OkHttpClient requestScoped;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.connectTimeoutMillis() != options.connectTimeoutMillis()</span><br><span class=\"line\">        || delegate.readTimeoutMillis() != options.readTimeoutMillis()</span><br><span class=\"line\">        || delegate.followRedirects() != options.isFollowRedirects()) &#123;</span><br><span class=\"line\">      requestScoped = delegate.newBuilder()</span><br><span class=\"line\">          .connectTimeout(options.connectTimeoutMillis(), TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .readTimeout(options.readTimeoutMillis(), TimeUnit.MILLISECONDS)</span><br><span class=\"line\">          .followRedirects(options.isFollowRedirects())</span><br><span class=\"line\">          .build();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      requestScoped = delegate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Request request = toOkHttpRequest(input);</span><br><span class=\"line\">    Response response = requestScoped.newCall(request).execute();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toFeignResponse(response, input).toBuilder().request(input).build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>Target比较没什么存在感，但是却关系到最后的Request生成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Target</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate input)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认使用<code>feign.Target.HardCodedTarget</code>，用于将baseuri和请求的path进行拼接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HardCodedTarget</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Target</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate input)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (input.url().indexOf(<span class=\"string\">\"http\"</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        input.target(url());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> input.request();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在feign源码中，还有另外一个实现类<code>LoadBalancingTarget</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadBalancingTarget</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Target</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate input)</span> </span>&#123;</span><br><span class=\"line\">    Server currentServer = lb.chooseServer(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    String url = format(<span class=\"string\">\"%s://%s%s\"</span>, scheme, currentServer.getHostPort(), path);</span><br><span class=\"line\">    input.target(url);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> input.request();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      lb.getLoadBalancerStats().incrementNumRequests(currentServer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Capability\"><a href=\"#Capability\" class=\"headerlink\" title=\"Capability\"></a>Capability</h3><p>在feign客户端构建过程中，对以上组件都可以进行能力加强</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Feign <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Capability 能力加强</span></span><br><span class=\"line\">    Client client = Capability.enrich(<span class=\"keyword\">this</span>.client, capabilities);</span><br><span class=\"line\">    Retryer retryer = Capability.enrich(<span class=\"keyword\">this</span>.retryer, capabilities);</span><br><span class=\"line\">    List&lt;RequestInterceptor&gt; requestInterceptors = <span class=\"keyword\">this</span>.requestInterceptors.stream()</span><br><span class=\"line\">        .map(ri -&gt; Capability.enrich(ri, capabilities))</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">    Logger logger = Capability.enrich(<span class=\"keyword\">this</span>.logger, capabilities);</span><br><span class=\"line\">    Contract contract = Capability.enrich(<span class=\"keyword\">this</span>.contract, capabilities);</span><br><span class=\"line\">    Options options = Capability.enrich(<span class=\"keyword\">this</span>.options, capabilities);</span><br><span class=\"line\">    Encoder encoder = Capability.enrich(<span class=\"keyword\">this</span>.encoder, capabilities);</span><br><span class=\"line\">    Decoder decoder = Capability.enrich(<span class=\"keyword\">this</span>.decoder, capabilities);</span><br><span class=\"line\">    InvocationHandlerFactory invocationHandlerFactory =</span><br><span class=\"line\">        Capability.enrich(<span class=\"keyword\">this</span>.invocationHandlerFactory, capabilities);</span><br><span class=\"line\">    QueryMapEncoder queryMapEncoder = Capability.enrich(<span class=\"keyword\">this</span>.queryMapEncoder, capabilities);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;E&gt; <span class=\"function\">E <span class=\"title\">enrich</span><span class=\"params\">(E componentToEnrich, List&lt;Capability&gt; capabilities)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> capabilities.stream()</span><br><span class=\"line\">      .reduce(</span><br><span class=\"line\">          componentToEnrich,</span><br><span class=\"line\">          (component, capability) -&gt; invoke(component, capability),</span><br><span class=\"line\">          (component, enrichedComponent) -&gt; enrichedComponent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;E&gt; <span class=\"function\">E <span class=\"title\">invoke</span><span class=\"params\">(E target, Capability capability)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Arrays.stream(capability.getClass().getMethods())</span><br><span class=\"line\">    \t<span class=\"comment\">//找到方法名为\"enrich\"，并且返回类型相等的方法.</span></span><br><span class=\"line\">      .filter(method -&gt; method.getName().equals(<span class=\"string\">\"enrich\"</span>))</span><br><span class=\"line\">      .filter(method -&gt; method.getReturnType().isInstance(target))</span><br><span class=\"line\">      .findFirst()</span><br><span class=\"line\">      .map(method -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (E) method.invoke(capability, target);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | IllegalArgumentException</span><br><span class=\"line\">            | InvocationTargetException e) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to enrich \"</span> + target, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .orElse(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在feign源码中有这些实现类<code>HystrixCapability</code>,<code>Metrics4Capability</code>,<code>Metrics5Capability</code>,<code>MicrometerCapability</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixCapability</span> <span class=\"keyword\">implements</span> <span class=\"title\">Capability</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> SetterFactory setterFactory = <span class=\"keyword\">new</span> SetterFactory.Default();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Class, Object&gt; fallbacks = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Allows you to override hystrix properties such as thread pools and command keys.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> HystrixCapability <span class=\"title\">setterFactory</span><span class=\"params\">(SetterFactory setterFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setterFactory = setterFactory;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Contract <span class=\"title\">enrich</span><span class=\"params\">(Contract contract)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixDelegatingContract(contract);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> InvocationHandlerFactory <span class=\"title\">enrich</span><span class=\"params\">(InvocationHandlerFactory invocationHandlerFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (target, dispatch) -&gt; <span class=\"keyword\">new</span> HystrixInvocationHandler(target, dispatch, setterFactory,</span><br><span class=\"line\">        fallbacks.containsKey(target.type())</span><br><span class=\"line\">            ? <span class=\"keyword\">new</span> FallbackFactory.Default&lt;&gt;(fallbacks.get(target.type()))</span><br><span class=\"line\">            : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\">Capability <span class=\"title\">fallback</span><span class=\"params\">(Class&lt;E&gt; api, E fallback)</span> </span>&#123;</span><br><span class=\"line\">    fallbacks.put(api, fallback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Spring整合\"><a href=\"#Spring整合\" class=\"headerlink\" title=\"Spring整合\"></a>Spring整合</h2><p>在spring-cloud-openfeign-core下，提供了Spring和feign的整合.</p>\n<p>FeignClientFactoryBean：创建feign代理类</p>\n<p>SpringMvcContract：解析methodMetaData</p>\n<p>FeignClientsConfiguration：配置feign的一些组件</p>\n<p>FeignAutoConfiguration：配置httpclient</p>\n"},{"layout":"post","title":"推荐系统笔记","date":"2020-11-21T16:00:00.000Z","author":"Gary","header-img":"img/post-bg-unix-linux.jpg","_content":"\n## 1.架构示意图\n\n推荐系统的技术架构示意图\n![](https://raw.githubusercontent.com/guhailin/pic/master/20201120173305.png)\n\n推荐系统的数据部分主要负责“用户”“物品”“场景”的信息收集与处理。在得到原始的数据信息后，推荐系统的数据处理系统会将原始数据进一步加工，加工后的数据出口主要有三个：\n\n1. 生成推荐模型所需的样本数据，用于算法模型的训练和评估。\n2. 生成推荐模型服务所需的“特征”，用于推荐系统的线上推断。\n3. 生成系统监控、商业智能(Business Intelligence, BI)系统所需的统计型数据。\n\n推荐系统的模型部分是推荐系统的主题，一般由“召回层”“排序层”“补充策略与算法层”组成。\n\n* 召回层一般利用高效的召回规则、算法或简单的模型，快速从海量的候选集中召回用户可能感兴趣的物品。\n* 排序层利用排序模型对初筛的候选集进行精排序。\n* 补充策略与算法层，也被称为再排序层，可以在将推荐列表返回用户之前，为兼顾结果的多样性、流行度、新鲜度等指标，结合一些补充的策略和算法对推荐列表进行一定的调整，最终形成用户可见的推荐列表。\n\n在线环境进行模型服务之前，需要通过模型训练确定模型结构、结构中不同参数权重的具体数值，以及模型相关算法和策略中的参数取值。模型训练方法又可以根据模型训练环境的不同，分为“离线训练”和“在线训练”两部分，其中：离线训练的特点是可以利用全量样本的特征，使模型逼近全局最优点；在线更新则可以准实时地“消化”新的数据样本，更快地反映新的数据变化趋势，满足模型实时性的需求。\n\n为了评估模型的效果，方便模型的迭代优化，推荐系统的模型部分提供了“离线评估”和“线上A/B测试”等多种评估模块，用得出的线下和线上评估指标，指导下一步的模型迭代优化。\n\n## 2.召回层\n\n推荐系统的模型部分将推荐过程分为召回层和排序层的主要原因是基于工程上的考虑。在排序阶段，一般会使用复杂的模型，利用多特征进行精确排序，而在这一过程中，如果直接对百万量级的候选集进行逐一推断，则计算资源和延迟都是在线服务过程无法忍受的。因此加入召回过程，利用少量的特征和简单的模型或规则进行候选集的快速筛选，减少精准排序阶段的时间开销。\n\n在设计召回层时，计算速度和召回率其实是矛盾的两个指标，为提高计算速度，需要使用召回策略尽量简单；而为了提高召回率，要求召回策略能够尽量选出排序模型需要的候选集。这又要求召回策略不能过于简单，导致召回物品无法满足排序模型的要求。\n\n在权衡计算速度和召回率后，目前工业界主流的召回方法是采用多个简单策略叠加的“多路召回策略”。\n\n### 2.1多路召回策略\n\n所谓多路召回策略，就是指采用不同的策略、特征或简单模型，分别召回一部分候选集，然后把候选集混合在一起供后续排序模型使用的策略。\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20201120180426.png)\n\n每一路召回策略会拉回K个候选物品，对于不同的召回策略，K值可以选择不同的大小。这里的K是超参数，一般需要通过离线评估加线上A/B测试的方式确定合理的取值范围。\n\n### 2.2基于embedding的召回方法\n\n利用深度学习网络生成的Embedding作为召回层的方法。\n\n## 3.排序层\n\n在互联网永不停歇的增长需求的驱动下，推荐系统的发展可谓一日千里，从2010年之前千篇一律的协同过滤、逻辑回归、进化到因子分解机、梯度提升树，再到2015年之后深度学习推荐模型的百花齐放，各种模型架构层出不穷。推荐系统的主流模型经历了从单一模型到组合模型，从经典框架到深度学习的发展过程。\n\n**非深度学习模型**\n\n| 模型名称 | 基本原理                                                     | 特点                                                         | 局限性                                                       |\n| -------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 协同过滤 | 根据用户的行为历史生成用户-物品共现矩阵，利用用户相似性和物品相似性进行推荐 | 原理简单、直接，应用广泛                                     | 泛化能力差，处理稀疏矩阵的能力差，推荐结果的头部效应较明显   |\n| 矩阵分解 | 将协同过滤算法中的共现矩阵分解为用户矩阵和物品矩阵，利用用户隐向量和物品隐向量的内积进行排序并推荐 | 相交协同过滤，泛化能力有所加强，对稀疏矩阵的处理能力有所加强 | 除了用户历史行为数据，难以利用其它用户、物品特征及上下文特征 |\n| 逻辑回归 | 将推荐问题转换成类似CTR预估的二分类问题，将用户、物品、上下文等不同特征转换成特征向量，输入逻辑回归模型得到CTR，再按照预估CTR进行排序并推荐 | 能够融合多种类型的不同特征                                   | 模型不具备特征组合的能力，表达能力较差                       |\n| FM       | 在逻辑回归的基础上，在模型中加入二阶特征交叉部分，为每一位特征训练得到相应特征隐向量，通过隐向量间的内积运算得到交叉特征权重 | 相比逻辑回归，具备了二阶特征交叉能力，模型的表达能力增强     | 由于组合爆炸问题的限制，模型不易扩展到三阶特征交叉阶段       |\n| FFM      | 在FM模型的基础上，加入“特征域”的概念，使每个特征在不同域的特征交叉时采用不同的隐向量 | 相比FM，进一步加强了特征交叉的能力                           | 模型的训练开销达到了O(n^2)的量级，训练开销大。               |\n| GBDT+LR  | 利用GBDT进行“自动化”的特征组合，将原始特征向量转换成离散型特征向量，并输入逻辑回归模型，进行最终的CTR预估 | 特征模型化，使模型具备了更高阶特征组合的能力                 | GBDT无法进行完全并行的训练，更新所需的训练时间较长           |\n| LS-PLM   | 首选对样本进行“分片”，在每个“分片”内部构件逻辑回归模型，将每个样本的各“分片”概率与逻辑回归的得分进行加权平均，得到最终的预估值 | 模型结构类似三层神经网络，具备了较强的表达能力               | 模型结构相比深度学习模型仍比较简单，有进一步提高的空间       |\n\n**基于深度学习的模型**\n\n| 模型名称      | 基本原理                                                     | 特点                                                         | 局限性                                                       |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| AutoRec       | 基于自编码器，对用户或者物品进行编码，利用自编码器的泛化能力进行推荐 | 单隐层神经网络结构简单，可实现快速训练和部署                 | 表达能力较差                                                 |\n| Deep Crossing | 利用“Embedding层+多隐层+输出层”的经典深度学习框架，预完成特征的自动深度交叉 | 经典的深度学习推荐模型框架                                   | 利用全连接隐层进行特征交叉，针对性不强                       |\n| NeuralCF      | 将传统的矩阵分解中用户向量和物品向量的点击操作，换成由神经网络代替的互操作 | 表达能力加强版的矩阵分解模型                                 | 只使用了用户和物品的id特征，没有加入更多其他特征             |\n| PNN           | 针对不同特征域之间的交叉操作，定义”内积“”外积“等多积操作     | 在经典深度学习框架上模型提高了特征交叉能力                   | ”外积“操作进行近似化，一定程度上影响了其表达能力             |\n| Wide&Deep     | 利用Wide部分加强模型的”记忆能力“，利用Deep部分加强模型的”泛化能力“ | 开创了组合模型的构造方法，对深度学习推荐模型的后续发展产生重大影响 | Wide部分需要人工进行特征组合的筛选                           |\n| Dee&Cross     | 用Cross网络替代Wide&Deep模型中的Wide部分                     | 解决了Wide&Deep模型人工组合特征的问题                        | Cross网络的复杂度比较高                                      |\n| FNN           | 利用FM的参数来初始化深度神经网络的Embedding层参数            | 利用FM初始化参数，加快整个网络的收敛速度                     | 模型的主结构比较简单，没有针对性的特征交叉层                 |\n| DeepFM        | 在Wide&Deep模型的基础上，用FM替代原来的线性Wide部分          | 加强了Wide部分的特征交叉能力                                 | 与经典的Wide&Deep模型相比，结构差别不明显                    |\n| NFM           | 用神经网络替代FM中二隐向量交叉的操作                         | 相比FM，NFM的表达能力和特征交叉能力更强                      | 与PNN模型的结构非常相似                                      |\n| AFM           | 在FM的基础上，在二阶隐向量交叉的基础上对每个交叉结果加入了注意力得分，并使用注意力网络学习注意力得分 | 不同交叉特征的重要性不同                                     | 注意力网络的训练过程比较复杂                                 |\n| DIN           | 在传统深度学习推荐模型的基础上引入注意力机制，并利用用户行为历史物品和目标广告物品的相关性计算注意力得分 | 根据目标广告物品的不同，进行更有针对性的推荐                 | 并没有充分利用除”历史行为“以外的其他特征                     |\n| DIEN          | 将序列模型与深度学习推荐模型结合，使用序列模型模拟用户的兴趣进化过程 | 序列模型增强了系统对用于兴趣变迁的表达能力，使推荐系统开始考虑时间相关的行为序列中包含的有价值信息 | 序列模型的训练复杂，线上服务的延迟较长，需要进行工程上的优化 |\n| DRN           | 将强化学习的思路应用于推荐系统，进行推荐模型的线上实时学习和更新 | 模型对数据实时性的利用能力大大加强                           | 线上部分较复杂，工程实现难度较大                             |\n\n\n\n## 4.特征\n\n### 4.1用户行为数据\n\n用户行为数据是推荐系统最常用，也是最关键的数据。一般分为显性反馈行为（explicit feedback）和隐性反馈行为（implicit feedback）两种。\n\n| 业务场景     | 显性反馈行为             | 隐性反馈行为             |\n| ------------ | ------------------------ | ------------------------ |\n| 电子商务网站 | 对商品的评分             | 点击、加入购物车、购买等 |\n| 视频网站     | 对视频的评分、点赞等     | 点击、播放、播放时长等   |\n| 新闻类网站   | 赞、踩等行为             | 点击、评论等             |\n| 音乐网站     | 对歌曲、歌手、专辑的评分 | 点击、播放、收藏等       |\n\n在当前的推荐系统特征工程中，隐性反馈行为越来越重要，主要原因是显性反馈行为的难度过大，数据量小。在深度学习模型对数据量的要求越来越大背景下，仅用显性反馈的数据不足以支持推荐系统训练过程的最终收敛。因此，能够反映用户行为特点的隐性反馈是目前特征挖掘的重点。\n\n\n### 4.2上下文信息\n\n上下文包括用户访问推荐系统的时间、地点、心情等，对于提高推荐系统是非常重要的。比如，一个卖衣服的推荐系统在冬天和夏天应该给用户推荐不同种类的衣服，用户上班时和下班后的兴趣会有区别。\n\n#### 4.2.1时间\n\n时间是一种重要的上下文信息，对用户兴趣有着深入而广泛的影响。一般认为，时间信息对用户兴趣的影响表现在以下几个方面。\n\n* 用户兴趣是变化的。一位程序员随着工作时间的增加，逐渐从阅读入门书籍过渡到阅读专业书籍。\n* 物品也是有生命周期的。比如新闻的生命周期很短暂，而电影的生命周期相对较长。\n* 季节效应。\n\n#### 4.2.2地点\n\n除了时间，地点作为一种重要的空间特征，也是一种重要的上下文信息。不同地区的用户兴趣有所不同，用户到了不同的地方，兴趣也会有所不同。\n\n## 5.冷启动\n\n冷启动问题主要分3类：\n\n* 用户冷启动。当心用户到来时，我们没有他的行为数据，所以也无法根据他的历史行为预测其兴趣，从而无法借此给他做个性化推荐。\n* 物品冷启动。物品冷启动主要解决如何将新的物品推荐给可能对它感兴趣的用户这一问题。\n* 系统冷启动。系统冷启动主要解决如何在一个新的开发的网站上设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务这一问题。\n\n解决方案：\n\n* 提供非个性化的推荐。非个性化推荐的最简单例子就是热门排行榜，我们可以给用户推荐热门排行榜，然后等到用户数据收集到一定的时候，再切换为个性化推荐。\n* 利用用户注册时提供的年龄、性别等数据做粗粒度的个性化。\n* 利用用户的社交网络账号登录，导入用户在社交网络上的好友信息，然后给用户推荐其好友喜欢的物品。\n* 要求用户在登录时对一些物品进行反馈，收集用户对这些物品的兴趣信息，然后给用户推荐那些和这些用户相似的物品。\n* 对于新加入的物品，可以利用内容信息，将它们推荐给喜欢过和它们相似的物品和用户。\n* 在系统冷启动时，可以引入专家的知识，通过一定的高效方式迅速建立起物品的相关度表。\n* 利用主动学习、迁移学习和“探索与利用”机制。\n\n## 6.实时性\n\n**推荐系统特征的实时性**指的是“实时”地收集和更新推荐模型的输入特征，使推荐系统总能使用最新的特征进行预测和推荐。\n\n举例来说，在一个短视频应用中，某用户完整地看完了一个长度为10分钟的“羽毛球教学”视频。毫无疑问，某用户对“羽毛球”这个主题是感兴趣的。系统希望立刻为用户继续推荐“羽毛球”相关视频。但是由于系统特征的实时性不强，用户的观看历史无法实时反馈给推荐系统，导致推荐系统得知该用户看过“羽毛球教学”这个视频已经是半个小时之后了，因此用户已经离开该应用，无法继续推荐。这就是一个因推荐实时性差异导致推荐失败的例子。\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20201122224508.png)\n\n\n\n与特征的实时性相比，**推荐系统模型的实时性**往往是从更全局的角度考虑问题。特征的实时性力图用更准确的特征描述用户、物品和相关场景，从而让推荐系统给出更符合当时场景的推荐结果。而模型的实时性则是希望抓住全局层面的新数据模式，发现新的趋势和相关性。\n\n模型的实时性是与模型的训练方式紧密相关的，由弱到强的训练方式分别是全量更新、增量更新、在线学习和局部更新。\n\n**全量更新**是指模型利用某时间段内的所有训练样本进行训练，往往时间较长，因此是实时性最差的。\n\n**增量更新**仅将新加入的样本“喂”给模型进行增量训练。深度学习往往采用梯度下降法及其变种进行学习，模型对增量样本的学习相当于在原有的样本基础上继续输入增量样本进行梯度下降。缺点是，增量更新的模型往往无法找到全局最优点，因此在实际使用中，往往采用增量和全局相结合的方式。在进行了几轮增量更新后，在业务量较少的时间窗口进行全局更新。\n\n**在线学习**是在获得一个新的样本的同时更新模型，需要在线上环境进行模型的训练和大量模型相关参数的更新和存储，工程上的要求相对比较高。另一个方法是将强化学习与推荐系统结合。\n\n**局部更新**是对模型的局部进行更新，较多应用在“Embedding层+神经网络”的模型中。Embedding层参数由于占据了深度学习模型参数的大部分，其训练过程会拖慢模型整体的收敛速度，因此业务往往采用Embedding层单独预训练，Embedding层以上的模型部分高频更新的混合策略。\n\n## 7.离线评估\n\n**精确率和召回率**\n令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么推荐结果的召回率定义为：\n\n![](https://latex.codecogs.com/svg.latex?Recall=\\frac{\\sum_{}^{u\\in%20%20U}%20|R(u)%20\\cap%20%20T(u)|}{%20%20\\sum_{}^{u\\in%20%20U}%20|T(u)|%20})\n\n推荐结果的精确率定义为：\n\n![](https://latex.codecogs.com/svg.latex?Precision=\\frac{\\sum_{}^{u\\in%20%20U}%20|R(u)%20\\cap%20%20T(u)|}{%20%20\\sum_{}^{u\\in%20%20U}%20|R(u)|%20})\n\n**F1**\n\n为了综合地反应Precision和recall的结果，可以使用F1-score，F1-score是精确率和召回率的调和平均值：\n\n![](https://latex.codecogs.com/svg.latex?F1=\\frac{2%20*%20Precision%20*%20Recall}{%20Precision%20+%20Recall})\n\n\n\n**覆盖率**\n\n覆盖率是描述一个推荐系统对物品长尾的发掘能力。覆盖率有不同的定义方法，最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例。假设系统的用户集合为U，推荐系统给每个用户推荐一个长度为N的物品列表R(u)。那么推荐系统的覆盖率可以通过下面的公式计算：\n\n![](https://latex.codecogs.com/svg.latex?Coverage%20=\\frac{|U_{u%20\\in%20U}%20R(u)|}{|I|%20})\n\n\n\n此外，还有PR曲线，ROC曲线，多样性，新颖性等评估指标。\n\n\n\n## 8.工程实现\n\n从工程的角度看推荐系统，可以将其分为两大部分：数据部分和模型部分。数据部分主要指推荐系统所需数据流的先关工程实现；模型部分指的是推荐模型的相关工程实现。根据推荐系统的整体工程架构，可以分为三个部分：\n\n* 推荐系统的数据流。主要是一些大数据流计算架构，有批处理、流计算、Lambda，Kappa4种架构。\n* 深度学习推荐模型的离线训练。有Spark MLlib，Parameter Server，TensorFlow，PyTorch等。\n* 深度学习推荐模型的上线部署\n\n## 9.参考\n\n* 王喆. 《深度学习推荐系统》.电子工业出版社.2020.3\n* 项亮.《推荐系统实践》.人民邮电出版社.2012.6\n\n\n","source":"_posts/2020-11-22-推荐系统笔记.md","raw":"---\nlayout:     post\ntitle:      \"推荐系统笔记\"\ndate:       2020-11-22\nauthor:     \"Gary\"\nheader-img: \"img/post-bg-unix-linux.jpg\"\ntags:\n---\n\n## 1.架构示意图\n\n推荐系统的技术架构示意图\n![](https://raw.githubusercontent.com/guhailin/pic/master/20201120173305.png)\n\n推荐系统的数据部分主要负责“用户”“物品”“场景”的信息收集与处理。在得到原始的数据信息后，推荐系统的数据处理系统会将原始数据进一步加工，加工后的数据出口主要有三个：\n\n1. 生成推荐模型所需的样本数据，用于算法模型的训练和评估。\n2. 生成推荐模型服务所需的“特征”，用于推荐系统的线上推断。\n3. 生成系统监控、商业智能(Business Intelligence, BI)系统所需的统计型数据。\n\n推荐系统的模型部分是推荐系统的主题，一般由“召回层”“排序层”“补充策略与算法层”组成。\n\n* 召回层一般利用高效的召回规则、算法或简单的模型，快速从海量的候选集中召回用户可能感兴趣的物品。\n* 排序层利用排序模型对初筛的候选集进行精排序。\n* 补充策略与算法层，也被称为再排序层，可以在将推荐列表返回用户之前，为兼顾结果的多样性、流行度、新鲜度等指标，结合一些补充的策略和算法对推荐列表进行一定的调整，最终形成用户可见的推荐列表。\n\n在线环境进行模型服务之前，需要通过模型训练确定模型结构、结构中不同参数权重的具体数值，以及模型相关算法和策略中的参数取值。模型训练方法又可以根据模型训练环境的不同，分为“离线训练”和“在线训练”两部分，其中：离线训练的特点是可以利用全量样本的特征，使模型逼近全局最优点；在线更新则可以准实时地“消化”新的数据样本，更快地反映新的数据变化趋势，满足模型实时性的需求。\n\n为了评估模型的效果，方便模型的迭代优化，推荐系统的模型部分提供了“离线评估”和“线上A/B测试”等多种评估模块，用得出的线下和线上评估指标，指导下一步的模型迭代优化。\n\n## 2.召回层\n\n推荐系统的模型部分将推荐过程分为召回层和排序层的主要原因是基于工程上的考虑。在排序阶段，一般会使用复杂的模型，利用多特征进行精确排序，而在这一过程中，如果直接对百万量级的候选集进行逐一推断，则计算资源和延迟都是在线服务过程无法忍受的。因此加入召回过程，利用少量的特征和简单的模型或规则进行候选集的快速筛选，减少精准排序阶段的时间开销。\n\n在设计召回层时，计算速度和召回率其实是矛盾的两个指标，为提高计算速度，需要使用召回策略尽量简单；而为了提高召回率，要求召回策略能够尽量选出排序模型需要的候选集。这又要求召回策略不能过于简单，导致召回物品无法满足排序模型的要求。\n\n在权衡计算速度和召回率后，目前工业界主流的召回方法是采用多个简单策略叠加的“多路召回策略”。\n\n### 2.1多路召回策略\n\n所谓多路召回策略，就是指采用不同的策略、特征或简单模型，分别召回一部分候选集，然后把候选集混合在一起供后续排序模型使用的策略。\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20201120180426.png)\n\n每一路召回策略会拉回K个候选物品，对于不同的召回策略，K值可以选择不同的大小。这里的K是超参数，一般需要通过离线评估加线上A/B测试的方式确定合理的取值范围。\n\n### 2.2基于embedding的召回方法\n\n利用深度学习网络生成的Embedding作为召回层的方法。\n\n## 3.排序层\n\n在互联网永不停歇的增长需求的驱动下，推荐系统的发展可谓一日千里，从2010年之前千篇一律的协同过滤、逻辑回归、进化到因子分解机、梯度提升树，再到2015年之后深度学习推荐模型的百花齐放，各种模型架构层出不穷。推荐系统的主流模型经历了从单一模型到组合模型，从经典框架到深度学习的发展过程。\n\n**非深度学习模型**\n\n| 模型名称 | 基本原理                                                     | 特点                                                         | 局限性                                                       |\n| -------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 协同过滤 | 根据用户的行为历史生成用户-物品共现矩阵，利用用户相似性和物品相似性进行推荐 | 原理简单、直接，应用广泛                                     | 泛化能力差，处理稀疏矩阵的能力差，推荐结果的头部效应较明显   |\n| 矩阵分解 | 将协同过滤算法中的共现矩阵分解为用户矩阵和物品矩阵，利用用户隐向量和物品隐向量的内积进行排序并推荐 | 相交协同过滤，泛化能力有所加强，对稀疏矩阵的处理能力有所加强 | 除了用户历史行为数据，难以利用其它用户、物品特征及上下文特征 |\n| 逻辑回归 | 将推荐问题转换成类似CTR预估的二分类问题，将用户、物品、上下文等不同特征转换成特征向量，输入逻辑回归模型得到CTR，再按照预估CTR进行排序并推荐 | 能够融合多种类型的不同特征                                   | 模型不具备特征组合的能力，表达能力较差                       |\n| FM       | 在逻辑回归的基础上，在模型中加入二阶特征交叉部分，为每一位特征训练得到相应特征隐向量，通过隐向量间的内积运算得到交叉特征权重 | 相比逻辑回归，具备了二阶特征交叉能力，模型的表达能力增强     | 由于组合爆炸问题的限制，模型不易扩展到三阶特征交叉阶段       |\n| FFM      | 在FM模型的基础上，加入“特征域”的概念，使每个特征在不同域的特征交叉时采用不同的隐向量 | 相比FM，进一步加强了特征交叉的能力                           | 模型的训练开销达到了O(n^2)的量级，训练开销大。               |\n| GBDT+LR  | 利用GBDT进行“自动化”的特征组合，将原始特征向量转换成离散型特征向量，并输入逻辑回归模型，进行最终的CTR预估 | 特征模型化，使模型具备了更高阶特征组合的能力                 | GBDT无法进行完全并行的训练，更新所需的训练时间较长           |\n| LS-PLM   | 首选对样本进行“分片”，在每个“分片”内部构件逻辑回归模型，将每个样本的各“分片”概率与逻辑回归的得分进行加权平均，得到最终的预估值 | 模型结构类似三层神经网络，具备了较强的表达能力               | 模型结构相比深度学习模型仍比较简单，有进一步提高的空间       |\n\n**基于深度学习的模型**\n\n| 模型名称      | 基本原理                                                     | 特点                                                         | 局限性                                                       |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| AutoRec       | 基于自编码器，对用户或者物品进行编码，利用自编码器的泛化能力进行推荐 | 单隐层神经网络结构简单，可实现快速训练和部署                 | 表达能力较差                                                 |\n| Deep Crossing | 利用“Embedding层+多隐层+输出层”的经典深度学习框架，预完成特征的自动深度交叉 | 经典的深度学习推荐模型框架                                   | 利用全连接隐层进行特征交叉，针对性不强                       |\n| NeuralCF      | 将传统的矩阵分解中用户向量和物品向量的点击操作，换成由神经网络代替的互操作 | 表达能力加强版的矩阵分解模型                                 | 只使用了用户和物品的id特征，没有加入更多其他特征             |\n| PNN           | 针对不同特征域之间的交叉操作，定义”内积“”外积“等多积操作     | 在经典深度学习框架上模型提高了特征交叉能力                   | ”外积“操作进行近似化，一定程度上影响了其表达能力             |\n| Wide&Deep     | 利用Wide部分加强模型的”记忆能力“，利用Deep部分加强模型的”泛化能力“ | 开创了组合模型的构造方法，对深度学习推荐模型的后续发展产生重大影响 | Wide部分需要人工进行特征组合的筛选                           |\n| Dee&Cross     | 用Cross网络替代Wide&Deep模型中的Wide部分                     | 解决了Wide&Deep模型人工组合特征的问题                        | Cross网络的复杂度比较高                                      |\n| FNN           | 利用FM的参数来初始化深度神经网络的Embedding层参数            | 利用FM初始化参数，加快整个网络的收敛速度                     | 模型的主结构比较简单，没有针对性的特征交叉层                 |\n| DeepFM        | 在Wide&Deep模型的基础上，用FM替代原来的线性Wide部分          | 加强了Wide部分的特征交叉能力                                 | 与经典的Wide&Deep模型相比，结构差别不明显                    |\n| NFM           | 用神经网络替代FM中二隐向量交叉的操作                         | 相比FM，NFM的表达能力和特征交叉能力更强                      | 与PNN模型的结构非常相似                                      |\n| AFM           | 在FM的基础上，在二阶隐向量交叉的基础上对每个交叉结果加入了注意力得分，并使用注意力网络学习注意力得分 | 不同交叉特征的重要性不同                                     | 注意力网络的训练过程比较复杂                                 |\n| DIN           | 在传统深度学习推荐模型的基础上引入注意力机制，并利用用户行为历史物品和目标广告物品的相关性计算注意力得分 | 根据目标广告物品的不同，进行更有针对性的推荐                 | 并没有充分利用除”历史行为“以外的其他特征                     |\n| DIEN          | 将序列模型与深度学习推荐模型结合，使用序列模型模拟用户的兴趣进化过程 | 序列模型增强了系统对用于兴趣变迁的表达能力，使推荐系统开始考虑时间相关的行为序列中包含的有价值信息 | 序列模型的训练复杂，线上服务的延迟较长，需要进行工程上的优化 |\n| DRN           | 将强化学习的思路应用于推荐系统，进行推荐模型的线上实时学习和更新 | 模型对数据实时性的利用能力大大加强                           | 线上部分较复杂，工程实现难度较大                             |\n\n\n\n## 4.特征\n\n### 4.1用户行为数据\n\n用户行为数据是推荐系统最常用，也是最关键的数据。一般分为显性反馈行为（explicit feedback）和隐性反馈行为（implicit feedback）两种。\n\n| 业务场景     | 显性反馈行为             | 隐性反馈行为             |\n| ------------ | ------------------------ | ------------------------ |\n| 电子商务网站 | 对商品的评分             | 点击、加入购物车、购买等 |\n| 视频网站     | 对视频的评分、点赞等     | 点击、播放、播放时长等   |\n| 新闻类网站   | 赞、踩等行为             | 点击、评论等             |\n| 音乐网站     | 对歌曲、歌手、专辑的评分 | 点击、播放、收藏等       |\n\n在当前的推荐系统特征工程中，隐性反馈行为越来越重要，主要原因是显性反馈行为的难度过大，数据量小。在深度学习模型对数据量的要求越来越大背景下，仅用显性反馈的数据不足以支持推荐系统训练过程的最终收敛。因此，能够反映用户行为特点的隐性反馈是目前特征挖掘的重点。\n\n\n### 4.2上下文信息\n\n上下文包括用户访问推荐系统的时间、地点、心情等，对于提高推荐系统是非常重要的。比如，一个卖衣服的推荐系统在冬天和夏天应该给用户推荐不同种类的衣服，用户上班时和下班后的兴趣会有区别。\n\n#### 4.2.1时间\n\n时间是一种重要的上下文信息，对用户兴趣有着深入而广泛的影响。一般认为，时间信息对用户兴趣的影响表现在以下几个方面。\n\n* 用户兴趣是变化的。一位程序员随着工作时间的增加，逐渐从阅读入门书籍过渡到阅读专业书籍。\n* 物品也是有生命周期的。比如新闻的生命周期很短暂，而电影的生命周期相对较长。\n* 季节效应。\n\n#### 4.2.2地点\n\n除了时间，地点作为一种重要的空间特征，也是一种重要的上下文信息。不同地区的用户兴趣有所不同，用户到了不同的地方，兴趣也会有所不同。\n\n## 5.冷启动\n\n冷启动问题主要分3类：\n\n* 用户冷启动。当心用户到来时，我们没有他的行为数据，所以也无法根据他的历史行为预测其兴趣，从而无法借此给他做个性化推荐。\n* 物品冷启动。物品冷启动主要解决如何将新的物品推荐给可能对它感兴趣的用户这一问题。\n* 系统冷启动。系统冷启动主要解决如何在一个新的开发的网站上设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务这一问题。\n\n解决方案：\n\n* 提供非个性化的推荐。非个性化推荐的最简单例子就是热门排行榜，我们可以给用户推荐热门排行榜，然后等到用户数据收集到一定的时候，再切换为个性化推荐。\n* 利用用户注册时提供的年龄、性别等数据做粗粒度的个性化。\n* 利用用户的社交网络账号登录，导入用户在社交网络上的好友信息，然后给用户推荐其好友喜欢的物品。\n* 要求用户在登录时对一些物品进行反馈，收集用户对这些物品的兴趣信息，然后给用户推荐那些和这些用户相似的物品。\n* 对于新加入的物品，可以利用内容信息，将它们推荐给喜欢过和它们相似的物品和用户。\n* 在系统冷启动时，可以引入专家的知识，通过一定的高效方式迅速建立起物品的相关度表。\n* 利用主动学习、迁移学习和“探索与利用”机制。\n\n## 6.实时性\n\n**推荐系统特征的实时性**指的是“实时”地收集和更新推荐模型的输入特征，使推荐系统总能使用最新的特征进行预测和推荐。\n\n举例来说，在一个短视频应用中，某用户完整地看完了一个长度为10分钟的“羽毛球教学”视频。毫无疑问，某用户对“羽毛球”这个主题是感兴趣的。系统希望立刻为用户继续推荐“羽毛球”相关视频。但是由于系统特征的实时性不强，用户的观看历史无法实时反馈给推荐系统，导致推荐系统得知该用户看过“羽毛球教学”这个视频已经是半个小时之后了，因此用户已经离开该应用，无法继续推荐。这就是一个因推荐实时性差异导致推荐失败的例子。\n\n![](https://raw.githubusercontent.com/guhailin/pic/master/20201122224508.png)\n\n\n\n与特征的实时性相比，**推荐系统模型的实时性**往往是从更全局的角度考虑问题。特征的实时性力图用更准确的特征描述用户、物品和相关场景，从而让推荐系统给出更符合当时场景的推荐结果。而模型的实时性则是希望抓住全局层面的新数据模式，发现新的趋势和相关性。\n\n模型的实时性是与模型的训练方式紧密相关的，由弱到强的训练方式分别是全量更新、增量更新、在线学习和局部更新。\n\n**全量更新**是指模型利用某时间段内的所有训练样本进行训练，往往时间较长，因此是实时性最差的。\n\n**增量更新**仅将新加入的样本“喂”给模型进行增量训练。深度学习往往采用梯度下降法及其变种进行学习，模型对增量样本的学习相当于在原有的样本基础上继续输入增量样本进行梯度下降。缺点是，增量更新的模型往往无法找到全局最优点，因此在实际使用中，往往采用增量和全局相结合的方式。在进行了几轮增量更新后，在业务量较少的时间窗口进行全局更新。\n\n**在线学习**是在获得一个新的样本的同时更新模型，需要在线上环境进行模型的训练和大量模型相关参数的更新和存储，工程上的要求相对比较高。另一个方法是将强化学习与推荐系统结合。\n\n**局部更新**是对模型的局部进行更新，较多应用在“Embedding层+神经网络”的模型中。Embedding层参数由于占据了深度学习模型参数的大部分，其训练过程会拖慢模型整体的收敛速度，因此业务往往采用Embedding层单独预训练，Embedding层以上的模型部分高频更新的混合策略。\n\n## 7.离线评估\n\n**精确率和召回率**\n令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么推荐结果的召回率定义为：\n\n![](https://latex.codecogs.com/svg.latex?Recall=\\frac{\\sum_{}^{u\\in%20%20U}%20|R(u)%20\\cap%20%20T(u)|}{%20%20\\sum_{}^{u\\in%20%20U}%20|T(u)|%20})\n\n推荐结果的精确率定义为：\n\n![](https://latex.codecogs.com/svg.latex?Precision=\\frac{\\sum_{}^{u\\in%20%20U}%20|R(u)%20\\cap%20%20T(u)|}{%20%20\\sum_{}^{u\\in%20%20U}%20|R(u)|%20})\n\n**F1**\n\n为了综合地反应Precision和recall的结果，可以使用F1-score，F1-score是精确率和召回率的调和平均值：\n\n![](https://latex.codecogs.com/svg.latex?F1=\\frac{2%20*%20Precision%20*%20Recall}{%20Precision%20+%20Recall})\n\n\n\n**覆盖率**\n\n覆盖率是描述一个推荐系统对物品长尾的发掘能力。覆盖率有不同的定义方法，最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例。假设系统的用户集合为U，推荐系统给每个用户推荐一个长度为N的物品列表R(u)。那么推荐系统的覆盖率可以通过下面的公式计算：\n\n![](https://latex.codecogs.com/svg.latex?Coverage%20=\\frac{|U_{u%20\\in%20U}%20R(u)|}{|I|%20})\n\n\n\n此外，还有PR曲线，ROC曲线，多样性，新颖性等评估指标。\n\n\n\n## 8.工程实现\n\n从工程的角度看推荐系统，可以将其分为两大部分：数据部分和模型部分。数据部分主要指推荐系统所需数据流的先关工程实现；模型部分指的是推荐模型的相关工程实现。根据推荐系统的整体工程架构，可以分为三个部分：\n\n* 推荐系统的数据流。主要是一些大数据流计算架构，有批处理、流计算、Lambda，Kappa4种架构。\n* 深度学习推荐模型的离线训练。有Spark MLlib，Parameter Server，TensorFlow，PyTorch等。\n* 深度学习推荐模型的上线部署\n\n## 9.参考\n\n* 王喆. 《深度学习推荐系统》.电子工业出版社.2020.3\n* 项亮.《推荐系统实践》.人民邮电出版社.2012.6\n\n\n","slug":"2020-11-22-推荐系统笔记","published":1,"updated":"2020-11-23T02:05:14.529Z","_id":"ckht8p2n80000i9ytfltib9ca","comments":1,"photos":[],"link":"","content":"<h2 id=\"1-架构示意图\"><a href=\"#1-架构示意图\" class=\"headerlink\" title=\"1.架构示意图\"></a>1.架构示意图</h2><p>推荐系统的技术架构示意图<br><img src= \"/img/loading.gif\" data-src=\"https://raw.githubusercontent.com/guhailin/pic/master/20201120173305.png\" alt=\"\"></p>\n<p>推荐系统的数据部分主要负责“用户”“物品”“场景”的信息收集与处理。在得到原始的数据信息后，推荐系统的数据处理系统会将原始数据进一步加工，加工后的数据出口主要有三个：</p>\n<ol>\n<li>生成推荐模型所需的样本数据，用于算法模型的训练和评估。</li>\n<li>生成推荐模型服务所需的“特征”，用于推荐系统的线上推断。</li>\n<li>生成系统监控、商业智能(Business Intelligence, BI)系统所需的统计型数据。</li>\n</ol>\n<p>推荐系统的模型部分是推荐系统的主题，一般由“召回层”“排序层”“补充策略与算法层”组成。</p>\n<ul>\n<li>召回层一般利用高效的召回规则、算法或简单的模型，快速从海量的候选集中召回用户可能感兴趣的物品。</li>\n<li>排序层利用排序模型对初筛的候选集进行精排序。</li>\n<li>补充策略与算法层，也被称为再排序层，可以在将推荐列表返回用户之前，为兼顾结果的多样性、流行度、新鲜度等指标，结合一些补充的策略和算法对推荐列表进行一定的调整，最终形成用户可见的推荐列表。</li>\n</ul>\n<p>在线环境进行模型服务之前，需要通过模型训练确定模型结构、结构中不同参数权重的具体数值，以及模型相关算法和策略中的参数取值。模型训练方法又可以根据模型训练环境的不同，分为“离线训练”和“在线训练”两部分，其中：离线训练的特点是可以利用全量样本的特征，使模型逼近全局最优点；在线更新则可以准实时地“消化”新的数据样本，更快地反映新的数据变化趋势，满足模型实时性的需求。</p>\n<p>为了评估模型的效果，方便模型的迭代优化，推荐系统的模型部分提供了“离线评估”和“线上A/B测试”等多种评估模块，用得出的线下和线上评估指标，指导下一步的模型迭代优化。</p>\n<h2 id=\"2-召回层\"><a href=\"#2-召回层\" class=\"headerlink\" title=\"2.召回层\"></a>2.召回层</h2><p>推荐系统的模型部分将推荐过程分为召回层和排序层的主要原因是基于工程上的考虑。在排序阶段，一般会使用复杂的模型，利用多特征进行精确排序，而在这一过程中，如果直接对百万量级的候选集进行逐一推断，则计算资源和延迟都是在线服务过程无法忍受的。因此加入召回过程，利用少量的特征和简单的模型或规则进行候选集的快速筛选，减少精准排序阶段的时间开销。</p>\n<p>在设计召回层时，计算速度和召回率其实是矛盾的两个指标，为提高计算速度，需要使用召回策略尽量简单；而为了提高召回率，要求召回策略能够尽量选出排序模型需要的候选集。这又要求召回策略不能过于简单，导致召回物品无法满足排序模型的要求。</p>\n<p>在权衡计算速度和召回率后，目前工业界主流的召回方法是采用多个简单策略叠加的“多路召回策略”。</p>\n<h3 id=\"2-1多路召回策略\"><a href=\"#2-1多路召回策略\" class=\"headerlink\" title=\"2.1多路召回策略\"></a>2.1多路召回策略</h3><p>所谓多路召回策略，就是指采用不同的策略、特征或简单模型，分别召回一部分候选集，然后把候选集混合在一起供后续排序模型使用的策略。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://raw.githubusercontent.com/guhailin/pic/master/20201120180426.png\" alt=\"\"></p>\n<p>每一路召回策略会拉回K个候选物品，对于不同的召回策略，K值可以选择不同的大小。这里的K是超参数，一般需要通过离线评估加线上A/B测试的方式确定合理的取值范围。</p>\n<h3 id=\"2-2基于embedding的召回方法\"><a href=\"#2-2基于embedding的召回方法\" class=\"headerlink\" title=\"2.2基于embedding的召回方法\"></a>2.2基于embedding的召回方法</h3><p>利用深度学习网络生成的Embedding作为召回层的方法。</p>\n<h2 id=\"3-排序层\"><a href=\"#3-排序层\" class=\"headerlink\" title=\"3.排序层\"></a>3.排序层</h2><p>在互联网永不停歇的增长需求的驱动下，推荐系统的发展可谓一日千里，从2010年之前千篇一律的协同过滤、逻辑回归、进化到因子分解机、梯度提升树，再到2015年之后深度学习推荐模型的百花齐放，各种模型架构层出不穷。推荐系统的主流模型经历了从单一模型到组合模型，从经典框架到深度学习的发展过程。</p>\n<p><strong>非深度学习模型</strong></p>\n<table>\n<thead>\n<tr>\n<th>模型名称</th>\n<th>基本原理</th>\n<th>特点</th>\n<th>局限性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>协同过滤</td>\n<td>根据用户的行为历史生成用户-物品共现矩阵，利用用户相似性和物品相似性进行推荐</td>\n<td>原理简单、直接，应用广泛</td>\n<td>泛化能力差，处理稀疏矩阵的能力差，推荐结果的头部效应较明显</td>\n</tr>\n<tr>\n<td>矩阵分解</td>\n<td>将协同过滤算法中的共现矩阵分解为用户矩阵和物品矩阵，利用用户隐向量和物品隐向量的内积进行排序并推荐</td>\n<td>相交协同过滤，泛化能力有所加强，对稀疏矩阵的处理能力有所加强</td>\n<td>除了用户历史行为数据，难以利用其它用户、物品特征及上下文特征</td>\n</tr>\n<tr>\n<td>逻辑回归</td>\n<td>将推荐问题转换成类似CTR预估的二分类问题，将用户、物品、上下文等不同特征转换成特征向量，输入逻辑回归模型得到CTR，再按照预估CTR进行排序并推荐</td>\n<td>能够融合多种类型的不同特征</td>\n<td>模型不具备特征组合的能力，表达能力较差</td>\n</tr>\n<tr>\n<td>FM</td>\n<td>在逻辑回归的基础上，在模型中加入二阶特征交叉部分，为每一位特征训练得到相应特征隐向量，通过隐向量间的内积运算得到交叉特征权重</td>\n<td>相比逻辑回归，具备了二阶特征交叉能力，模型的表达能力增强</td>\n<td>由于组合爆炸问题的限制，模型不易扩展到三阶特征交叉阶段</td>\n</tr>\n<tr>\n<td>FFM</td>\n<td>在FM模型的基础上，加入“特征域”的概念，使每个特征在不同域的特征交叉时采用不同的隐向量</td>\n<td>相比FM，进一步加强了特征交叉的能力</td>\n<td>模型的训练开销达到了O(n^2)的量级，训练开销大。</td>\n</tr>\n<tr>\n<td>GBDT+LR</td>\n<td>利用GBDT进行“自动化”的特征组合，将原始特征向量转换成离散型特征向量，并输入逻辑回归模型，进行最终的CTR预估</td>\n<td>特征模型化，使模型具备了更高阶特征组合的能力</td>\n<td>GBDT无法进行完全并行的训练，更新所需的训练时间较长</td>\n</tr>\n<tr>\n<td>LS-PLM</td>\n<td>首选对样本进行“分片”，在每个“分片”内部构件逻辑回归模型，将每个样本的各“分片”概率与逻辑回归的得分进行加权平均，得到最终的预估值</td>\n<td>模型结构类似三层神经网络，具备了较强的表达能力</td>\n<td>模型结构相比深度学习模型仍比较简单，有进一步提高的空间</td>\n</tr>\n</tbody></table>\n<p><strong>基于深度学习的模型</strong></p>\n<table>\n<thead>\n<tr>\n<th>模型名称</th>\n<th>基本原理</th>\n<th>特点</th>\n<th>局限性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AutoRec</td>\n<td>基于自编码器，对用户或者物品进行编码，利用自编码器的泛化能力进行推荐</td>\n<td>单隐层神经网络结构简单，可实现快速训练和部署</td>\n<td>表达能力较差</td>\n</tr>\n<tr>\n<td>Deep Crossing</td>\n<td>利用“Embedding层+多隐层+输出层”的经典深度学习框架，预完成特征的自动深度交叉</td>\n<td>经典的深度学习推荐模型框架</td>\n<td>利用全连接隐层进行特征交叉，针对性不强</td>\n</tr>\n<tr>\n<td>NeuralCF</td>\n<td>将传统的矩阵分解中用户向量和物品向量的点击操作，换成由神经网络代替的互操作</td>\n<td>表达能力加强版的矩阵分解模型</td>\n<td>只使用了用户和物品的id特征，没有加入更多其他特征</td>\n</tr>\n<tr>\n<td>PNN</td>\n<td>针对不同特征域之间的交叉操作，定义”内积“”外积“等多积操作</td>\n<td>在经典深度学习框架上模型提高了特征交叉能力</td>\n<td>”外积“操作进行近似化，一定程度上影响了其表达能力</td>\n</tr>\n<tr>\n<td>Wide&amp;Deep</td>\n<td>利用Wide部分加强模型的”记忆能力“，利用Deep部分加强模型的”泛化能力“</td>\n<td>开创了组合模型的构造方法，对深度学习推荐模型的后续发展产生重大影响</td>\n<td>Wide部分需要人工进行特征组合的筛选</td>\n</tr>\n<tr>\n<td>Dee&amp;Cross</td>\n<td>用Cross网络替代Wide&amp;Deep模型中的Wide部分</td>\n<td>解决了Wide&amp;Deep模型人工组合特征的问题</td>\n<td>Cross网络的复杂度比较高</td>\n</tr>\n<tr>\n<td>FNN</td>\n<td>利用FM的参数来初始化深度神经网络的Embedding层参数</td>\n<td>利用FM初始化参数，加快整个网络的收敛速度</td>\n<td>模型的主结构比较简单，没有针对性的特征交叉层</td>\n</tr>\n<tr>\n<td>DeepFM</td>\n<td>在Wide&amp;Deep模型的基础上，用FM替代原来的线性Wide部分</td>\n<td>加强了Wide部分的特征交叉能力</td>\n<td>与经典的Wide&amp;Deep模型相比，结构差别不明显</td>\n</tr>\n<tr>\n<td>NFM</td>\n<td>用神经网络替代FM中二隐向量交叉的操作</td>\n<td>相比FM，NFM的表达能力和特征交叉能力更强</td>\n<td>与PNN模型的结构非常相似</td>\n</tr>\n<tr>\n<td>AFM</td>\n<td>在FM的基础上，在二阶隐向量交叉的基础上对每个交叉结果加入了注意力得分，并使用注意力网络学习注意力得分</td>\n<td>不同交叉特征的重要性不同</td>\n<td>注意力网络的训练过程比较复杂</td>\n</tr>\n<tr>\n<td>DIN</td>\n<td>在传统深度学习推荐模型的基础上引入注意力机制，并利用用户行为历史物品和目标广告物品的相关性计算注意力得分</td>\n<td>根据目标广告物品的不同，进行更有针对性的推荐</td>\n<td>并没有充分利用除”历史行为“以外的其他特征</td>\n</tr>\n<tr>\n<td>DIEN</td>\n<td>将序列模型与深度学习推荐模型结合，使用序列模型模拟用户的兴趣进化过程</td>\n<td>序列模型增强了系统对用于兴趣变迁的表达能力，使推荐系统开始考虑时间相关的行为序列中包含的有价值信息</td>\n<td>序列模型的训练复杂，线上服务的延迟较长，需要进行工程上的优化</td>\n</tr>\n<tr>\n<td>DRN</td>\n<td>将强化学习的思路应用于推荐系统，进行推荐模型的线上实时学习和更新</td>\n<td>模型对数据实时性的利用能力大大加强</td>\n<td>线上部分较复杂，工程实现难度较大</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-特征\"><a href=\"#4-特征\" class=\"headerlink\" title=\"4.特征\"></a>4.特征</h2><h3 id=\"4-1用户行为数据\"><a href=\"#4-1用户行为数据\" class=\"headerlink\" title=\"4.1用户行为数据\"></a>4.1用户行为数据</h3><p>用户行为数据是推荐系统最常用，也是最关键的数据。一般分为显性反馈行为（explicit feedback）和隐性反馈行为（implicit feedback）两种。</p>\n<table>\n<thead>\n<tr>\n<th>业务场景</th>\n<th>显性反馈行为</th>\n<th>隐性反馈行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>电子商务网站</td>\n<td>对商品的评分</td>\n<td>点击、加入购物车、购买等</td>\n</tr>\n<tr>\n<td>视频网站</td>\n<td>对视频的评分、点赞等</td>\n<td>点击、播放、播放时长等</td>\n</tr>\n<tr>\n<td>新闻类网站</td>\n<td>赞、踩等行为</td>\n<td>点击、评论等</td>\n</tr>\n<tr>\n<td>音乐网站</td>\n<td>对歌曲、歌手、专辑的评分</td>\n<td>点击、播放、收藏等</td>\n</tr>\n</tbody></table>\n<p>在当前的推荐系统特征工程中，隐性反馈行为越来越重要，主要原因是显性反馈行为的难度过大，数据量小。在深度学习模型对数据量的要求越来越大背景下，仅用显性反馈的数据不足以支持推荐系统训练过程的最终收敛。因此，能够反映用户行为特点的隐性反馈是目前特征挖掘的重点。</p>\n<h3 id=\"4-2上下文信息\"><a href=\"#4-2上下文信息\" class=\"headerlink\" title=\"4.2上下文信息\"></a>4.2上下文信息</h3><p>上下文包括用户访问推荐系统的时间、地点、心情等，对于提高推荐系统是非常重要的。比如，一个卖衣服的推荐系统在冬天和夏天应该给用户推荐不同种类的衣服，用户上班时和下班后的兴趣会有区别。</p>\n<h4 id=\"4-2-1时间\"><a href=\"#4-2-1时间\" class=\"headerlink\" title=\"4.2.1时间\"></a>4.2.1时间</h4><p>时间是一种重要的上下文信息，对用户兴趣有着深入而广泛的影响。一般认为，时间信息对用户兴趣的影响表现在以下几个方面。</p>\n<ul>\n<li>用户兴趣是变化的。一位程序员随着工作时间的增加，逐渐从阅读入门书籍过渡到阅读专业书籍。</li>\n<li>物品也是有生命周期的。比如新闻的生命周期很短暂，而电影的生命周期相对较长。</li>\n<li>季节效应。</li>\n</ul>\n<h4 id=\"4-2-2地点\"><a href=\"#4-2-2地点\" class=\"headerlink\" title=\"4.2.2地点\"></a>4.2.2地点</h4><p>除了时间，地点作为一种重要的空间特征，也是一种重要的上下文信息。不同地区的用户兴趣有所不同，用户到了不同的地方，兴趣也会有所不同。</p>\n<h2 id=\"5-冷启动\"><a href=\"#5-冷启动\" class=\"headerlink\" title=\"5.冷启动\"></a>5.冷启动</h2><p>冷启动问题主要分3类：</p>\n<ul>\n<li>用户冷启动。当心用户到来时，我们没有他的行为数据，所以也无法根据他的历史行为预测其兴趣，从而无法借此给他做个性化推荐。</li>\n<li>物品冷启动。物品冷启动主要解决如何将新的物品推荐给可能对它感兴趣的用户这一问题。</li>\n<li>系统冷启动。系统冷启动主要解决如何在一个新的开发的网站上设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务这一问题。</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>提供非个性化的推荐。非个性化推荐的最简单例子就是热门排行榜，我们可以给用户推荐热门排行榜，然后等到用户数据收集到一定的时候，再切换为个性化推荐。</li>\n<li>利用用户注册时提供的年龄、性别等数据做粗粒度的个性化。</li>\n<li>利用用户的社交网络账号登录，导入用户在社交网络上的好友信息，然后给用户推荐其好友喜欢的物品。</li>\n<li>要求用户在登录时对一些物品进行反馈，收集用户对这些物品的兴趣信息，然后给用户推荐那些和这些用户相似的物品。</li>\n<li>对于新加入的物品，可以利用内容信息，将它们推荐给喜欢过和它们相似的物品和用户。</li>\n<li>在系统冷启动时，可以引入专家的知识，通过一定的高效方式迅速建立起物品的相关度表。</li>\n<li>利用主动学习、迁移学习和“探索与利用”机制。</li>\n</ul>\n<h2 id=\"6-实时性\"><a href=\"#6-实时性\" class=\"headerlink\" title=\"6.实时性\"></a>6.实时性</h2><p><strong>推荐系统特征的实时性</strong>指的是“实时”地收集和更新推荐模型的输入特征，使推荐系统总能使用最新的特征进行预测和推荐。</p>\n<p>举例来说，在一个短视频应用中，某用户完整地看完了一个长度为10分钟的“羽毛球教学”视频。毫无疑问，某用户对“羽毛球”这个主题是感兴趣的。系统希望立刻为用户继续推荐“羽毛球”相关视频。但是由于系统特征的实时性不强，用户的观看历史无法实时反馈给推荐系统，导致推荐系统得知该用户看过“羽毛球教学”这个视频已经是半个小时之后了，因此用户已经离开该应用，无法继续推荐。这就是一个因推荐实时性差异导致推荐失败的例子。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://raw.githubusercontent.com/guhailin/pic/master/20201122224508.png\" alt=\"\"></p>\n<p>与特征的实时性相比，<strong>推荐系统模型的实时性</strong>往往是从更全局的角度考虑问题。特征的实时性力图用更准确的特征描述用户、物品和相关场景，从而让推荐系统给出更符合当时场景的推荐结果。而模型的实时性则是希望抓住全局层面的新数据模式，发现新的趋势和相关性。</p>\n<p>模型的实时性是与模型的训练方式紧密相关的，由弱到强的训练方式分别是全量更新、增量更新、在线学习和局部更新。</p>\n<p><strong>全量更新</strong>是指模型利用某时间段内的所有训练样本进行训练，往往时间较长，因此是实时性最差的。</p>\n<p><strong>增量更新</strong>仅将新加入的样本“喂”给模型进行增量训练。深度学习往往采用梯度下降法及其变种进行学习，模型对增量样本的学习相当于在原有的样本基础上继续输入增量样本进行梯度下降。缺点是，增量更新的模型往往无法找到全局最优点，因此在实际使用中，往往采用增量和全局相结合的方式。在进行了几轮增量更新后，在业务量较少的时间窗口进行全局更新。</p>\n<p><strong>在线学习</strong>是在获得一个新的样本的同时更新模型，需要在线上环境进行模型的训练和大量模型相关参数的更新和存储，工程上的要求相对比较高。另一个方法是将强化学习与推荐系统结合。</p>\n<p><strong>局部更新</strong>是对模型的局部进行更新，较多应用在“Embedding层+神经网络”的模型中。Embedding层参数由于占据了深度学习模型参数的大部分，其训练过程会拖慢模型整体的收敛速度，因此业务往往采用Embedding层单独预训练，Embedding层以上的模型部分高频更新的混合策略。</p>\n<h2 id=\"7-离线评估\"><a href=\"#7-离线评估\" class=\"headerlink\" title=\"7.离线评估\"></a>7.离线评估</h2><p><strong>精确率和召回率</strong><br>令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么推荐结果的召回率定义为：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://latex.codecogs.com/svg.latex?Recall=%5Cfrac%7B%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CR(u)%20%5Ccap%20%20T(u)%7C%7D%7B%20%20%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CT(u)%7C%20%7D\" alt=\"\"></p>\n<p>推荐结果的精确率定义为：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://latex.codecogs.com/svg.latex?Precision=%5Cfrac%7B%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CR(u)%20%5Ccap%20%20T(u)%7C%7D%7B%20%20%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CR(u)%7C%20%7D\" alt=\"\"></p>\n<p><strong>F1</strong></p>\n<p>为了综合地反应Precision和recall的结果，可以使用F1-score，F1-score是精确率和召回率的调和平均值：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://latex.codecogs.com/svg.latex?F1=%5Cfrac%7B2%20*%20Precision%20*%20Recall%7D%7B%20Precision%20+%20Recall%7D\" alt=\"\"></p>\n<p><strong>覆盖率</strong></p>\n<p>覆盖率是描述一个推荐系统对物品长尾的发掘能力。覆盖率有不同的定义方法，最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例。假设系统的用户集合为U，推荐系统给每个用户推荐一个长度为N的物品列表R(u)。那么推荐系统的覆盖率可以通过下面的公式计算：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://latex.codecogs.com/svg.latex?Coverage%20=%5Cfrac%7B%7CU_%7Bu%20%5Cin%20U%7D%20R(u)%7C%7D%7B%7CI%7C%20%7D\" alt=\"\"></p>\n<p>此外，还有PR曲线，ROC曲线，多样性，新颖性等评估指标。</p>\n<h2 id=\"8-工程实现\"><a href=\"#8-工程实现\" class=\"headerlink\" title=\"8.工程实现\"></a>8.工程实现</h2><p>从工程的角度看推荐系统，可以将其分为两大部分：数据部分和模型部分。数据部分主要指推荐系统所需数据流的先关工程实现；模型部分指的是推荐模型的相关工程实现。根据推荐系统的整体工程架构，可以分为三个部分：</p>\n<ul>\n<li>推荐系统的数据流。主要是一些大数据流计算架构，有批处理、流计算、Lambda，Kappa4种架构。</li>\n<li>深度学习推荐模型的离线训练。有Spark MLlib，Parameter Server，TensorFlow，PyTorch等。</li>\n<li>深度学习推荐模型的上线部署</li>\n</ul>\n<h2 id=\"9-参考\"><a href=\"#9-参考\" class=\"headerlink\" title=\"9.参考\"></a>9.参考</h2><ul>\n<li>王喆. 《深度学习推荐系统》.电子工业出版社.2020.3</li>\n<li>项亮.《推荐系统实践》.人民邮电出版社.2012.6</li>\n</ul>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h2 id=\"1-架构示意图\"><a href=\"#1-架构示意图\" class=\"headerlink\" title=\"1.架构示意图\"></a>1.架构示意图</h2><p>推荐系统的技术架构示意图<br><img src=\"https://raw.githubusercontent.com/guhailin/pic/master/20201120173305.png\" alt=\"\"></p>\n<p>推荐系统的数据部分主要负责“用户”“物品”“场景”的信息收集与处理。在得到原始的数据信息后，推荐系统的数据处理系统会将原始数据进一步加工，加工后的数据出口主要有三个：</p>\n<ol>\n<li>生成推荐模型所需的样本数据，用于算法模型的训练和评估。</li>\n<li>生成推荐模型服务所需的“特征”，用于推荐系统的线上推断。</li>\n<li>生成系统监控、商业智能(Business Intelligence, BI)系统所需的统计型数据。</li>\n</ol>\n<p>推荐系统的模型部分是推荐系统的主题，一般由“召回层”“排序层”“补充策略与算法层”组成。</p>\n<ul>\n<li>召回层一般利用高效的召回规则、算法或简单的模型，快速从海量的候选集中召回用户可能感兴趣的物品。</li>\n<li>排序层利用排序模型对初筛的候选集进行精排序。</li>\n<li>补充策略与算法层，也被称为再排序层，可以在将推荐列表返回用户之前，为兼顾结果的多样性、流行度、新鲜度等指标，结合一些补充的策略和算法对推荐列表进行一定的调整，最终形成用户可见的推荐列表。</li>\n</ul>\n<p>在线环境进行模型服务之前，需要通过模型训练确定模型结构、结构中不同参数权重的具体数值，以及模型相关算法和策略中的参数取值。模型训练方法又可以根据模型训练环境的不同，分为“离线训练”和“在线训练”两部分，其中：离线训练的特点是可以利用全量样本的特征，使模型逼近全局最优点；在线更新则可以准实时地“消化”新的数据样本，更快地反映新的数据变化趋势，满足模型实时性的需求。</p>\n<p>为了评估模型的效果，方便模型的迭代优化，推荐系统的模型部分提供了“离线评估”和“线上A/B测试”等多种评估模块，用得出的线下和线上评估指标，指导下一步的模型迭代优化。</p>\n<h2 id=\"2-召回层\"><a href=\"#2-召回层\" class=\"headerlink\" title=\"2.召回层\"></a>2.召回层</h2><p>推荐系统的模型部分将推荐过程分为召回层和排序层的主要原因是基于工程上的考虑。在排序阶段，一般会使用复杂的模型，利用多特征进行精确排序，而在这一过程中，如果直接对百万量级的候选集进行逐一推断，则计算资源和延迟都是在线服务过程无法忍受的。因此加入召回过程，利用少量的特征和简单的模型或规则进行候选集的快速筛选，减少精准排序阶段的时间开销。</p>\n<p>在设计召回层时，计算速度和召回率其实是矛盾的两个指标，为提高计算速度，需要使用召回策略尽量简单；而为了提高召回率，要求召回策略能够尽量选出排序模型需要的候选集。这又要求召回策略不能过于简单，导致召回物品无法满足排序模型的要求。</p>\n<p>在权衡计算速度和召回率后，目前工业界主流的召回方法是采用多个简单策略叠加的“多路召回策略”。</p>\n<h3 id=\"2-1多路召回策略\"><a href=\"#2-1多路召回策略\" class=\"headerlink\" title=\"2.1多路召回策略\"></a>2.1多路召回策略</h3><p>所谓多路召回策略，就是指采用不同的策略、特征或简单模型，分别召回一部分候选集，然后把候选集混合在一起供后续排序模型使用的策略。</p>\n<p><img src=\"https://raw.githubusercontent.com/guhailin/pic/master/20201120180426.png\" alt=\"\"></p>\n<p>每一路召回策略会拉回K个候选物品，对于不同的召回策略，K值可以选择不同的大小。这里的K是超参数，一般需要通过离线评估加线上A/B测试的方式确定合理的取值范围。</p>\n<h3 id=\"2-2基于embedding的召回方法\"><a href=\"#2-2基于embedding的召回方法\" class=\"headerlink\" title=\"2.2基于embedding的召回方法\"></a>2.2基于embedding的召回方法</h3><p>利用深度学习网络生成的Embedding作为召回层的方法。</p>\n<h2 id=\"3-排序层\"><a href=\"#3-排序层\" class=\"headerlink\" title=\"3.排序层\"></a>3.排序层</h2><p>在互联网永不停歇的增长需求的驱动下，推荐系统的发展可谓一日千里，从2010年之前千篇一律的协同过滤、逻辑回归、进化到因子分解机、梯度提升树，再到2015年之后深度学习推荐模型的百花齐放，各种模型架构层出不穷。推荐系统的主流模型经历了从单一模型到组合模型，从经典框架到深度学习的发展过程。</p>\n<p><strong>非深度学习模型</strong></p>\n<table>\n<thead>\n<tr>\n<th>模型名称</th>\n<th>基本原理</th>\n<th>特点</th>\n<th>局限性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>协同过滤</td>\n<td>根据用户的行为历史生成用户-物品共现矩阵，利用用户相似性和物品相似性进行推荐</td>\n<td>原理简单、直接，应用广泛</td>\n<td>泛化能力差，处理稀疏矩阵的能力差，推荐结果的头部效应较明显</td>\n</tr>\n<tr>\n<td>矩阵分解</td>\n<td>将协同过滤算法中的共现矩阵分解为用户矩阵和物品矩阵，利用用户隐向量和物品隐向量的内积进行排序并推荐</td>\n<td>相交协同过滤，泛化能力有所加强，对稀疏矩阵的处理能力有所加强</td>\n<td>除了用户历史行为数据，难以利用其它用户、物品特征及上下文特征</td>\n</tr>\n<tr>\n<td>逻辑回归</td>\n<td>将推荐问题转换成类似CTR预估的二分类问题，将用户、物品、上下文等不同特征转换成特征向量，输入逻辑回归模型得到CTR，再按照预估CTR进行排序并推荐</td>\n<td>能够融合多种类型的不同特征</td>\n<td>模型不具备特征组合的能力，表达能力较差</td>\n</tr>\n<tr>\n<td>FM</td>\n<td>在逻辑回归的基础上，在模型中加入二阶特征交叉部分，为每一位特征训练得到相应特征隐向量，通过隐向量间的内积运算得到交叉特征权重</td>\n<td>相比逻辑回归，具备了二阶特征交叉能力，模型的表达能力增强</td>\n<td>由于组合爆炸问题的限制，模型不易扩展到三阶特征交叉阶段</td>\n</tr>\n<tr>\n<td>FFM</td>\n<td>在FM模型的基础上，加入“特征域”的概念，使每个特征在不同域的特征交叉时采用不同的隐向量</td>\n<td>相比FM，进一步加强了特征交叉的能力</td>\n<td>模型的训练开销达到了O(n^2)的量级，训练开销大。</td>\n</tr>\n<tr>\n<td>GBDT+LR</td>\n<td>利用GBDT进行“自动化”的特征组合，将原始特征向量转换成离散型特征向量，并输入逻辑回归模型，进行最终的CTR预估</td>\n<td>特征模型化，使模型具备了更高阶特征组合的能力</td>\n<td>GBDT无法进行完全并行的训练，更新所需的训练时间较长</td>\n</tr>\n<tr>\n<td>LS-PLM</td>\n<td>首选对样本进行“分片”，在每个“分片”内部构件逻辑回归模型，将每个样本的各“分片”概率与逻辑回归的得分进行加权平均，得到最终的预估值</td>\n<td>模型结构类似三层神经网络，具备了较强的表达能力</td>\n<td>模型结构相比深度学习模型仍比较简单，有进一步提高的空间</td>\n</tr>\n</tbody></table>\n<p><strong>基于深度学习的模型</strong></p>\n<table>\n<thead>\n<tr>\n<th>模型名称</th>\n<th>基本原理</th>\n<th>特点</th>\n<th>局限性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AutoRec</td>\n<td>基于自编码器，对用户或者物品进行编码，利用自编码器的泛化能力进行推荐</td>\n<td>单隐层神经网络结构简单，可实现快速训练和部署</td>\n<td>表达能力较差</td>\n</tr>\n<tr>\n<td>Deep Crossing</td>\n<td>利用“Embedding层+多隐层+输出层”的经典深度学习框架，预完成特征的自动深度交叉</td>\n<td>经典的深度学习推荐模型框架</td>\n<td>利用全连接隐层进行特征交叉，针对性不强</td>\n</tr>\n<tr>\n<td>NeuralCF</td>\n<td>将传统的矩阵分解中用户向量和物品向量的点击操作，换成由神经网络代替的互操作</td>\n<td>表达能力加强版的矩阵分解模型</td>\n<td>只使用了用户和物品的id特征，没有加入更多其他特征</td>\n</tr>\n<tr>\n<td>PNN</td>\n<td>针对不同特征域之间的交叉操作，定义”内积“”外积“等多积操作</td>\n<td>在经典深度学习框架上模型提高了特征交叉能力</td>\n<td>”外积“操作进行近似化，一定程度上影响了其表达能力</td>\n</tr>\n<tr>\n<td>Wide&amp;Deep</td>\n<td>利用Wide部分加强模型的”记忆能力“，利用Deep部分加强模型的”泛化能力“</td>\n<td>开创了组合模型的构造方法，对深度学习推荐模型的后续发展产生重大影响</td>\n<td>Wide部分需要人工进行特征组合的筛选</td>\n</tr>\n<tr>\n<td>Dee&amp;Cross</td>\n<td>用Cross网络替代Wide&amp;Deep模型中的Wide部分</td>\n<td>解决了Wide&amp;Deep模型人工组合特征的问题</td>\n<td>Cross网络的复杂度比较高</td>\n</tr>\n<tr>\n<td>FNN</td>\n<td>利用FM的参数来初始化深度神经网络的Embedding层参数</td>\n<td>利用FM初始化参数，加快整个网络的收敛速度</td>\n<td>模型的主结构比较简单，没有针对性的特征交叉层</td>\n</tr>\n<tr>\n<td>DeepFM</td>\n<td>在Wide&amp;Deep模型的基础上，用FM替代原来的线性Wide部分</td>\n<td>加强了Wide部分的特征交叉能力</td>\n<td>与经典的Wide&amp;Deep模型相比，结构差别不明显</td>\n</tr>\n<tr>\n<td>NFM</td>\n<td>用神经网络替代FM中二隐向量交叉的操作</td>\n<td>相比FM，NFM的表达能力和特征交叉能力更强</td>\n<td>与PNN模型的结构非常相似</td>\n</tr>\n<tr>\n<td>AFM</td>\n<td>在FM的基础上，在二阶隐向量交叉的基础上对每个交叉结果加入了注意力得分，并使用注意力网络学习注意力得分</td>\n<td>不同交叉特征的重要性不同</td>\n<td>注意力网络的训练过程比较复杂</td>\n</tr>\n<tr>\n<td>DIN</td>\n<td>在传统深度学习推荐模型的基础上引入注意力机制，并利用用户行为历史物品和目标广告物品的相关性计算注意力得分</td>\n<td>根据目标广告物品的不同，进行更有针对性的推荐</td>\n<td>并没有充分利用除”历史行为“以外的其他特征</td>\n</tr>\n<tr>\n<td>DIEN</td>\n<td>将序列模型与深度学习推荐模型结合，使用序列模型模拟用户的兴趣进化过程</td>\n<td>序列模型增强了系统对用于兴趣变迁的表达能力，使推荐系统开始考虑时间相关的行为序列中包含的有价值信息</td>\n<td>序列模型的训练复杂，线上服务的延迟较长，需要进行工程上的优化</td>\n</tr>\n<tr>\n<td>DRN</td>\n<td>将强化学习的思路应用于推荐系统，进行推荐模型的线上实时学习和更新</td>\n<td>模型对数据实时性的利用能力大大加强</td>\n<td>线上部分较复杂，工程实现难度较大</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-特征\"><a href=\"#4-特征\" class=\"headerlink\" title=\"4.特征\"></a>4.特征</h2><h3 id=\"4-1用户行为数据\"><a href=\"#4-1用户行为数据\" class=\"headerlink\" title=\"4.1用户行为数据\"></a>4.1用户行为数据</h3><p>用户行为数据是推荐系统最常用，也是最关键的数据。一般分为显性反馈行为（explicit feedback）和隐性反馈行为（implicit feedback）两种。</p>\n<table>\n<thead>\n<tr>\n<th>业务场景</th>\n<th>显性反馈行为</th>\n<th>隐性反馈行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>电子商务网站</td>\n<td>对商品的评分</td>\n<td>点击、加入购物车、购买等</td>\n</tr>\n<tr>\n<td>视频网站</td>\n<td>对视频的评分、点赞等</td>\n<td>点击、播放、播放时长等</td>\n</tr>\n<tr>\n<td>新闻类网站</td>\n<td>赞、踩等行为</td>\n<td>点击、评论等</td>\n</tr>\n<tr>\n<td>音乐网站</td>\n<td>对歌曲、歌手、专辑的评分</td>\n<td>点击、播放、收藏等</td>\n</tr>\n</tbody></table>\n<p>在当前的推荐系统特征工程中，隐性反馈行为越来越重要，主要原因是显性反馈行为的难度过大，数据量小。在深度学习模型对数据量的要求越来越大背景下，仅用显性反馈的数据不足以支持推荐系统训练过程的最终收敛。因此，能够反映用户行为特点的隐性反馈是目前特征挖掘的重点。</p>\n<h3 id=\"4-2上下文信息\"><a href=\"#4-2上下文信息\" class=\"headerlink\" title=\"4.2上下文信息\"></a>4.2上下文信息</h3><p>上下文包括用户访问推荐系统的时间、地点、心情等，对于提高推荐系统是非常重要的。比如，一个卖衣服的推荐系统在冬天和夏天应该给用户推荐不同种类的衣服，用户上班时和下班后的兴趣会有区别。</p>\n<h4 id=\"4-2-1时间\"><a href=\"#4-2-1时间\" class=\"headerlink\" title=\"4.2.1时间\"></a>4.2.1时间</h4><p>时间是一种重要的上下文信息，对用户兴趣有着深入而广泛的影响。一般认为，时间信息对用户兴趣的影响表现在以下几个方面。</p>\n<ul>\n<li>用户兴趣是变化的。一位程序员随着工作时间的增加，逐渐从阅读入门书籍过渡到阅读专业书籍。</li>\n<li>物品也是有生命周期的。比如新闻的生命周期很短暂，而电影的生命周期相对较长。</li>\n<li>季节效应。</li>\n</ul>\n<h4 id=\"4-2-2地点\"><a href=\"#4-2-2地点\" class=\"headerlink\" title=\"4.2.2地点\"></a>4.2.2地点</h4><p>除了时间，地点作为一种重要的空间特征，也是一种重要的上下文信息。不同地区的用户兴趣有所不同，用户到了不同的地方，兴趣也会有所不同。</p>\n<h2 id=\"5-冷启动\"><a href=\"#5-冷启动\" class=\"headerlink\" title=\"5.冷启动\"></a>5.冷启动</h2><p>冷启动问题主要分3类：</p>\n<ul>\n<li>用户冷启动。当心用户到来时，我们没有他的行为数据，所以也无法根据他的历史行为预测其兴趣，从而无法借此给他做个性化推荐。</li>\n<li>物品冷启动。物品冷启动主要解决如何将新的物品推荐给可能对它感兴趣的用户这一问题。</li>\n<li>系统冷启动。系统冷启动主要解决如何在一个新的开发的网站上设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务这一问题。</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>提供非个性化的推荐。非个性化推荐的最简单例子就是热门排行榜，我们可以给用户推荐热门排行榜，然后等到用户数据收集到一定的时候，再切换为个性化推荐。</li>\n<li>利用用户注册时提供的年龄、性别等数据做粗粒度的个性化。</li>\n<li>利用用户的社交网络账号登录，导入用户在社交网络上的好友信息，然后给用户推荐其好友喜欢的物品。</li>\n<li>要求用户在登录时对一些物品进行反馈，收集用户对这些物品的兴趣信息，然后给用户推荐那些和这些用户相似的物品。</li>\n<li>对于新加入的物品，可以利用内容信息，将它们推荐给喜欢过和它们相似的物品和用户。</li>\n<li>在系统冷启动时，可以引入专家的知识，通过一定的高效方式迅速建立起物品的相关度表。</li>\n<li>利用主动学习、迁移学习和“探索与利用”机制。</li>\n</ul>\n<h2 id=\"6-实时性\"><a href=\"#6-实时性\" class=\"headerlink\" title=\"6.实时性\"></a>6.实时性</h2><p><strong>推荐系统特征的实时性</strong>指的是“实时”地收集和更新推荐模型的输入特征，使推荐系统总能使用最新的特征进行预测和推荐。</p>\n<p>举例来说，在一个短视频应用中，某用户完整地看完了一个长度为10分钟的“羽毛球教学”视频。毫无疑问，某用户对“羽毛球”这个主题是感兴趣的。系统希望立刻为用户继续推荐“羽毛球”相关视频。但是由于系统特征的实时性不强，用户的观看历史无法实时反馈给推荐系统，导致推荐系统得知该用户看过“羽毛球教学”这个视频已经是半个小时之后了，因此用户已经离开该应用，无法继续推荐。这就是一个因推荐实时性差异导致推荐失败的例子。</p>\n<p><img src=\"https://raw.githubusercontent.com/guhailin/pic/master/20201122224508.png\" alt=\"\"></p>\n<p>与特征的实时性相比，<strong>推荐系统模型的实时性</strong>往往是从更全局的角度考虑问题。特征的实时性力图用更准确的特征描述用户、物品和相关场景，从而让推荐系统给出更符合当时场景的推荐结果。而模型的实时性则是希望抓住全局层面的新数据模式，发现新的趋势和相关性。</p>\n<p>模型的实时性是与模型的训练方式紧密相关的，由弱到强的训练方式分别是全量更新、增量更新、在线学习和局部更新。</p>\n<p><strong>全量更新</strong>是指模型利用某时间段内的所有训练样本进行训练，往往时间较长，因此是实时性最差的。</p>\n<p><strong>增量更新</strong>仅将新加入的样本“喂”给模型进行增量训练。深度学习往往采用梯度下降法及其变种进行学习，模型对增量样本的学习相当于在原有的样本基础上继续输入增量样本进行梯度下降。缺点是，增量更新的模型往往无法找到全局最优点，因此在实际使用中，往往采用增量和全局相结合的方式。在进行了几轮增量更新后，在业务量较少的时间窗口进行全局更新。</p>\n<p><strong>在线学习</strong>是在获得一个新的样本的同时更新模型，需要在线上环境进行模型的训练和大量模型相关参数的更新和存储，工程上的要求相对比较高。另一个方法是将强化学习与推荐系统结合。</p>\n<p><strong>局部更新</strong>是对模型的局部进行更新，较多应用在“Embedding层+神经网络”的模型中。Embedding层参数由于占据了深度学习模型参数的大部分，其训练过程会拖慢模型整体的收敛速度，因此业务往往采用Embedding层单独预训练，Embedding层以上的模型部分高频更新的混合策略。</p>\n<h2 id=\"7-离线评估\"><a href=\"#7-离线评估\" class=\"headerlink\" title=\"7.离线评估\"></a>7.离线评估</h2><p><strong>精确率和召回率</strong><br>令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么推荐结果的召回率定义为：</p>\n<p><img src=\"https://latex.codecogs.com/svg.latex?Recall=%5Cfrac%7B%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CR(u)%20%5Ccap%20%20T(u)%7C%7D%7B%20%20%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CT(u)%7C%20%7D\" alt=\"\"></p>\n<p>推荐结果的精确率定义为：</p>\n<p><img src=\"https://latex.codecogs.com/svg.latex?Precision=%5Cfrac%7B%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CR(u)%20%5Ccap%20%20T(u)%7C%7D%7B%20%20%5Csum_%7B%7D%5E%7Bu%5Cin%20%20U%7D%20%7CR(u)%7C%20%7D\" alt=\"\"></p>\n<p><strong>F1</strong></p>\n<p>为了综合地反应Precision和recall的结果，可以使用F1-score，F1-score是精确率和召回率的调和平均值：</p>\n<p><img src=\"https://latex.codecogs.com/svg.latex?F1=%5Cfrac%7B2%20*%20Precision%20*%20Recall%7D%7B%20Precision%20+%20Recall%7D\" alt=\"\"></p>\n<p><strong>覆盖率</strong></p>\n<p>覆盖率是描述一个推荐系统对物品长尾的发掘能力。覆盖率有不同的定义方法，最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例。假设系统的用户集合为U，推荐系统给每个用户推荐一个长度为N的物品列表R(u)。那么推荐系统的覆盖率可以通过下面的公式计算：</p>\n<p><img src=\"https://latex.codecogs.com/svg.latex?Coverage%20=%5Cfrac%7B%7CU_%7Bu%20%5Cin%20U%7D%20R(u)%7C%7D%7B%7CI%7C%20%7D\" alt=\"\"></p>\n<p>此外，还有PR曲线，ROC曲线，多样性，新颖性等评估指标。</p>\n<h2 id=\"8-工程实现\"><a href=\"#8-工程实现\" class=\"headerlink\" title=\"8.工程实现\"></a>8.工程实现</h2><p>从工程的角度看推荐系统，可以将其分为两大部分：数据部分和模型部分。数据部分主要指推荐系统所需数据流的先关工程实现；模型部分指的是推荐模型的相关工程实现。根据推荐系统的整体工程架构，可以分为三个部分：</p>\n<ul>\n<li>推荐系统的数据流。主要是一些大数据流计算架构，有批处理、流计算、Lambda，Kappa4种架构。</li>\n<li>深度学习推荐模型的离线训练。有Spark MLlib，Parameter Server，TensorFlow，PyTorch等。</li>\n<li>深度学习推荐模型的上线部署</li>\n</ul>\n<h2 id=\"9-参考\"><a href=\"#9-参考\" class=\"headerlink\" title=\"9.参考\"></a>9.参考</h2><ul>\n<li>王喆. 《深度学习推荐系统》.电子工业出版社.2020.3</li>\n<li>项亮.《推荐系统实践》.人民邮电出版社.2012.6</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}